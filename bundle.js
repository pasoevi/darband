(()=>{"use strict";var t={424:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(537),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,"html,\nbody {\n    border: 0;\n    margin: 0;\n    padding: 0;\n    height: 100%;\n}\n\n.container {\n    position: relative;\n    width: 95%;\n    height: 95%;\n}\n\n.container canvas, #game-ui {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n#game-ui {\n    display: none;\n    background-color: rgba(2, green, blue, 0.75);\n    width: 90%;\n    height: auto;\n    color: red;\n}\n\ncanvas {\n    outline: 1px solid white;\n}\n\nbody {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: indigo;\n    text-align: center;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,SAAS;IACT,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;AACX;;AAEA;IACI,aAAa;IACb,4CAA4C;IAC5C,UAAU;IACV,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,wBAAwB;IACxB,kBAAkB;AACtB",sourcesContent:["html,\nbody {\n    border: 0;\n    margin: 0;\n    padding: 0;\n    height: 100%;\n}\n\n.container {\n    position: relative;\n    width: 95%;\n    height: 95%;\n}\n\n.container canvas, #game-ui {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n#game-ui {\n    display: none;\n    background-color: rgba(2, green, blue, 0.75);\n    width: 90%;\n    height: auto;\n    color: red;\n}\n\ncanvas {\n    outline: 1px solid white;\n}\n\nbody {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: indigo;\n    text-align: center;\n}\n"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(i)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var u=0;u<t.length;u++){var h=[].concat(t[u]);i&&s[h[0]]||(void 0!==o&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=o),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),r&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=r):h[4]="".concat(r)),e.push(h))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */"),s=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},s=[],a=0;a<t.length;a++){var c=t[a],u=i.base?c[0]+i.base:c[0],h=o[u]||0,l="".concat(u," ").concat(h);o[u]=h+1;var p=n(l),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(f);else{var d=r(f,i);i.byIndex=a,e.splice(a,0,{identifier:l,updater:d,references:1})}s.push(l)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=i(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var c=i(t,r),u=0;u<o.length;u++){var h=n(o[u]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}o=c}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{var t=n(379),e=n.n(t),i=n(795),r=n.n(i),o=n(569),s=n.n(o),a=n(565),c=n.n(a),u=n(216),h=n.n(u),l=n(589),p=n.n(l),f=n(424),d={};d.styleTagTransform=p(),d.setAttributes=c(),d.insert=s().bind(null,"head"),d.domAPI=r(),d.insertStyleElement=h(),e()(f.Z,d),f.Z&&f.Z.locals&&f.Z.locals;var m,g,v=function(){function t(){this.messages=[]}return t.prototype.push=function(t){this.messages.push(t)},t}();!function(t){t.MOVE_UP="MOVE_UP",t.MOVE_RIGHT="MOVE_RIGHT",t.MOVE_DOWN="MOVE_DOWN",t.MOVE_LEFT="MOVE_LEFT",t.PICK_ITEM="PICK_ITEM",t.DROP_ITEM="DROP_ITEM",t.DROP_LAST_ITEM="DROP_LAST_ITEM",t.QUAFF="QUAFF",t.OPEN_INVENTORY="OPEN_INVENTORY",t.WIELD="WIELD",t.UNWIELD="UNWIELD",t.THROW="THROW",t.INVOKE="INVOKE",t.PRAY="PRAY"}(g||(g={})),(m={})[g.MOVE_UP]="",m[g.MOVE_RIGHT]="",m[g.MOVE_DOWN]="",m[g.MOVE_LEFT]="",m[g.PICK_ITEM]="",m[g.DROP_ITEM]="",m[g.DROP_LAST_ITEM]="",m[g.QUAFF]="",m[g.OPEN_INVENTORY]="",m[g.WIELD]="",m[g.UNWIELD]="",m[g.THROW]="",m[g.INVOKE]="",m[g.PRAY]="";var y,A,w=(y=function(t,e){return y=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},y(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}y(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),T=function(){function t(t,e,n,i){this.game=it.getInstance(),this.hp=t,this.maxHp=e,this.defence=n,this.actor=i}return t.prototype.die=function(){this.hp=0,this.actor.getTile().monster=null,this.actor.isPlayer?this.game.ui.msg(this.game,"You die."):this.game.ui.msg(this.game,"".concat(this.actor.getName()," dies"))},t.prototype.isAlive=function(){return this.hp>0},t.prototype.takeDamage=function(t,e,n,i){var r=e;if(!t||!this.isAlive())return r;i&&(r=i.power-this.defence),void 0!==n&&(r=n.reduce((function(t,e){return t+e.value}),r));var o=this.hp;return this.hp=Math.max(0,this.hp-r),this.hp<=0&&this.die(),this.game.ui.msg(this.game,"".concat(t.getName()," attacks ").concat(this.actor.getName()," for ").concat(r,". Was ").concat(o," is ").concat(this.hp),"#ff0000"),r},t.prototype.heal=function(t){return this.hp=Math.min(this.maxHp,this.hp+t),this.game.ui.msg(this.game,"".concat(this.actor.name," heals by ").concat(t)),t},t}(),b=(function(){function t(){this.game=it.getInstance(),this.items=[]}t.prototype.getCurrentWeapon=function(){return this.weapon},t.prototype.pickItem=function(t){this.items.push(t)}}(),function(){function t(t,e,n,i){void 0===e&&(e={}),void 0===n&&(n=[]),void 0===i&&(i=10),this.monster=t,this.attackCountThisTurn=0,this.pursuing=void 0,this.game=it.getInstance(),this.skills=e,this.quests=n,this.xp=i,this.xpLevel=0,this.pursue(this.game.player)}return t.prototype.getSkills=function(){return this.skills},t.prototype.getQuests=function(){return this.quests},t.prototype.addQuest=function(t){this.quests.push(t)},t.prototype.act=function(){if(this.monster.stunned)return this.monster.stunned=!1,void this.game.ui.msg(this.game,"".concat(this.monster.name," is no longer stunned"));this.towardPursuedActor()},t.prototype.pursue=function(t){this.pursuing=t},t.prototype.towardPursuedActor=function(){if(void 0!==this.pursuing){var t=this.monster.getAdjacentTiles();if((t=t.filter((function(t){var e=t.getActorsOnThis();return 0===e.length||e.filter((function(t){return t.isPlayer})).length>0}))).length>0){var e=this.pursuing.getTile();t.sort((function(t,n){return t.distance(e)-n.distance(e)}));var n=t[0];this.monster.tryMove(n.x-this.monster.tile.x,n.y-this.monster.tile.y)}}},t}()),I=function(t){function e(e){var n=t.call(this,e,5)||this;return n.oldAI=e.ai,n.onExpired=function(){e.ai=n.oldAI,e.game.ui.msg(e.game,"".concat(e.name," is no longer confused"))},e.ai=new B(e,n.oldAI.skills,n.oldAI.getQuests()),e.game.ui.msg(e.game,"".concat(e.name," is now confused")),n}return w(e,t),e}(function(){function t(t,e,n,i){void 0===e&&(e=5),void 0===n&&(n=""),this.actor=t,this.turnsLeft=e,this.name=n,this.onExpired=i}return t.prototype.renderOnMap=function(){},t.prototype.renderOnUI=function(){},t.prototype.update=function(){this.turnsLeft-=1,this.turnsLeft<=0&&void 0!==this.onExpired&&this.onExpired()},t}()),x=function(){function t(t,e,n,i,r,o){this.isPlayer=!1,this.stunned=!1,this.game=it.getInstance(),this.tile=e,this.name=null!=t?t:"Unnamed monster",this.sprite=n,this.domains=o,this.lastMove={x:-1,y:0},this.effects=[],this.animation={offsetX:0,offsetY:0,effectCounter:0,shakeAmount:0,shakeX:0,shakeY:0},void 0!==i&&(this.life=i),void 0!==r&&(this.ai=r)}return t.prototype.getName=function(){return this.name},t.prototype.getTile=function(){return this.tile},t.prototype.addEffect=function(t){var e=new t(this);this.effects.push(e)},t.prototype.getDisplayX=function(){return this.tile.x+this.animation.offsetX},t.prototype.getDisplayY=function(){return this.tile.y+this.animation.offsetY},t.prototype.update=function(){this.game.ui.msg(this.game,"".concat(this.name," ").concat(this.stunned?"is":"is NOT"," stunned")),this.ai&&this.ai.act();for(var t=this.effects.length-1;t>=0;t--){var e=this.effects[t];e.update(),e.turnsLeft<=0&&void 0!==e.onExpired&&this.effects.splice(t,1)}},t.prototype.draw=function(){void 0!==this.sprite&&this.game.renderer.drawSprite(this.sprite,this.getDisplayX(),this.getDisplayY(),this.game.animation),this.animation.offsetX-=Math.sign(this.animation.offsetX)*(1/8),this.animation.offsetY-=Math.sign(this.animation.offsetY)*(1/8)},t.prototype.getAdjacentTiles=function(){return this.game.getTile(this.tile.x,this.tile.y).getAdjacentPassableTiles()},t}(),E=function(t){function e(e,n){return void 0===n&&(n=200),t.call(this,n,n,3,e)||this}return w(e,t),e}(T),O=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),M=function(t){function e(e,n,i,r,o,s,a){void 0===o&&(o=100);var c=t.call(this,e,i,n)||this;return c.life=null!=s?s:new L(c,o),c.ai=null!=a?a:new Y(c),c}return O(e,t),e.prototype.draw=function(){t.prototype.draw.call(this),this.drawHP()},e.prototype.drawHP=function(){var t,e,n,i,r=this.game.renderer.options.tileSize,o=r*((null!==(e=null===(t=this.life)||void 0===t?void 0:t.hp)&&void 0!==e?e:0)/(null!==(i=null===(n=this.life)||void 0===n?void 0:n.maxHp)&&void 0!==i?i:1)),s=r-o;this.game.renderer.drawRect("lime",this.getDisplayX()*r,this.getDisplayY()*r+r-2,o,2),this.game.renderer.drawRect("red",this.getDisplayX()*r+o,this.getDisplayY()*r+r-2,s,2)},e.prototype.tryMove=function(t,e){var n,i=this.tile.getNeighbor(t,e);return!!i.passable&&(this.lastMove={x:t,y:e},null===i.monster?this.move(i):this.isPlayer!==i.monster.isPlayer&&(void 0!==this.ai&&this.ai.attackCountThisTurn++,i.monster.stunned=!0,this.game.ui.msg(this.game,"".concat(this.name," stuns ").concat(i.monster.name)),null===(n=i.monster.life)||void 0===n||n.takeDamage(this,10,[]),this.animation.offsetX=(i.x-this.tile.x)/2,this.animation.offsetY=(i.y-this.tile.y)/2),!0)},e.prototype.move=function(t){this.game.ui.msg(this.game,"".concat(this.name," ").concat(this.isPlayer?"move":"moves"," to ").concat(t.x,", ").concat(t.y));var e=this.getTile();e.monster=null,this.animation.offsetX=e.x-t.x,this.animation.offsetY=e.y-t.y,this.tile=t,t.monster=this},e}(x),R=function(t){function e(e){return t.call(this,"goblin",12,e,[0,1,2],95)||this}return O(e,t),e}(M),P=function(t){function e(e){return t.call(this,"kobold",15,e,[0,1,2],125)||this}return O(e,t),e}(M),S=(O((function(t){return A.call(this,"orc",14,t,[0,1,2,3],115)||this}),A=M),function(t){function e(e){var n=t.call(this,"wolf",11,e,[0,1,2,3,4],95)||this;return n.ai=new B(n),n}return O(e,t),e}(M)),C=(function(t){O((function(e){return t.call(this,"dwarf",19,e,[7,8,9,10,11,12],120)||this}),t)}(M),function(t){function e(e){return t.call(this,"man",16,e,[3,4,5],100)||this}return O(e,t),e}(M)),_=function(t){function e(e){var n=t.call(this,"troll",17,e,[3,4],160)||this;return n.ai=new j(n),n}return O(e,t),e}(M),k=(function(t){O((function(e){return t.call(this,"elf",18,e,[0,1,2],150)||this}),t)}(M),function(t){function e(e){var n=t.call(this,"dragon",3,e,[10,11,12,13,14,15],250,void 0)||this;return n.ai=new U(n),n}return O(e,t),e}(M)),D=function(t){function e(e){return t.call(this,"snake",13,e,[7,8,9],15)||this}return O(e,t),e}(M);function N(t){return new t(it.getInstance().getRandomPassableTile())}var L=function(t){function e(e,n){return void 0===n&&(n=100),t.call(this,n,n,2,e)||this}return O(e,t),e}(T),Y=function(t){function e(e){return t.call(this,e)||this}return O(e,t),e.prototype.act=function(){this.attackCountThisTurn=0,t.prototype.act.call(this),0===this.attackCountThisTurn&&t.prototype.act.call(this)},e}(b),j=function(t){function e(e,n){void 0===n&&(n=5);var i=t.call(this,e)||this;return i.speed=n,i}return O(e,t),e.prototype.act=function(){var e=this.monster.stunned;t.prototype.act.call(this),e||(this.monster.stunned=!0,this.game.ui.msg(this.game,"".concat(this.monster.name," is stunned")))},e}(b),U=function(t){function e(e){return t.call(this,e)||this}return O(e,t),e.prototype.eat=function(t){var e,n;null===(e=t.life)||void 0===e||e.die();var i=this.monster.life.heal((null===(n=t.life)||void 0===n?void 0:n.maxHp)/2);return this.game.ui.msg(this.game,"".concat(this.monster.name," heals by ").concat(i," by eating ").concat(t.name)),this.game.animation.shakeAmount=5,i>0},e.prototype.act=function(){var e=this;if(t.prototype.act.call(this),this.monster.life.hp<.75*this.monster.life.maxHp){var n=this.game.monsters.filter((function(t){return void 0!==t.life&&t.life.maxHp<e.monster.life.maxHp/2})).sort((function(t,n){return t.tile.distance(e.monster.tile)-n.tile.distance(e.monster.tile)}));this.pursue(n[0]);var i=this.monster.tile.getAdjacentActors().filter((function(t){return void 0!==t.life&&t.life.maxHp<e.monster.life.maxHp/2}));i.length>0&&this.eat(i[0])}else this.pursue(this.game.player)},e}(b),B=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return O(e,t),e.prototype.act=function(){var t=this.monster.tile.getAdjacentPassableTiles();if(t.length>0){var e=t[0].x-this.monster.tile.x,n=t[0].y-this.monster.tile.y;this.monster.tryMove(e,n)}},e}(b),G=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),H=function(t){function e(e){var n=t.call(this,"You",0,e,[])||this;return n.life=new E(n,1e3),n.isPlayer=!0,n}return G(e,t),e.prototype.tryMove=function(e,n){return!!t.prototype.tryMove.call(this,e,n)&&(this.game.tick(),!0)},e}(M);const V=n.p+"ed154dfad390b910057308a394fa740b.png";var W;!function(t){t[t.AURA=13]="AURA"}(W||(W={}));var X=function(){function t(t,e){var n;this.isRendererReady=!1;var i=document.createElement("canvas");i.id=t,document.body.appendChild(i),this.canvas=i;var r=this.canvas.getContext("2d");if(null===r)throw new Error("No matching drawing context supported");this.context=r,this.options=e,this.context.imageSmoothingEnabled=!1,this.onRendererReady=null!==(n=e.onRendererReady)&&void 0!==n?n:function(){};var o=e.tileSize,s=e.numTiles,a=e.uiWidth;i.width=o*(s+a),i.height=o*s,i.style.width=i.width+"px",i.style.height=i.height+"px",this.spritesheet=new Image,this.loadAssets()}return t.prototype.setOnRendererReady=function(t){this.isRendererReady?t():this.onRendererReady=t},t.prototype.loadAssets=function(){var t=this;this.spritesheet.src=V,this.spritesheet.onload=function(){t.isRendererReady=!0,t.onRendererReady()}},t.prototype.drawSprite=function(t,e,n,i){var r,o,s=this.context,a=this.options.tileSize,c=this.spritesheet.height/a,u=this.spritesheet.width/a,h=Math.floor(t/u)*a,l=t%c*a;s.drawImage(this.spritesheet,l,h,a,a,e*a+(null!==(r=null==i?void 0:i.shakeX)&&void 0!==r?r:0),n*a+(null!==(o=null==i?void 0:i.shakeY)&&void 0!==o?o:0),a,a)},t.prototype.drawRect=function(t,e,n,i,r){void 0===i&&(i=this.canvas.width),void 0===r&&(r=this.canvas.height);var o=this.context,s=o.fillStyle;o.fillStyle=t,o.fillRect(e,n,i,r),o.fillStyle=s},t.prototype.drawText=function(t,e,n,i,r){var o;this.context.fillStyle=r,this.context.font=e+"px monospace",o=n?(this.canvas.width-this.context.measureText(t).width)/2:this.canvas.width-this.options.uiWidth*this.options.tileSize,this.context.fillText(t,o,i)},t.prototype.setGlobalAlpha=function(t){this.context.globalAlpha=t},t.prototype.resetGlobalAlpha=function(){this.setGlobalAlpha(1)},t.prototype.clearScreen=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},t}();function F(t,e){return Math.floor(Math.random()*(e-t+1))+t}var K,Q=function(t,e){void 0===e&&(e=[]);for(var n=0,i=t.length;n<i;n++){var r=t[n];Array.isArray(r)?Q(r,e):e.push(r)}return e},Z=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),q=function(){function t(t,e,n,i,r,o,s){void 0===n&&(n=0),void 0===i&&(i=!0),void 0===r&&(r=null),void 0===s&&(s=[]),this.x=t,this.y=e,this.sprite=n,this.passable=i,this.monster=r,this.animation=o,this.features=s,this.game=it.getInstance()}return t.prototype.draw=function(){var t,e=this.game.renderer;e.drawSprite(this.sprite,this.x,this.y,this.game.animation),this.animation&&(null===(t=this.animation)||void 0===t?void 0:t.effectCounter)>0&&(this.animation.effectCounter--,e.setGlobalAlpha(this.animation.effectCounter/30),void 0!==this.animation.effectSprite&&e.drawSprite(this.animation.effectSprite,this.x,this.y),e.resetGlobalAlpha())},t.prototype.setAnimationEffect=function(t){this.animation&&(this.animation.effectSprite=t,this.animation.effectCounter=30)},t.prototype.getActorsOnThis=function(){var t=this;return this.game.monsters.filter((function(e){return e.tile.x===t.x&&e.tile.y===t.y}))},t.prototype.getNeighbor=function(t,e){return this.game.getTile(this.x+t,this.y+e)},t.prototype.getAdjacentNeighbors=function(){return function(t){for(var e,n,i=t.slice(),r=1;r<i.length;r++)n=F(0,r),e=i[r],i[r]=i[n],i[n]=e;return i}([this.getNeighbor(0,-1),this.getNeighbor(0,1),this.getNeighbor(-1,0),this.getNeighbor(1,0)])},t.prototype.getAdjacentActors=function(){return this.getAdjacentNeighbors().filter((function(t){return null!==t.monster})).map((function(t){return t.monster}))},t.prototype.getAdjacentPassableTiles=function(){return this.getAdjacentNeighbors().filter((function(t){return t.passable}))},t.prototype.distance=function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},t.prototype.getConnectedTiles=function(){for(var t,e=[this],n=[this];n.length;){var i=null===(t=n.pop())||void 0===t?void 0:t.getAdjacentPassableTiles().filter((function(t){return!e.includes(t)}));e=e.concat(null!=i?i:[]),n=n.concat(null!=i?i:[])}return e},t.prototype.replace=function(t){return this.game.tiles[this.x][this.y]=new t(this.x,this.y),this.game.tiles[this.x][this.y]},t}(),z=function(t){function e(e,n){return t.call(this,e,n,32,!0)||this}return Z(e,t),e}(q),$=function(t){function e(e,n){return t.call(this,e,n,33,!1)||this}return Z(e,t),e}(q),J=function(t){function e(e,n,i,r){var o=t.call(this,e,n,i,!0)||this;return o.direction=r,o.features.push({onInteract:function(t){return o.climb()}}),o}return Z(e,t),e.prototype.climb=function(){var t=this.game.levelID+("UP"===this.direction?-1:1);this.game.startLevel(t)},e}(q),tt=function(t){function e(e,n,i){return void 0===i&&(i=44),t.call(this,e,n,i,"UP")||this}return Z(e,t),e}(J),et=function(t){function e(e,n,i){return void 0===i&&(i=43),t.call(this,e,n,i,"DOWN")||this}return Z(e,t),e}(J);!function(t){t[t.LOADING=0]="LOADING",t[t.PLAYING=1]="PLAYING",t[t.DEAD=2]="DEAD",t[t.TITLE=3]="TITLE"}(K||(K={}));var nt,it=function(){function t(t){var e=this;this.player=null,this.tiles=[],this.monsters=[],this.items=[],this.levelID=0,this.maxLevelID=16,this.gameState=K.TITLE,this.renderer=t.renderingLibrary,this.ui=t.ui,this.history=new v,this.logging=t.logging,this.renderer.setOnRendererReady((function(){e.ui.renderTitleScreen(e),setInterval((function(){e.render()}),15)})),this.animation={offsetX:0,offsetY:0,shakeAmount:0,shakeX:0,effectSprite:void 0,effectCounter:0,shakeY:0,screenshake:function(){this.shakeAmount&&this.shakeAmount--;var t=Math.random()*Math.PI*2;this.shakeX=Math.round(Math.cos(t)*this.shakeAmount),this.shakeY=Math.round(Math.sin(t)*this.shakeAmount)}}}return t.getInstance=function(e){if(void 0===t.instance){if(void 0===e)throw new Error("getInstance needs to be passed the parameters when called for the fist time");t.instance=new t(e)}return t.instance},t.prototype.getRandomPassableTile=function(){return this.getRandomTile((function(t){return t.passable}))},t.prototype.getTiles=function(t){var e=Q(this.tiles);return void 0===t?e:e.filter(t)},t.prototype.getPassableTiles=function(){return this.getTiles((function(t){return t.passable}))},t.prototype.setupInputHandlers=function(){var t=this,e=document.querySelector("html");if(null===e)throw Error("Please run the app in the browser environment");e.onkeydown=function(e){if(t.gameState===K.TITLE||t.gameState===K.DEAD)t.startGame();else if(t.gameState===K.PLAYING){if(void 0===t.player)return;switch(e.key){case"w":t.player.tryMove(0,-1);break;case"s":t.player.tryMove(0,1);break;case"a":t.player.tryMove(-1,0);break;case"d":t.player.tryMove(1,0);break;case"Enter":var n=t.player.getTile();t.getTile(n.x,n.y).features.map((function(e){return e.onInteract(t.player)}));break;case"c":t.player,void 0!==(i=t.monsters[0]).ai&&i.addEffect(I);break;case"ArrowUp":t.monsters[0].tryMove(0,-1);break;case"ArrowDown":t.monsters[0].tryMove(0,1);break;case"ArrowLeft":t.monsters[0].tryMove(-1,0);break;case"ArrowRight":t.monsters[0].tryMove(1,0)}}var i}},t.prototype.setupGame=function(){this.setupInputHandlers()},t.prototype.startGame=function(){this.gameState=K.PLAYING,this.startLevel(0)},t.prototype.startLevel=function(t){this.levelID=t,this.generateLevel()},t.prototype.generateLevel=function(){var t=this;!function(e,n){for(var i=1e3;i>0;i--)if(t.generateTiles()===t.getRandomPassableTile().getConnectedTiles().length)return;throw"Timeout while trying to generate map"}();var e=this.getRandomPassableTile();if(this.player=new H(e),this.monsters=this.generateMonsters(),this.levelID>0&&this.getRandomPassableTile().replace(tt),this.levelID<this.maxLevelID){var n=this.getRandomPassableTile().replace(et);0===this.levelID&&(n.sprite=42)}},t.prototype.generateMonsters=function(){for(var t=[],e=0,n=[[k,C,R,D,P],[k,C,R,D,P],[k,C,R,D,P],[P,R],[P,R],[k,k,S,S,C,_,D,D],[P,R],[P,R],[P,R],[P,R],[P,R],[P,R],[P,R],[P,R]][this.levelID];e<n.length;e++){var i=n[e];t.push(N(i))}return t},t.prototype.renderTiles=function(){for(var t=this.renderer.options.numTiles,e=0;e<t;e++)for(var n=0;n<t;n++)this.getTile(e,n).draw()},t.prototype.renderMonsters=function(){for(var t=0,e=this.monsters;t<e.length;t++)e[t].draw()},t.prototype.generateTiles=function(){for(var t=0,e=[],n=this.renderer.options.numTiles,i=0;i<n;i++){e[i]=[];for(var r=0;r<n;r++)Math.random()<.3||!this.inBounds(i,r)?e[i][r]=new $(i,r):(e[i][r]=new z(i,r),t++)}return this.tiles=e,t},t.prototype.inBounds=function(t,e){var n=this.renderer.options.numTiles;return t>0&&e>0&&t<n-1&&e<n-1},t.prototype.getTile=function(t,e){return this.inBounds(t,e)?this.tiles[t][e]:new $(t,e)},t.prototype.tick=function(){for(var t,e=this.monsters.length-1;e>=0;e--)(null===(t=this.monsters[e].life)||void 0===t?void 0:t.isAlive())?this.monsters[e].update():this.monsters.splice(e,1);this.player.life.isAlive()||(this.gameState=K.DEAD)},t.prototype.render=function(){this.gameState===K.PLAYING?(this.renderer.clearScreen(),this.animation.screenshake&&this.animation.screenshake(),this.renderTiles(),this.renderMonsters(),this.player.draw(),this.ui.render(this)):this.gameState===K.DEAD&&this.ui.renderGameOverScreen(this)},t.prototype.getRandomTile=function(t){var e=Q(this.tiles),n=void 0===t?e:e.filter(t);return n[F(0,n.length-1)]},t}(),rt=function(){function t(){}return t.prototype.log=function(t){console.log(t)},t}(),ot=function(){function t(){}return t.prototype.msg=function(t,e,n){void 0===n&&(n="violet"),t.logging.log(e),t.renderer.drawText("Level: "+t.levelID,25,!1,40,n)},t.prototype.render=function(t){t.renderer.drawText("Level: "+t.levelID,25,!1,40,"violet")},t.prototype.renderTitleScreen=function(t){t.renderer.drawRect("rgba(0,0,0,.75)",0,0),t.gameState=K.TITLE,t.renderer.drawText("PRESS ANY KEY TO START",50,!0,500,"white")},t.prototype.renderGameOverScreen=function(t){t.renderer.drawRect("rgba(0,0,0,.5)",0,0),t.renderer.drawText("YOU DIE",50,!0,300,"red"),t.renderer.drawText("PRESS ANY KEY TO START AGAIN",40,!0,400,"white")},t}();nt={renderingLibrary:new X("game",{tileSize:32,numTiles:19,uiWidth:4}),ui:new ot,logging:new rt},it.getInstance(nt).setupGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUFHM0IzTSxFQUFLb0YsU0FBU3FFLFNBQ1YseUJBQ0EsSUFDQSxFQUNBLElBQ0EsVUFJRCxZQUFBMkcscUJBQVAsU0FBNEJwUSxHQUN4QkEsRUFBS29GLFNBQVNZLFNBQVMsaUJBQWtCLEVBQUcsR0FFNUNoRyxFQUFLb0YsU0FBU3FFLFNBQ1YsVUFDQSxJQUNBLEVBQ0EsSUFDQSxPQUdKekosRUFBS29GLFNBQVNxRSxTQUNWLCtCQUNBLElBQ0EsRUFDQSxJQUNBLFVBR1osRUEvREEsR0hjVStDLEdBQTJCLENBQzdCSSxpQkFKcUIsSUFBSTRELEVBQXFCLE9BTGIsQ0FDakMzSyxTQUFVLEdBQ1ZxQyxTQUFVLEdBQ1ZDLFFBQVMsSUFPVDVILEdBSlcsSUFBSWtRLEdBS2YxRCxRQUpXLElBQUkyRCxJQU1OelEsR0FBS0MsWUFBWXNNLElBQ3pCZ0MsYSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcmJhbmQyLy4vc3JjL2luZGV4LmNzcyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2RhcmJhbmQyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2RhcmJhbmQyL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2RhcmJhbmQyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9kYXJiYW5kMi93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2RhcmJhbmQyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9zcmMvaW5kZXguY3NzP2NmZTQiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9zcmMvaGlzdG9yeS9IaXN0b3J5LnRzIiwid2VicGFjazovL2RhcmJhbmQyLy4vc3JjL0RhdGEudHMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9zcmMvTW9uc3Rlci50cyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL3NyYy9BY3Rvci50cyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL3NyYy9QbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9hc3NldHMvc3ByaXRlcy5wbmciLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9zcmMvbGliL0NhbnZhc0RyYXdpbmdMaWJyYXJ5LnRzIiwid2VicGFjazovL2RhcmJhbmQyLy4vc3JjL1V0aWwudHMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9zcmMvR2FtZS50cyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL3NyYy9UaWxlLnRzIiwid2VicGFjazovL2RhcmJhbmQyLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL2RhcmJhbmQyLy4vc3JjL1NwZWxscy50cyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL3NyYy9saWIvTG9nZ2luZy50cyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL3NyYy91aS9DYW52YXNVSS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImh0bWwsXFxuYm9keSB7XFxuICAgIGJvcmRlcjogMDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxufVxcblxcbi5jb250YWluZXIge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHdpZHRoOiA5NSU7XFxuICAgIGhlaWdodDogOTUlO1xcbn1cXG5cXG4uY29udGFpbmVyIGNhbnZhcywgI2dhbWUtdWkge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG59XFxuXFxuI2dhbWUtdWkge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIsIGdyZWVuLCBibHVlLCAwLjc1KTtcXG4gICAgd2lkdGg6IDkwJTtcXG4gICAgaGVpZ2h0OiBhdXRvO1xcbiAgICBjb2xvcjogcmVkO1xcbn1cXG5cXG5jYW52YXMge1xcbiAgICBvdXRsaW5lOiAxcHggc29saWQgd2hpdGU7XFxufVxcblxcbmJvZHkge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaW5kaWdvO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9pbmRleC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7O0lBRUksU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixVQUFVO0lBQ1YsV0FBVztBQUNmOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLE1BQU07SUFDTixPQUFPO0FBQ1g7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsNENBQTRDO0lBQzVDLFVBQVU7SUFDVixZQUFZO0lBQ1osVUFBVTtBQUNkOztBQUVBO0lBQ0ksd0JBQXdCO0FBQzVCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsd0JBQXdCO0lBQ3hCLGtCQUFrQjtBQUN0QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJodG1sLFxcbmJvZHkge1xcbiAgICBib3JkZXI6IDA7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4uY29udGFpbmVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB3aWR0aDogOTUlO1xcbiAgICBoZWlnaHQ6IDk1JTtcXG59XFxuXFxuLmNvbnRhaW5lciBjYW52YXMsICNnYW1lLXVpIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxufVxcblxcbiNnYW1lLXVpIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyLCBncmVlbiwgYmx1ZSwgMC43NSk7XFxuICAgIHdpZHRoOiA5MCU7XFxuICAgIGhlaWdodDogYXV0bztcXG4gICAgY29sb3I6IHJlZDtcXG59XFxuXFxuY2FudmFzIHtcXG4gICAgb3V0bGluZTogMXB4IHNvbGlkIHdoaXRlO1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGluZGlnbztcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gJy4uL2xpYi9JbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIEhpc3Rvcnkge1xuICAgIHByaXZhdGUgbWVzc2FnZXM6IE1lc3NhZ2VbXSA9IFtdO1xuXG4gICAgcHVibGljIHB1c2gobWVzc2FnZTogTWVzc2FnZSk6IHZvaWQge1xuICAgICAgICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG4gICAgfVxufSIsImNvbnN0IENvbG9ycyA9IHtcbiAgICB3YWxsOiAnI2MzYzNjMycsXG4gICAgZmxvb3I6ICcjMzIzMjMyJyxcbiAgICBmaXJlOiAnI2UyNTgyMicsXG4gICAgaWNlOiAnI2E1ZjJmMycsXG4gICAgcG9pc29uOiAnIzQ1ZjEyYycsXG4gICAgbWFnaWM6ICcjOGIwMDhiJyxcbiAgICBjaGFvczogJyNkNDBmMGYnLFxuICAgIHdlYWx0aDogJyNjNmM2YzYnLFxuICAgIGdvbGRfbWV0YWxsaWM6ICcjZDRhZjM3JyxcbiAgICBnb2xkX29sZDogJyNjZmI1M2InLFxuICAgIGdvbGRfeWVsbG93OiAnI2ZmZGYwMCcsXG4gICAgcmVkOiAnI2ZmMDAwMCcsXG4gICAgd2hpdGU6ICcjZmZmZmZmJyxcbiAgICBibGFjazogJyMwMDAwMDAnLFxuICAgIG9yYW5nZTogJyNhYTg4MTEnLFxuICAgIGJsdWU6ICcjMDAwMEZGJyxcbiAgICBwdXJwbGU6ICcjNDQwMDQ0Jyxcbn07XG5cbmV4cG9ydCBjb25zdCBBY3RvclR5cGUgPSB7XG4gICAgTU9OU1RFUjogJ21vbnN0ZXInLFxuICAgIFdFQVBPTjogJ3dlYXBvbicsXG4gICAgUE9USU9OOiAncG90aW9uJyxcbn07XG5cbmNvbnN0IExldmVscyA9IFtcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2Fic3RyYWN0cycsXG4gICAgICAgIGxldmVsSUQ6IDAsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZHVuZ2VvbnMnLFxuICAgICAgICBsZXZlbElEOiAxLFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2R1bmdlb25zJyxcbiAgICAgICAgbGV2ZWxJRDogMixcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdkdW5nZW9ucycsXG4gICAgICAgIGxldmVsSUQ6IDMsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZHVuZ2VvbnMnLFxuICAgICAgICBsZXZlbElEOiA0LFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2R1bmdlb25zJyxcbiAgICAgICAgbGV2ZWxJRDogNSxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdkdW5nZW9ucycsXG4gICAgICAgIGxldmVsSUQ6IDYsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZHVuZ2VvbnMnLFxuICAgICAgICBsZXZlbElEOiA3LFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2R1bmdlb25zJyxcbiAgICAgICAgbGV2ZWxJRDogOCxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdkdW5nZW9ucycsXG4gICAgICAgIGxldmVsSUQ6IDksXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZHVuZ2VvbnMnLFxuICAgICAgICBsZXZlbElEOiAxMCxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdkdW5nZW9ucycsXG4gICAgICAgIGxldmVsSUQ6IDExLFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2R1bmdlb25zJyxcbiAgICAgICAgbGV2ZWxJRDogMTIsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZHVuZ2VvbnMnLFxuICAgICAgICBsZXZlbElEOiAxMyxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdnYXRlcycsXG4gICAgICAgIGxldmVsSUQ6IDE0LFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2dhdGVzJyxcbiAgICAgICAgbGV2ZWxJRDogMTUsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZ2F0ZXMnLFxuICAgICAgICBsZXZlbElEOiAxNixcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdnYXRlcycsXG4gICAgICAgIGxldmVsSUQ6IDE3LFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2dhdGVzJyxcbiAgICAgICAgbGV2ZWxJRDogMTgsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZ2F0ZXMnLFxuICAgICAgICBsZXZlbElEOiAxOSxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdnYXRlcycsXG4gICAgICAgIGxldmVsSUQ6IDIwLFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2dhdGVzJyxcbiAgICAgICAgbGV2ZWxJRDogMjEsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZ2F0ZXMnLFxuICAgICAgICBsZXZlbElEOiAyMixcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdnYXRlcycsXG4gICAgICAgIGxldmVsSUQ6IDIzLFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2dhdGVzJyxcbiAgICAgICAgbGV2ZWxJRDogMjQsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZ2F0ZXMnLFxuICAgICAgICBsZXZlbElEOiAyNSxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdnYXRlcycsXG4gICAgICAgIGxldmVsSUQ6IDI2LFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbl07XG5cbmNvbnN0IEl0ZW1zID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogJ2RhZ2dlcicsXG4gICAgICAgIGNoOiAnXycsXG4gICAgICAgIGNvbDogJyNkZmQnLFxuICAgICAgICBzcGVlZDogMTAwLFxuICAgICAgICBkb21haW5zOiBbMSwgMiwgNSwgNl0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdsb25nIHN3b3JkJyxcbiAgICAgICAgY2g6ICd9JyxcbiAgICAgICAgY29sOiAnIzJmOScsXG4gICAgICAgIHNwZWVkOiAxMDAsXG4gICAgICAgIGRvbWFpbnM6IFsxLCA1LCA1LCA2XSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ2tuaWZlJyxcbiAgICAgICAgY2g6ICctJyxcbiAgICAgICAgY29sOiAnIzJmOScsXG4gICAgICAgIHNwZWVkOiAxMDAsXG4gICAgICAgIGRvbWFpbnM6IFsxLCA0LCA1LCA2XSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ29yYycsXG4gICAgICAgIGNoOiAnKycsXG4gICAgICAgIGNvbDogJyMyZjknLFxuICAgICAgICBzcGVlZDogMTAwLFxuICAgICAgICBkb21haW5zOiBbMywgNCwgNSwgNl0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdvcmMnLFxuICAgICAgICBjaDogJygnLFxuICAgICAgICBjb2w6ICcjMmY5JyxcbiAgICAgICAgc3BlZWQ6IDEwMCxcbiAgICAgICAgZG9tYWluczogWzMsIDQsIDUsIDZdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnb3JjJyxcbiAgICAgICAgY2g6ICcpJyxcbiAgICAgICAgY29sOiAnIzJmOScsXG4gICAgICAgIHNwZWVkOiAxMDAsXG4gICAgICAgIGRvbWFpbnM6IFszLCA0LCA1LCA2XSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ29yYycsXG4gICAgICAgIGNoOiAnKScsXG4gICAgICAgIGNvbDogJyMyZjknLFxuICAgICAgICBzcGVlZDogMTAwLFxuICAgICAgICBkb21haW5zOiBbMywgNCwgNSwgNl0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdibHVlIHBvdGlvbicsXG4gICAgICAgIGNoOiAnXycsXG4gICAgICAgIGNvbDogQ29sb3JzLmJsdWUsXG4gICAgICAgIHNwZWVkOiAxMDAsXG4gICAgICAgIGRvbWFpbnM6IFsxLCAzXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ3B1cnBsZSBwb3Rpb24nLFxuICAgICAgICBjaDogJ18nLFxuICAgICAgICBjb2w6IENvbG9ycy5wdXJwbGUsXG4gICAgICAgIHNwZWVkOiAxMDAsXG4gICAgICAgIGRvbWFpbnM6IFsyLCAzLCA0LCA1XSxcbiAgICB9LFxuXTtcblxuY29uc3QgVGV4dHMgPSB7XG4gICAgZW46IHtcbiAgICAgICAgcXVvdGVzOiBbXG4gICAgICAgICAgICBgSGUgd2hvIGZpZ2h0cyBtb25zdGVycyBtdXN0IHRha2UgY2FyZSBsZXN0IGhlIHRoZXJlYnlcbmJlY29tZSBhIG1vbnN0ZXJgLFxuICAgICAgICAgICAgJ0xpdmUgZm9yIHRvZGF5LCBmb3IgdG9tb3Jyb3cgbmV2ZXIgY29tZXMuJyxcbiAgICAgICAgICAgICdBbHdheXMgd2F0Y2ggYW5kIGZvbGxvdyBuYXR1cmUnLFxuICAgICAgICAgICAgJ1doZXJlIG1hbnkgZGllIHRoZXJlIGlzIG5vIGZlYXIgb2YgZGVhdGgnLFxuICAgICAgICAgICAgJ0RlY2VpdCBzbGVlcHMgd2l0aCBncmVlZCcsXG4gICAgICAgICAgICAnVGhlcmUgaXMgbm90aGluZyBzaW5pc3RlciBpbiBzb3JjZXJ5LCBvbmx5IGluIHRoZSBoZWFydHMgb2YgbWVuLicsXG4gICAgICAgICAgICAnT25seSBoZSB3aG8gd2FuZGVycyBjYW4gZmluZCBuZXcgcGF0aHMuJyxcbiAgICAgICAgICAgICdEZWF0aCBhbnN3ZXJzIGJlZm9yZSBzaGUgaXMgYXNrZWQuICcsXG4gICAgICAgICAgICAnVGhlIHdvcmxkIG5lZWRzIG1vcmUgaGVyb2VzLicsXG4gICAgICAgICAgICAnQmV0dGVyIHVubGVhcm5lZCBhbmQgYnJpZ2h0LCB0aGFuIGVydWRpdGUgYW5kIGZvb2xpc2guJyxcbiAgICAgICAgICAgICdCZXR0ZXIgZ28gd2l0aG91dCBoZWFsaW5nLCB0aGFuIGNhbGwgZm9yIGFuIHVuc2tpbGxlZCBoZWFsZXIuJyxcbiAgICAgICAgICAgICdTa2lsbCBpcyBub3QgYSBoZWF2eSBsb2FkIHRvIGNhcnJ5LicsXG4gICAgICAgICAgICAnRXZlbiB0aGUgYmVzdCBjbGltYmVyIG1heSBmYWxsLicsXG4gICAgICAgICAgICAnVGhlcmUgaXMgbm8gZGVhdGggZm9yIHRoZSBob25vcmFibGUsIG9ubHkgYSBjaGFuZ2Ugb2YgYm9kaWVzLicsXG4gICAgICAgICAgICAnU3RyYWlnaHQgYWhlYWQgaXMgYWx3YXlzIHNob3J0ZXN0LCBidXQgbm90IGFsd2F5cyBiZXN0LicsXG4gICAgICAgICAgICAnVGhlIHNreSBpcyBubyBsZXNzIGJsdWUgb25seSBiZWNhdXNlIHRoZSBibGluZCBjYW4gbm90IHNlZSBpdC4nLFxuICAgICAgICAgICAgJ0RlYXRoIHNtaWxlcyBhdCB1cyBhbGwuIEFsbCBhIG1hbiBjYW4gZG8gaXMgdG8gc21pbGUgYmFjay4nLFxuICAgICAgICAgICAgJ05vd2hlcmUgYXJlIHRoZXJlIG1vcmUgaGlkaW5nIHBsYWNlcyB0aGFuIGluIHRoZSBoZWFydC4nLFxuICAgICAgICAgICAgJ1doYXQgaXMgdGhlIHVzZSBvZiBydW5uaW5nIHdoZW4gd2UgYXJlIG5vdCBvbiB0aGUgcmlnaHQgdHJhY2s/JyxcbiAgICAgICAgICAgICdXaGVuIG1lbiBzcGVhayBpbGwgb2YgeW91LCBsaXZlIHNvIHRoYXQgbm9ib2R5IHdpbGwgYmVsaWV2ZSB0aGVtLicsXG4gICAgICAgICAgICAnRXZlcnl0aGluZyB3ZSBoZWFyIGlzIGFuIG9waW5pb24sIG5vdCBhIGZhY3QuIEV2ZXJ5dGhpbmcgd2Ugc2VlIGlzIGEgcGVyc3BlY3RpdmUsIG5vdCB0aGUgdHJ1dGguJyxcbiAgICAgICAgICAgICdIb3BlIGlzIHRoZSBkcmVhbXMgb2YgdGhlIG1hbiBhd2FrZS4nLFxuICAgICAgICAgICAgJ0hlIHdobyBzdGFydHMgYSBmaWdodCBoYWQgYmV0dGVyIGRvIHRoZSBmaWdodGluZyBoaW1zZWxmLicsXG4gICAgICAgICAgICAnRG8gbm90IGNyeSBiZWZvcmUgeW91IGFyZSBodXJ0LicsXG4gICAgICAgICAgICAnQ293YXJkcyBtYXkgZGllIG1hbnkgdGltZXMgYmVmb3JlIHRoZWlyIGRlYXRocy4nLFxuICAgICAgICAgICAgJ0ZlYXIgdGhlIHJlY2tvbmluZyBvZiB0aG9zZSB5b3UgaGF2ZSB3cm9uZ2VkLicsXG4gICAgICAgICAgICAnSGUgd2hvIGJlY29tZXMgYSBzaGVlcCB3aWxsIGJlIGVhdGVuIGJ5IHRoZSB3b2xmLicsXG4gICAgICAgICAgICAnVGhlIGFydCBvZiBsaXZpbmcgd2VsbCBhbmQgdGhlIGFydCBvZiBkeWluZyB3ZWxsIGlzIG9uZS4nLFxuICAgICAgICAgICAgJ0hlcm9pc20gY29uc2lzdHMgaW4gaGFuZ2luZyBvbiBvbmUgbWludXRlIGxvbmdlci4nLFxuICAgICAgICAgICAgJ01lbiBicmF2ZSBhbmQgZ2VuZXJvdXMgbGl2ZSB0aGUgYmVzdCBsaXZlcywgc2VsZG9tIHdpbGwgdGhleSBzb3Jyb3c7IHRoZW4gdGhlcmUgYXJlIGZvb2xzLCBhZnJhaWQgb2YgZXZlcnl0aGluZywgd2hvIGdydW1ibGUgaW5zdGVhZCBvZiBnaXZpbmcuJyxcbiAgICAgICAgXSxcbiAgICAgICAgcG9lbXM6IFtdLFxuICAgIH0sXG4gICAgcnU6IHtcbiAgICAgICAgcXVvdGVzOiBbXG4gICAgICAgICAgICBgSGUgd2hvIGZpZ2h0cyBtb25zdGVycyBtdXN0IHRha2UgY2FyZSBsZXN0IGhlIHRoZXJlYnlcbmJlY29tZSBhIG1vbnN0ZXJgLFxuICAgICAgICAgICAgJ0xpdmUgZm9yIHRvZGF5LCBmb3IgdG9tb3Jyb3cgbmV2ZXIgY29tZXMuJyxcbiAgICAgICAgICAgICdBbHdheXMgd2F0Y2ggYW5kIGZvbGxvdyBuYXR1cmUnLFxuICAgICAgICAgICAgJ1doZXJlIG1hbnkgZGllIHRoZXJlIGlzIG5vIGZlYXIgb2YgZGVhdGgnLFxuICAgICAgICAgICAgJ0RlY2VpdCBzbGVlcHMgd2l0aCBncmVlZCcsXG4gICAgICAgIF0sXG4gICAgICAgIHBvZW1zOiBbXSxcbiAgICB9LFxufTtcblxuLy8gQmVnaW4gQ09NTUFORFNcblxuZW51bSBDb21tYW5kcyB7XG4gICAgTU9WRV9VUCA9ICdNT1ZFX1VQJyxcbiAgICBNT1ZFX1JJR0hUID0gJ01PVkVfUklHSFQnLFxuICAgIE1PVkVfRE9XTiA9ICdNT1ZFX0RPV04nLFxuICAgIE1PVkVfTEVGVCA9ICdNT1ZFX0xFRlQnLFxuICAgIFBJQ0tfSVRFTSA9ICdQSUNLX0lURU0nLFxuICAgIERST1BfSVRFTSA9ICdEUk9QX0lURU0nLFxuICAgIERST1BfTEFTVF9JVEVNID0gJ0RST1BfTEFTVF9JVEVNJyxcbiAgICBRVUFGRiA9ICdRVUFGRicsXG4gICAgT1BFTl9JTlZFTlRPUlkgPSAnT1BFTl9JTlZFTlRPUlknLFxuICAgIFdJRUxEID0gJ1dJRUxEJyxcbiAgICBVTldJRUxEID0gJ1VOV0lFTEQnLFxuICAgIFRIUk9XID0gJ1RIUk9XJyxcbiAgICBJTlZPS0UgPSAnSU5WT0tFJyxcbiAgICBQUkFZID0gJ1BSQVknLFxufVxuXG4vLyBFbmQgQ09NTUFORFNcblxuY29uc3QgU2V0dGluZ3MgPSB7XG4gICAgcHJvZ3JhbU5hbWU6ICdkYXJiYW5kJyxcbiAgICB2ZXJzaW9uOiAnMC4wLjEnLFxuICAgIGRlYnVnOiB0cnVlLFxuICAgIHRlc3Q6IGZhbHNlLFxuICAgIG1hcFc6IDM2LFxuICAgIG1hcEg6IDEzLFxuICAgIHdpbmRvd1c6IDM2LFxuICAgIHdpbmRvd0g6IDE2LFxuICAgIGxvZ0hlaWdodDogOCxcbiAgICBtc2c6IHtcbiAgICAgICAgLy8gTWVzc2FnZSBib3ggbG9jYXRpb25cbiAgICAgICAgeDogNSxcbiAgICAgICAgeTogMCxcbiAgICB9LFxuICAgIGdhbWU6IHtcbiAgICAgICAgd2luTGV2ZWw6IDAsXG4gICAgICAgIHN0YXJ0TGV2ZWw6IDE2LFxuICAgIH0sXG4gICAga2V5YmluZGluZ3M6IHtcbiAgICAgICAgW0NvbW1hbmRzLk1PVkVfVVBdOiAnJyxcbiAgICAgICAgW0NvbW1hbmRzLk1PVkVfUklHSFRdOiAnJyxcbiAgICAgICAgW0NvbW1hbmRzLk1PVkVfRE9XTl06ICcnLFxuICAgICAgICBbQ29tbWFuZHMuTU9WRV9MRUZUXTogJycsXG4gICAgICAgIFtDb21tYW5kcy5QSUNLX0lURU1dOiAnJyxcbiAgICAgICAgW0NvbW1hbmRzLkRST1BfSVRFTV06ICcnLFxuICAgICAgICBbQ29tbWFuZHMuRFJPUF9MQVNUX0lURU1dOiAnJyxcbiAgICAgICAgW0NvbW1hbmRzLlFVQUZGXTogJycsXG4gICAgICAgIFtDb21tYW5kcy5PUEVOX0lOVkVOVE9SWV06ICcnLFxuICAgICAgICBbQ29tbWFuZHMuV0lFTERdOiAnJyxcbiAgICAgICAgW0NvbW1hbmRzLlVOV0lFTERdOiAnJyxcbiAgICAgICAgW0NvbW1hbmRzLlRIUk9XXTogJycsXG4gICAgICAgIFtDb21tYW5kcy5JTlZPS0VdOiAnJyxcbiAgICAgICAgW0NvbW1hbmRzLlBSQVldOiAnJyxcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgU2V0dGluZ3MsIENvbG9ycywgTGV2ZWxzLCBJdGVtcywgVGV4dHMgfTtcbiIsImltcG9ydCB7IEFjdG9yLCBBSSwgTGlmZSB9IGZyb20gJy4vQWN0b3InO1xuaW1wb3J0IHsgR2FtZSB9IGZyb20gJy4vR2FtZSc7XG5pbXBvcnQgeyBUaWxlIH0gZnJvbSAnLi9UaWxlJztcblxuZXhwb3J0IGNsYXNzIE1vbnN0ZXIgZXh0ZW5kcyBBY3RvciB7XG4gICAgcHVibGljIGFpOiBBSTtcbiAgICBwdWJsaWMgbGlmZTogTGlmZTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgICAgc3ByaXRlOiBudW1iZXIsXG4gICAgICAgIHRpbGU6IFRpbGUsXG4gICAgICAgIGRvbWFpbnM6IEFycmF5PG51bWJlcj4sXG4gICAgICAgIG1heEhQID0gMTAwLFxuICAgICAgICBsaWZlPzogTGlmZSxcbiAgICAgICAgYWk/OiBBSSxcbiAgICApIHtcbiAgICAgICAgc3VwZXIobmFtZSwgdGlsZSwgc3ByaXRlKTtcbiAgICAgICAgdGhpcy5saWZlID0gbGlmZSA/PyBuZXcgU2ltcGxlTGlmZSh0aGlzLCBtYXhIUCk7XG4gICAgICAgIHRoaXMuYWkgPSBhaSA/PyBuZXcgTW92ZUFuZEF0dGFja0FJKHRoaXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KCk6IHZvaWQge1xuICAgICAgICBzdXBlci5kcmF3KCk7XG4gICAgICAgIHRoaXMuZHJhd0hQKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXdIUCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGlsZVNpemUgPSB0aGlzLmdhbWUucmVuZGVyZXIub3B0aW9ucy50aWxlU2l6ZTtcbiAgICAgICAgY29uc3QgaHBQZXJjZW50YWdlID0gKHRoaXMubGlmZT8uaHAgPz8gMCkgLyAodGhpcy5saWZlPy5tYXhIcCA/PyAxKTtcbiAgICAgICAgY29uc3QgZ3JlZW5MZW5ndGggPSB0aWxlU2l6ZSAqIGhwUGVyY2VudGFnZTtcbiAgICAgICAgY29uc3QgcmVkTGVuZ3RoID0gdGlsZVNpemUgLSBncmVlbkxlbmd0aDtcbiAgICAgICAgY29uc3QgaHBMaW5lSGVpZ2h0ID0gMjtcbiAgICAgICAgdGhpcy5nYW1lLnJlbmRlcmVyLmRyYXdSZWN0KFxuICAgICAgICAgICAgJ2xpbWUnLFxuICAgICAgICAgICAgdGhpcy5nZXREaXNwbGF5WCgpICogdGlsZVNpemUsXG4gICAgICAgICAgICB0aGlzLmdldERpc3BsYXlZKCkgKiB0aWxlU2l6ZSArIHRpbGVTaXplIC0gaHBMaW5lSGVpZ2h0LFxuICAgICAgICAgICAgZ3JlZW5MZW5ndGgsXG4gICAgICAgICAgICBocExpbmVIZWlnaHQsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZ2FtZS5yZW5kZXJlci5kcmF3UmVjdChcbiAgICAgICAgICAgICdyZWQnLFxuICAgICAgICAgICAgdGhpcy5nZXREaXNwbGF5WCgpICogdGlsZVNpemUgKyBncmVlbkxlbmd0aCxcbiAgICAgICAgICAgIHRoaXMuZ2V0RGlzcGxheVkoKSAqIHRpbGVTaXplICsgdGlsZVNpemUgLSBocExpbmVIZWlnaHQsXG4gICAgICAgICAgICByZWRMZW5ndGgsXG4gICAgICAgICAgICBocExpbmVIZWlnaHQsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHRyeU1vdmUoZHg6IG51bWJlciwgZHk6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBuZXdUaWxlID0gdGhpcy50aWxlLmdldE5laWdoYm9yKGR4LCBkeSk7XG4gICAgICAgIGlmIChuZXdUaWxlLnBhc3NhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RNb3ZlID0geyB4OiBkeCwgeTogZHkgfTtcbiAgICAgICAgICAgIGlmIChuZXdUaWxlLm1vbnN0ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmUobmV3VGlsZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNQbGF5ZXIgIT09IG5ld1RpbGUubW9uc3Rlci5pc1BsYXllcikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5haS5hdHRhY2tDb3VudFRoaXNUdXJuKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld1RpbGUubW9uc3Rlci5zdHVubmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUudWkubXNnKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICAgICAgICAgIGAke3RoaXMubmFtZX0gc3R1bnMgJHtuZXdUaWxlLm1vbnN0ZXIubmFtZX1gLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogR2V0IGFjdHVhbCBkYW1hZ2UgdmFsdWUgZnJvbSB0aGUgZGVhbGVyIHRha2luZyBpbnRvIGFjY291bnRcbiAgICAgICAgICAgICAgICAvLyBzdGF0cywgZGVmZW5jZSwgZXRjLlxuICAgICAgICAgICAgICAgIGNvbnN0IHBvd2VyID0gMTA7XG5cbiAgICAgICAgICAgICAgICBuZXdUaWxlLm1vbnN0ZXIubGlmZT8udGFrZURhbWFnZSh0aGlzLCBwb3dlciwgW10pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb24ub2Zmc2V0WCA9IChuZXdUaWxlLnggLSB0aGlzLnRpbGUueCkgLyAyO1xuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLm9mZnNldFkgPSAobmV3VGlsZS55IC0gdGhpcy50aWxlLnkpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbW92ZShuZXdUaWxlOiBUaWxlKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZ2FtZS51aS5tc2coXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICBgJHt0aGlzLm5hbWV9ICR7dGhpcy5pc1BsYXllciA/ICdtb3ZlJyA6ICdtb3Zlcyd9IHRvICR7XG4gICAgICAgICAgICAgICAgbmV3VGlsZS54XG4gICAgICAgICAgICB9LCAke25ld1RpbGUueX1gLFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBjdXJyZW50VGlsZSA9IHRoaXMuZ2V0VGlsZSgpO1xuICAgICAgICBjdXJyZW50VGlsZS5tb25zdGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5hbmltYXRpb24ub2Zmc2V0WCA9IGN1cnJlbnRUaWxlLnggLSBuZXdUaWxlLng7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLm9mZnNldFkgPSBjdXJyZW50VGlsZS55IC0gbmV3VGlsZS55O1xuXG4gICAgICAgIHRoaXMudGlsZSA9IG5ld1RpbGU7XG4gICAgICAgIG5ld1RpbGUubW9uc3RlciA9IHRoaXM7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgR29ibGluIGV4dGVuZHMgTW9uc3RlciB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgc3VwZXIoJ2dvYmxpbicsIDEyLCB0aWxlLCBbMCwgMSwgMl0sIDk1KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBLb2JvbGQgZXh0ZW5kcyBNb25zdGVyIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodGlsZTogVGlsZSkge1xuICAgICAgICBzdXBlcigna29ib2xkJywgMTUsIHRpbGUsIFswLCAxLCAyXSwgMTI1KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPcmMgZXh0ZW5kcyBNb25zdGVyIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodGlsZTogVGlsZSkge1xuICAgICAgICBzdXBlcignb3JjJywgMTQsIHRpbGUsIFswLCAxLCAyLCAzXSwgMTE1KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBXb2xmIGV4dGVuZHMgTW9uc3RlciB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgc3VwZXIoJ3dvbGYnLCAxMSwgdGlsZSwgWzAsIDEsIDIsIDMsIDRdLCA5NSk7XG4gICAgICAgIHRoaXMuYWkgPSBuZXcgQ29uZnVzZWRBSSh0aGlzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEd2FyZiBleHRlbmRzIE1vbnN0ZXIge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0aWxlOiBUaWxlKSB7XG4gICAgICAgIHN1cGVyKCdkd2FyZicsIDE5LCB0aWxlLCBbNywgOCwgOSwgMTAsIDExLCAxMl0sIDEyMCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWFuIGV4dGVuZHMgTW9uc3RlciB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgc3VwZXIoJ21hbicsIDE2LCB0aWxlLCBbMywgNCwgNV0sIDEwMCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJvbGwgZXh0ZW5kcyBNb25zdGVyIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodGlsZTogVGlsZSkge1xuICAgICAgICBzdXBlcigndHJvbGwnLCAxNywgdGlsZSwgWzMsIDRdLCAxNjApO1xuICAgICAgICB0aGlzLmFpID0gbmV3IFNsb3dBSSh0aGlzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFbGYgZXh0ZW5kcyBNb25zdGVyIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodGlsZTogVGlsZSkge1xuICAgICAgICBzdXBlcignZWxmJywgMTgsIHRpbGUsIFswLCAxLCAyXSwgMTUwKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEcmFnb24gZXh0ZW5kcyBNb25zdGVyIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodGlsZTogVGlsZSkge1xuICAgICAgICBzdXBlcignZHJhZ29uJywgMywgdGlsZSwgWzEwLCAxMSwgMTIsIDEzLCAxNCwgMTVdLCAyNTAsIHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuYWkgPSBuZXcgQ29uc3VtZXJBSSh0aGlzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTbmFrZSBleHRlbmRzIE1vbnN0ZXIge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0aWxlOiBUaWxlKSB7XG4gICAgICAgIHN1cGVyKCdzbmFrZScsIDEzLCB0aWxlLCBbNywgOCwgOV0sIDE1KTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb25zdGVyPE0gZXh0ZW5kcyBNb25zdGVyPihcbiAgICBhY3RvckNsYXNzOiBuZXcgKHRpbGU6IFRpbGUpID0+IE0sXG4pOiBNIHtcbiAgICBjb25zdCByYW5kb21UaWxlID0gR2FtZS5nZXRJbnN0YW5jZSgpLmdldFJhbmRvbVBhc3NhYmxlVGlsZSgpO1xuICAgIHJldHVybiBuZXcgYWN0b3JDbGFzcyhyYW5kb21UaWxlKTtcbn1cblxuZXhwb3J0IGNsYXNzIFNpbXBsZUxpZmUgZXh0ZW5kcyBMaWZlIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoYWN0b3I6IEFjdG9yLCBtYXhIUCA9IDEwMCkge1xuICAgICAgICBzdXBlcihtYXhIUCwgbWF4SFAsIDIsIGFjdG9yKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNb3ZlQW5kQXR0YWNrQUkgZXh0ZW5kcyBBSSB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGFjdG9yOiBNb25zdGVyKSB7XG4gICAgICAgIHN1cGVyKGFjdG9yKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWN0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmF0dGFja0NvdW50VGhpc1R1cm4gPSAwO1xuICAgICAgICBzdXBlci5hY3QoKTtcblxuICAgICAgICBpZiAodGhpcy5hdHRhY2tDb3VudFRoaXNUdXJuID09PSAwKSB7XG4gICAgICAgICAgICBzdXBlci5hY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNsb3dBSSBleHRlbmRzIEFJIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IobW9uc3RlcjogTW9uc3RlciwgcHVibGljIHNwZWVkID0gNSkge1xuICAgICAgICBzdXBlcihtb25zdGVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWN0KCk6IHZvaWQge1xuICAgICAgICBjb25zdCBzdGFydGVkU3R1bm5lZCA9IHRoaXMubW9uc3Rlci5zdHVubmVkO1xuICAgICAgICBzdXBlci5hY3QoKTtcbiAgICAgICAgaWYgKCFzdGFydGVkU3R1bm5lZCkge1xuICAgICAgICAgICAgdGhpcy5tb25zdGVyLnN0dW5uZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5nYW1lLnVpLm1zZyh0aGlzLmdhbWUsIGAke3RoaXMubW9uc3Rlci5uYW1lfSBpcyBzdHVubmVkYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIFdoZW4gbG93IG9uIGhwLCBtb25zdGVycyBvZiB0aGlzIGtpbmQgY2FuIGVhdCBvdGhlciBtb25zdGVycyB0aGF0IGFyZSBubyBtb3JlXG4vLyB0aGFuIGhhbGYgb2YgaXRzIHNpemUgaW4gb3JkZXIgZG8gcmVzdG9yZSBocFxuZXhwb3J0IGNsYXNzIENvbnN1bWVyQUkgZXh0ZW5kcyBBSSB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGFjdG9yOiBNb25zdGVyKSB7XG4gICAgICAgIHN1cGVyKGFjdG9yKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZWF0KGFjdG9yOiBNb25zdGVyKTogYm9vbGVhbiB7XG4gICAgICAgIGFjdG9yLmxpZmU/LmRpZSgpO1xuICAgICAgICBjb25zdCBwb2ludHNIZWFsZWQgPSB0aGlzLm1vbnN0ZXIubGlmZS5oZWFsKGFjdG9yLmxpZmU/Lm1heEhwIC8gMik7XG4gICAgICAgIHRoaXMuZ2FtZS51aS5tc2coXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICBgJHt0aGlzLm1vbnN0ZXIubmFtZX0gaGVhbHMgYnkgJHtwb2ludHNIZWFsZWR9IGJ5IGVhdGluZyAke2FjdG9yLm5hbWV9YCxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nYW1lLmFuaW1hdGlvbi5zaGFrZUFtb3VudCA9IDU7XG4gICAgICAgIHJldHVybiBwb2ludHNIZWFsZWQgPiAwO1xuICAgIH1cblxuICAgIC8vIE1ha2UgdGhpcyBiZWhhdmlvdXIgcG9zc2libGUgdG8gYXR0YWNoIHRvIG90aGVyIHR5cGVzIG9mIGFjdG9yc1xuICAgIHB1YmxpYyBhY3QoKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmFjdCgpO1xuICAgICAgICBpZiAodGhpcy5tb25zdGVyLmxpZmUuaHAgPCB0aGlzLm1vbnN0ZXIubGlmZS5tYXhIcCAqIDAuNzUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNtYWxsTW9uc3RlcnMgPSB0aGlzLmdhbWUubW9uc3RlcnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAodCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHQubGlmZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmxpZmUubWF4SHAgPCB0aGlzLm1vbnN0ZXIubGlmZS5tYXhIcCAvIDIsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5zb3J0KFxuICAgICAgICAgICAgICAgICAgICAoYSwgYikgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGEudGlsZS5kaXN0YW5jZSh0aGlzLm1vbnN0ZXIudGlsZSkgLVxuICAgICAgICAgICAgICAgICAgICAgICAgYi50aWxlLmRpc3RhbmNlKHRoaXMubW9uc3Rlci50aWxlKSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5wdXJzdWUoc21hbGxNb25zdGVyc1swXSk7XG4gICAgICAgICAgICBjb25zdCBuZWlnaGJvcnMgPSB0aGlzLm1vbnN0ZXIudGlsZVxuICAgICAgICAgICAgICAgIC5nZXRBZGphY2VudEFjdG9yczxNb25zdGVyPigpXG4gICAgICAgICAgICAgICAgLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgKHQpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmxpZmUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdC5saWZlLm1heEhwIDwgdGhpcy5tb25zdGVyLmxpZmUubWF4SHAgLyAyLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAobmVpZ2hib3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVhdChuZWlnaGJvcnNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wdXJzdWUodGhpcy5nYW1lLnBsYXllcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25mdXNlZEFJIGV4dGVuZHMgQUkge1xuICAgIHB1YmxpYyBhY3QoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG5laWdoYm9ycyA9IHRoaXMubW9uc3Rlci50aWxlLmdldEFkamFjZW50UGFzc2FibGVUaWxlcygpO1xuICAgICAgICBpZiAobmVpZ2hib3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGR4ID0gbmVpZ2hib3JzWzBdLnggLSB0aGlzLm1vbnN0ZXIudGlsZS54O1xuICAgICAgICAgICAgY29uc3QgZHkgPSBuZWlnaGJvcnNbMF0ueSAtIHRoaXMubW9uc3Rlci50aWxlLnk7XG4gICAgICAgICAgICB0aGlzLm1vbnN0ZXIudHJ5TW92ZShkeCwgZHkpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29sb3JzIH0gZnJvbSAnLi9EYXRhJztcbmltcG9ydCB7IEdhbWUgfSBmcm9tICcuL0dhbWUnO1xuaW1wb3J0IHsgSXRlbSB9IGZyb20gJy4vSXRlbSc7XG5pbXBvcnQgeyBBbmltYXRpb24sIFBvc09uTWFwIH0gZnJvbSAnLi9saWIvSW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBDb25mdXNlZEFJLCBNb25zdGVyIH0gZnJvbSAnLi9Nb25zdGVyJztcbmltcG9ydCB7IFRpbGUgfSBmcm9tICcuL1RpbGUnO1xuaW1wb3J0IHsgTW9kaWZpZXIsIFdlYXBvbiB9IGZyb20gJy4vV2VhcG9uJztcblxuZXhwb3J0IGNsYXNzIExpZmUge1xuICAgIHB1YmxpYyBocDogbnVtYmVyO1xuICAgIHB1YmxpYyBtYXhIcDogbnVtYmVyO1xuICAgIHB1YmxpYyBkZWZlbmNlOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBnYW1lOiBHYW1lO1xuICAgIHByaXZhdGUgYWN0b3I6IEFjdG9yO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBocDogbnVtYmVyLFxuICAgICAgICBtYXhIcDogbnVtYmVyLFxuICAgICAgICBkZWZlbmNlOiBudW1iZXIsXG4gICAgICAgIGFjdG9yOiBBY3RvcixcbiAgICApIHtcbiAgICAgICAgdGhpcy5nYW1lID0gR2FtZS5nZXRJbnN0YW5jZSgpO1xuICAgICAgICB0aGlzLmhwID0gaHA7XG4gICAgICAgIHRoaXMubWF4SHAgPSBtYXhIcDtcbiAgICAgICAgdGhpcy5kZWZlbmNlID0gZGVmZW5jZTtcbiAgICAgICAgdGhpcy5hY3RvciA9IGFjdG9yO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaWUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaHAgPSAwO1xuICAgICAgICB0aGlzLmFjdG9yLmdldFRpbGUoKS5tb25zdGVyID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuYWN0b3IuaXNQbGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS51aS5tc2codGhpcy5nYW1lLCAnWW91IGRpZS4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS51aS5tc2codGhpcy5nYW1lLCBgJHt0aGlzLmFjdG9yLmdldE5hbWUoKX0gZGllc2ApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGlzQWxpdmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmhwID4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUYWtlIHZhbHVlIGRhbWFnZSBmcm9tIGRlYWxlciwgaS5lIHN1YnRyYWN0IHZhbHVlIGZyb20gdGhlIGRlYWxlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgdGFrZURhbWFnZShcbiAgICAgICAgZGVhbGVyOiBBY3RvcixcbiAgICAgICAgdmFsdWU6IG51bWJlcixcbiAgICAgICAgbW9kaWZpZXJzPzogTW9kaWZpZXJbXSxcbiAgICAgICAgd2VhcG9uPzogV2VhcG9uLFxuICAgICk6IG51bWJlciB7XG4gICAgICAgIGxldCBkYW1hZ2VUYWtlbiA9IHZhbHVlO1xuXG4gICAgICAgIGlmICghZGVhbGVyIHx8ICF0aGlzLmlzQWxpdmUoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhbWFnZVRha2VuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdlYXBvbikge1xuICAgICAgICAgICAgZGFtYWdlVGFrZW4gPSB3ZWFwb24ucG93ZXIgLSB0aGlzLmRlZmVuY2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kaWZpZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRhbWFnZVRha2VuID0gbW9kaWZpZXJzLnJlZHVjZShcbiAgICAgICAgICAgICAgICAocHJldiwgY3VycmVudCkgPT4gcHJldiArIGN1cnJlbnQudmFsdWUsXG4gICAgICAgICAgICAgICAgZGFtYWdlVGFrZW4sXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaHBCZWZvcmVBdHRhY2sgPSB0aGlzLmhwO1xuICAgICAgICB0aGlzLmhwID0gTWF0aC5tYXgoMCwgdGhpcy5ocCAtIGRhbWFnZVRha2VuKTtcbiAgICAgICAgaWYgKHRoaXMuaHAgPD0gMCkge1xuICAgICAgICAgICAgdGhpcy5kaWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2FtZS51aS5tc2coXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICBgJHtkZWFsZXIuZ2V0TmFtZSgpfSBhdHRhY2tzICR7dGhpcy5hY3Rvci5nZXROYW1lKCl9IGZvciAke2RhbWFnZVRha2VufS4gV2FzICR7aHBCZWZvcmVBdHRhY2t9IGlzICR7XG4gICAgICAgICAgICAgICAgdGhpcy5ocFxuICAgICAgICAgICAgfWAsXG4gICAgICAgICAgICBDb2xvcnMucmVkLFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBkYW1hZ2VUYWtlbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGVhbChocDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgdGhpcy5ocCA9IE1hdGgubWluKHRoaXMubWF4SHAsIHRoaXMuaHAgKyBocCk7XG4gICAgICAgIHRoaXMuZ2FtZS51aS5tc2codGhpcy5nYW1lLCBgJHt0aGlzLmFjdG9yLm5hbWV9IGhlYWxzIGJ5ICR7aHB9YCk7XG4gICAgICAgIHJldHVybiBocDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnZlbnRvcnkge1xuICAgIHByaXZhdGUgZ2FtZTogR2FtZTtcbiAgICBwcml2YXRlIHdlYXBvbj86IFdlYXBvbjtcbiAgICBwcml2YXRlIGl0ZW1zOiBJdGVtW107XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IEdhbWUuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDdXJyZW50V2VhcG9uKCk6IFdlYXBvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLndlYXBvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGlja0l0ZW0oaXRlbTogSXRlbSk6IHZvaWQge1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2goaXRlbSk7XG4gICAgfVxufVxuXG5jbGFzcyBRdWVzdCB7XG4gICAgcHVibGljIGdldE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnU29tZSBxdWVzdCc7XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgU2tpbGwge1xuICAgIHZhbHVlOiBudW1iZXI7XG4gICAgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBTa2lsbHMgPSB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9O1xuXG5leHBvcnQgY2xhc3MgQUkge1xuICAgIHB1YmxpYyBnYW1lOiBHYW1lO1xuICAgIHB1YmxpYyBza2lsbHM6IFNraWxscztcbiAgICBwcml2YXRlIHF1ZXN0czogUXVlc3RbXTtcbiAgICBwcml2YXRlIHhwOiBudW1iZXI7XG4gICAgcHJpdmF0ZSB4cExldmVsOiBudW1iZXI7XG4gICAgcHVibGljIGF0dGFja0NvdW50VGhpc1R1cm4gPSAwO1xuICAgIHB1YmxpYyBwdXJzdWluZzogQWN0b3IgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBtb25zdGVyOiBNb25zdGVyLFxuICAgICAgICBza2lsbHM6IFNraWxscyA9IHt9LFxuICAgICAgICBxdWVzdHM6IEFycmF5PFF1ZXN0PiA9IFtdLFxuICAgICAgICB4cCA9IDEwLFxuICAgICkge1xuICAgICAgICB0aGlzLmdhbWUgPSBHYW1lLmdldEluc3RhbmNlKCk7XG4gICAgICAgIHRoaXMuc2tpbGxzID0gc2tpbGxzO1xuICAgICAgICB0aGlzLnF1ZXN0cyA9IHF1ZXN0cztcbiAgICAgICAgdGhpcy54cCA9IHhwO1xuICAgICAgICB0aGlzLnhwTGV2ZWwgPSAwO1xuICAgICAgICB0aGlzLnB1cnN1ZSh0aGlzLmdhbWUucGxheWVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2tpbGxzKCk6IFNraWxscyB7XG4gICAgICAgIHJldHVybiB0aGlzLnNraWxscztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UXVlc3RzKCk6IEFycmF5PFF1ZXN0PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXN0cztcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkUXVlc3QocXVlc3Q6IFF1ZXN0KTogdm9pZCB7XG4gICAgICAgIHRoaXMucXVlc3RzLnB1c2gocXVlc3QpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhY3QoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLm1vbnN0ZXIuc3R1bm5lZCkge1xuICAgICAgICAgICAgdGhpcy5tb25zdGVyLnN0dW5uZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS51aS5tc2coXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgICAgIGAke3RoaXMubW9uc3Rlci5uYW1lfSBpcyBubyBsb25nZXIgc3R1bm5lZGAsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG93YXJkUHVyc3VlZEFjdG9yKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHB1cnN1ZShhY3RvcjogQWN0b3IpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wdXJzdWluZyA9IGFjdG9yO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB0b3dhcmRQdXJzdWVkQWN0b3IoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnB1cnN1aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmVpZ2hib3JzID0gdGhpcy5tb25zdGVyLmdldEFkamFjZW50VGlsZXMoKTtcblxuICAgICAgICBuZWlnaGJvcnMgPSBuZWlnaGJvcnMuZmlsdGVyKCh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhY3RvcnMgPSB0LmdldEFjdG9yc09uVGhpcygpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBhY3RvcnMubGVuZ3RoID09PSAwIHx8XG4gICAgICAgICAgICAgICAgYWN0b3JzLmZpbHRlcigoYSkgPT4gYS5pc1BsYXllcikubGVuZ3RoID4gMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG5laWdoYm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwdXJzdWVkQWN0b3JUaWxlID0gdGhpcy5wdXJzdWluZy5nZXRUaWxlKCk7XG4gICAgICAgICAgICBuZWlnaGJvcnMuc29ydChcbiAgICAgICAgICAgICAgICAoYSwgYikgPT5cbiAgICAgICAgICAgICAgICAgICAgYS5kaXN0YW5jZShwdXJzdWVkQWN0b3JUaWxlKSAtIGIuZGlzdGFuY2UocHVyc3VlZEFjdG9yVGlsZSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgbmV3VGlsZSA9IG5laWdoYm9yc1swXTtcbiAgICAgICAgICAgIHRoaXMubW9uc3Rlci50cnlNb3ZlKFxuICAgICAgICAgICAgICAgIG5ld1RpbGUueCAtIHRoaXMubW9uc3Rlci50aWxlLngsXG4gICAgICAgICAgICAgICAgbmV3VGlsZS55IC0gdGhpcy5tb25zdGVyLnRpbGUueSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFZmZlY3Qge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGFjdG9yOiBBY3RvcixcbiAgICAgICAgcHVibGljIHR1cm5zTGVmdDogbnVtYmVyID0gNSxcbiAgICAgICAgcHVibGljIG5hbWU6IHN0cmluZyA9ICcnLFxuICAgICAgICBwdWJsaWMgb25FeHBpcmVkPzogKCkgPT4gdm9pZCxcbiAgICApIHt9XG5cbiAgICBwcml2YXRlIHJlbmRlck9uTWFwKCkge1xuICAgICAgICAvKiBub29wICovXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJPblVJKCkge1xuICAgICAgICAvKiBub29wICovXG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50dXJuc0xlZnQgLT0gMTtcbiAgICAgICAgaWYgKHRoaXMudHVybnNMZWZ0IDw9IDAgJiYgdGhpcy5vbkV4cGlyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vbkV4cGlyZWQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbmZ1c2lvbkVmZmVjdCBleHRlbmRzIEVmZmVjdCB7XG4gICAgcHJpdmF0ZSBvbGRBSTogQUk7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IobW9uc3RlcjogTW9uc3Rlcikge1xuICAgICAgICBzdXBlcihtb25zdGVyLCA1KTtcbiAgICAgICAgdGhpcy5vbGRBSSA9IG1vbnN0ZXIuYWk7XG4gICAgICAgIHRoaXMub25FeHBpcmVkID0gKCkgPT4ge1xuICAgICAgICAgICAgbW9uc3Rlci5haSA9IHRoaXMub2xkQUk7XG4gICAgICAgICAgICBtb25zdGVyLmdhbWUudWkubXNnKFxuICAgICAgICAgICAgICAgIG1vbnN0ZXIuZ2FtZSxcbiAgICAgICAgICAgICAgICBgJHttb25zdGVyLm5hbWV9IGlzIG5vIGxvbmdlciBjb25mdXNlZGAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgICAgICBtb25zdGVyLmFpID0gbmV3IENvbmZ1c2VkQUkoXG4gICAgICAgICAgICBtb25zdGVyLFxuICAgICAgICAgICAgdGhpcy5vbGRBSS5za2lsbHMsXG4gICAgICAgICAgICB0aGlzLm9sZEFJLmdldFF1ZXN0cygpLFxuICAgICAgICApO1xuXG4gICAgICAgIG1vbnN0ZXIuZ2FtZS51aS5tc2cobW9uc3Rlci5nYW1lLCBgJHttb25zdGVyLm5hbWV9IGlzIG5vdyBjb25mdXNlZGApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFjdG9yIHtcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBzcHJpdGU/OiBudW1iZXI7XG4gICAgcHVibGljIHRpbGU6IFRpbGU7XG4gICAgcHVibGljIGlzUGxheWVyID0gZmFsc2U7XG4gICAgcHVibGljIGdhbWU6IEdhbWU7XG4gICAgcHVibGljIGxpZmU/OiBMaWZlO1xuICAgIHB1YmxpYyBpbnZlbnRvcnk/OiBJbnZlbnRvcnk7XG4gICAgcHVibGljIGFpPzogQUk7XG4gICAgcHVibGljIGRvbWFpbnM/OiBSZWFkb25seUFycmF5PG51bWJlcj47XG4gICAgcHVibGljIHN0dW5uZWQgPSBmYWxzZTtcbiAgICBwcm90ZWN0ZWQgYW5pbWF0aW9uOiBBbmltYXRpb247XG4gICAgcHVibGljIGVmZmVjdHM6IEFycmF5PEVmZmVjdD47XG4gICAgcHVibGljIGxhc3RNb3ZlOiBQb3NPbk1hcDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgICB0aWxlOiBUaWxlLFxuICAgICAgICBzcHJpdGU6IG51bWJlcixcbiAgICAgICAgbGlmZT86IExpZmUsXG4gICAgICAgIGFpPzogQUksXG4gICAgICAgIGRvbWFpbnM/OiBSZWFkb25seUFycmF5PG51bWJlcj4sXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IEdhbWUuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgdGhpcy50aWxlID0gdGlsZTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZSA/PyAnVW5uYW1lZCBtb25zdGVyJztcbiAgICAgICAgdGhpcy5zcHJpdGUgPSBzcHJpdGU7XG4gICAgICAgIHRoaXMuZG9tYWlucyA9IGRvbWFpbnM7XG4gICAgICAgIHRoaXMubGFzdE1vdmUgPSB7IHg6IC0xLCB5OiAwIH07XG4gICAgICAgIHRoaXMuZWZmZWN0cyA9IFtdO1xuXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0ge1xuICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgIG9mZnNldFk6IDAsXG4gICAgICAgICAgICBlZmZlY3RDb3VudGVyOiAwLFxuICAgICAgICAgICAgc2hha2VBbW91bnQ6IDAsXG4gICAgICAgICAgICBzaGFrZVg6IDAsXG4gICAgICAgICAgICBzaGFrZVk6IDAsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGxpZmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5saWZlID0gbGlmZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhaSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmFpID0gYWk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUaWxlKCk6IFRpbGUge1xuICAgICAgICByZXR1cm4gdGhpcy50aWxlO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGRFZmZlY3QoZWZmZWN0Q2xhc3M6IHR5cGVvZiBFZmZlY3QpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZWZmZWN0ID0gbmV3IGVmZmVjdENsYXNzKHRoaXMpO1xuICAgICAgICB0aGlzLmVmZmVjdHMucHVzaChlZmZlY3QpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXREaXNwbGF5WCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy50aWxlLnggKyB0aGlzLmFuaW1hdGlvbi5vZmZzZXRYO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXREaXNwbGF5WSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy50aWxlLnkgKyB0aGlzLmFuaW1hdGlvbi5vZmZzZXRZO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZ2FtZS51aS5tc2coXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICBgJHt0aGlzLm5hbWV9ICR7dGhpcy5zdHVubmVkID8gJ2lzJyA6ICdpcyBOT1QnfSBzdHVubmVkYCxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodGhpcy5haSkge1xuICAgICAgICAgICAgdGhpcy5haS5hY3QoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmVmZmVjdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IGVmZmVjdCA9IHRoaXMuZWZmZWN0c1tpXTtcbiAgICAgICAgICAgIGVmZmVjdC51cGRhdGUoKTtcbiAgICAgICAgICAgIGlmIChlZmZlY3QudHVybnNMZWZ0IDw9IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoZWZmZWN0Lm9uRXhwaXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWZmZWN0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnNwcml0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUucmVuZGVyZXIuZHJhd1Nwcml0ZShcbiAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZSxcbiAgICAgICAgICAgICAgICB0aGlzLmdldERpc3BsYXlYKCksXG4gICAgICAgICAgICAgICAgdGhpcy5nZXREaXNwbGF5WSgpLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5hbmltYXRpb24sXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hbmltYXRpb24ub2Zmc2V0WCAtPSBNYXRoLnNpZ24odGhpcy5hbmltYXRpb24ub2Zmc2V0WCkgKiAoMSAvIDgpO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbi5vZmZzZXRZIC09IE1hdGguc2lnbih0aGlzLmFuaW1hdGlvbi5vZmZzZXRZKSAqICgxIC8gOCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFkamFjZW50VGlsZXMoKTogQXJyYXk8VGlsZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nYW1lXG4gICAgICAgICAgICAuZ2V0VGlsZSh0aGlzLnRpbGUueCwgdGhpcy50aWxlLnkpXG4gICAgICAgICAgICAuZ2V0QWRqYWNlbnRQYXNzYWJsZVRpbGVzKCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgV2l6YXJkTGlmZSBleHRlbmRzIExpZmUge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihhY3RvcjogQWN0b3IsIG1heEhQID0gMjAwKSB7XG4gICAgICAgIHN1cGVyKG1heEhQLCBtYXhIUCwgMywgYWN0b3IpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IExpZmUsIFdpemFyZExpZmUgfSBmcm9tICcuL0FjdG9yJztcbmltcG9ydCB7IE1vbnN0ZXIgfSBmcm9tICcuL01vbnN0ZXInO1xuaW1wb3J0IHsgVGlsZSB9IGZyb20gJy4vVGlsZSc7XG5cbmV4cG9ydCBjbGFzcyBQbGF5ZXIgZXh0ZW5kcyBNb25zdGVyIHtcbiAgICBwdWJsaWMgbGlmZTogTGlmZTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodGlsZTogVGlsZSkge1xuICAgICAgICBzdXBlcignWW91JywgMCwgdGlsZSwgW10pO1xuICAgICAgICB0aGlzLmxpZmUgPSBuZXcgV2l6YXJkTGlmZSh0aGlzLCAxMDAwKTtcbiAgICAgICAgdGhpcy5pc1BsYXllciA9IHRydWU7XG4gICAgfVxuXG4gICAgcHVibGljIHRyeU1vdmUoZHg6IG51bWJlciwgZHk6IG51bWJlcikge1xuICAgICAgICBpZiAoc3VwZXIudHJ5TW92ZShkeCwgZHkpKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUudGljaygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImVkMTU0ZGZhZDM5MGI5MTAwNTczMDhhMzk0ZmE3NDBiLnBuZ1wiOyIsImltcG9ydCBzcHJpdGVzIGZyb20gJ2Fzc2V0cy9zcHJpdGVzLnBuZyc7XG5cbmltcG9ydCB7IEFuaW1hdGlvbiwgUmVuZGVyaW5nTGlicmFyeSwgUmVuZGVyT3B0aW9ucyB9IGZyb20gJy4vSW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBlbnVtIFNwcml0ZXMge1xuICAgIEFVUkEgPSAxMyxcbn1cblxuZXhwb3J0IGNsYXNzIENhbnZhc0RyYXdpbmdMaWJyYXJ5IGltcGxlbWVudHMgUmVuZGVyaW5nTGlicmFyeSB7XG4gICAgcHVibGljIGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICBwdWJsaWMgb3B0aW9uczogUmVuZGVyT3B0aW9ucztcbiAgICBwcml2YXRlIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzcHJpdGVzaGVldDogSFRNTEltYWdlRWxlbWVudDtcbiAgICBwcml2YXRlIGlzUmVuZGVyZXJSZWFkeSA9IGZhbHNlO1xuICAgIHByaXZhdGUgb25SZW5kZXJlclJlYWR5OiAoKSA9PiB2b2lkO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNhbnZhc0VsZW1lbnRJZDogc3RyaW5nLCBvcHRpb25zOiBSZW5kZXJPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICBjYW52YXMuaWQgPSBjYW52YXNFbGVtZW50SWQ7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGlmIChjdHggPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbWF0Y2hpbmcgZHJhd2luZyBjb250ZXh0IHN1cHBvcnRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGN0eDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgICAgICB0aGlzLmNvbnRleHQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ2FuIGFsc28gYmUgYXNzaWduZWQgYnkgY2FsbGluZyBzZXRPblJlbmRlcmVyUmVhZHlcbiAgICAgICAgdGhpcy5vblJlbmRlcmVyUmVhZHkgPVxuICAgICAgICAgICAgb3B0aW9ucy5vblJlbmRlcmVyUmVhZHkgPz9cbiAgICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLyogdG1wICovXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB7IHRpbGVTaXplLCBudW1UaWxlcywgdWlXaWR0aCB9ID0gb3B0aW9ucztcblxuICAgICAgICBjYW52YXMud2lkdGggPSB0aWxlU2l6ZSAqIChudW1UaWxlcyArIHVpV2lkdGgpO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gdGlsZVNpemUgKiBudW1UaWxlcztcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gY2FudmFzLndpZHRoICsgJ3B4JztcbiAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IGNhbnZhcy5oZWlnaHQgKyAncHgnO1xuXG4gICAgICAgIHRoaXMuc3ByaXRlc2hlZXQgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgdGhpcy5sb2FkQXNzZXRzKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldE9uUmVuZGVyZXJSZWFkeShvblJlYWR5OiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVuZGVyZXJSZWFkeSkge1xuICAgICAgICAgICAgb25SZWFkeSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vblJlbmRlcmVyUmVhZHkgPSBvblJlYWR5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGxvYWRBc3NldHMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3ByaXRlc2hlZXQuc3JjID0gc3ByaXRlcztcbiAgICAgICAgdGhpcy5zcHJpdGVzaGVldC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzUmVuZGVyZXJSZWFkeSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm9uUmVuZGVyZXJSZWFkeSgpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3U3ByaXRlKFxuICAgICAgICBzcHJpdGU6IG51bWJlcixcbiAgICAgICAgeDogbnVtYmVyLFxuICAgICAgICB5OiBudW1iZXIsXG4gICAgICAgIGFuaW1hdGlvbj86IEFuaW1hdGlvbixcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jb250ZXh0O1xuICAgICAgICBjb25zdCB7IHRpbGVTaXplIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNwcml0ZXNoZWV0Um93cyA9IHRoaXMuc3ByaXRlc2hlZXQuaGVpZ2h0IC8gdGlsZVNpemU7XG4gICAgICAgIGNvbnN0IHNwcml0ZXNoZWV0Q29sdW1ucyA9IHRoaXMuc3ByaXRlc2hlZXQud2lkdGggLyB0aWxlU2l6ZTtcbiAgICAgICAgY29uc3Qgc3ByaXRlUm93ID0gTWF0aC5mbG9vcihzcHJpdGUgLyBzcHJpdGVzaGVldENvbHVtbnMpICogdGlsZVNpemU7XG4gICAgICAgIGNvbnN0IHNwcml0ZUNvbHVtbiA9IChzcHJpdGUgJSBzcHJpdGVzaGVldFJvd3MpICogdGlsZVNpemU7XG5cbiAgICAgICAgY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlc2hlZXQsXG4gICAgICAgICAgICBzcHJpdGVDb2x1bW4sXG4gICAgICAgICAgICBzcHJpdGVSb3csXG4gICAgICAgICAgICB0aWxlU2l6ZSxcbiAgICAgICAgICAgIHRpbGVTaXplLFxuICAgICAgICAgICAgeCAqIHRpbGVTaXplICsgKGFuaW1hdGlvbj8uc2hha2VYID8/IDApLFxuICAgICAgICAgICAgeSAqIHRpbGVTaXplICsgKGFuaW1hdGlvbj8uc2hha2VZID8/IDApLFxuICAgICAgICAgICAgdGlsZVNpemUsXG4gICAgICAgICAgICB0aWxlU2l6ZSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhd1JlY3QoXG4gICAgICAgIGNvbG9yOiBzdHJpbmcsXG4gICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgeTogbnVtYmVyLFxuICAgICAgICB3ID0gdGhpcy5jYW52YXMud2lkdGgsXG4gICAgICAgIGggPSB0aGlzLmNhbnZhcy5oZWlnaHQsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgY29uc3Qgb2xkQ29sb3IgPSBjdHguZmlsbFN0eWxlO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XG4gICAgICAgIGN0eC5maWxsUmVjdCh4LCB5LCB3LCBoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9sZENvbG9yO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3VGV4dChcbiAgICAgICAgdGV4dDogc3RyaW5nLFxuICAgICAgICBzaXplOiBudW1iZXIsXG4gICAgICAgIGNlbnRlcmVkOiBib29sZWFuLFxuICAgICAgICB0ZXh0WTogbnVtYmVyLFxuICAgICAgICBjb2xvcjogc3RyaW5nLFxuICAgICk6IHZvaWQge1xuICAgICAgICAvLyBUT0RPOiBBbGxvdyBhY2Nlc3MgdG8gY2FudmFzIGVsZW1lbnQgb3IgY2FudmFzIHNpemVcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IHNpemUgKyAncHggbW9ub3NwYWNlJztcbiAgICAgICAgbGV0IHRleHRYO1xuICAgICAgICBpZiAoY2VudGVyZWQpIHtcbiAgICAgICAgICAgIHRleHRYID1cbiAgICAgICAgICAgICAgICAodGhpcy5jYW52YXMud2lkdGggLSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGV4dCkud2lkdGgpIC8gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHRYID1cbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAtXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnVpV2lkdGggKiB0aGlzLm9wdGlvbnMudGlsZVNpemU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGV4dCwgdGV4dFgsIHRleHRZKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0R2xvYmFsQWxwaGEodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzZXRHbG9iYWxBbHBoYSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXRHbG9iYWxBbHBoYSgxKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xlYXJTY3JlZW4oKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcbiAgICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gcmFuZG9tUmFuZ2UobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcbn1cblxuZXhwb3J0IGNvbnN0IGZsYXR0ZW4gPSBmdW5jdGlvbiA8VD4oXG4gICAgYXJyOiBBcnJheTxBcnJheTxUPj4gfCBBcnJheTxUPixcbiAgICByZXN1bHQ6IEFycmF5PFQ+ID0gW10sXG4pOiBBcnJheTxUPiB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IGFyci5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGFycltpXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBmbGF0dGVuPFQ+KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdHJ5VG8oZGVzY3JpcHRpb246IHN0cmluZywgY2FsbGJhY2s6ICgpID0+IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBmb3IgKGxldCB0aW1lb3V0ID0gMTAwMDsgdGltZW91dCA+IDA7IHRpbWVvdXQtLSkge1xuICAgICAgICBpZiAoY2FsbGJhY2soKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93ICdUaW1lb3V0IHdoaWxlIHRyeWluZyB0byAnICsgZGVzY3JpcHRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlPFQ+KGFycjogQXJyYXk8VD4pOiBBcnJheTxUPiB7XG4gICAgY29uc3QgbmV3QXJyYXkgPSBhcnIuc2xpY2UoKTtcbiAgICBsZXQgdGVtcCwgcjtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IG5ld0FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHIgPSByYW5kb21SYW5nZSgwLCBpKTtcbiAgICAgICAgdGVtcCA9IG5ld0FycmF5W2ldO1xuICAgICAgICBuZXdBcnJheVtpXSA9IG5ld0FycmF5W3JdO1xuICAgICAgICBuZXdBcnJheVtyXSA9IHRlbXA7XG4gICAgfVxuICAgIHJldHVybiBuZXdBcnJheTtcbn1cbiIsImltcG9ydCB7IEhpc3RvcnkgfSBmcm9tICcuL2hpc3RvcnkvSGlzdG9yeSc7XG5pbXBvcnQgeyBJdGVtIH0gZnJvbSAnLi9JdGVtJztcbmltcG9ydCB7IEFuaW1hdGlvbiwgR2FtZVVJLCBMb2dnaW5nTGlicmFyeSwgUmVuZGVyaW5nTGlicmFyeSB9IGZyb20gJy4vbGliL0ludGVyZmFjZXMnO1xuaW1wb3J0IHsgY3JlYXRlTW9uc3RlciwgRHJhZ29uLCBHb2JsaW4sIEtvYm9sZCwgTWFuLCBNb25zdGVyLCBTbmFrZSwgVHJvbGwsIFdvbGYsIH0gZnJvbSAnLi9Nb25zdGVyJztcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJy4vUGxheWVyJztcbmltcG9ydCB7IHNwZWxscyB9IGZyb20gJy4vU3BlbGxzJztcbmltcG9ydCB7IEZsb29yLCBTdGFpcmNhc2VEb3duLCBTdGFpcmNhc2VVcCwgVGlsZSwgV2FsbCB9IGZyb20gJy4vVGlsZSc7XG5pbXBvcnQgeyBmbGF0dGVuLCByYW5kb21SYW5nZSwgdHJ5VG8gfSBmcm9tICcuL1V0aWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEdhbWVPcHRpb25zIHtcbiAgICByZW5kZXJpbmdMaWJyYXJ5OiBSZW5kZXJpbmdMaWJyYXJ5O1xuICAgIHVpOiBHYW1lVUk7XG4gICAgbG9nZ2luZzogTG9nZ2luZ0xpYnJhcnk7XG59XG5cbmV4cG9ydCBlbnVtIEdhbWVTdGF0ZSB7XG4gICAgTE9BRElORyxcbiAgICBQTEFZSU5HLFxuICAgIERFQUQsXG4gICAgVElUTEUsXG59XG5cbmV4cG9ydCBjbGFzcyBHYW1lIHtcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogR2FtZTtcbiAgICBwdWJsaWMgcmVuZGVyZXI6IFJlbmRlcmluZ0xpYnJhcnk7XG4gICAgcHVibGljIHVpOiBHYW1lVUk7XG4gICAgcHVibGljIGhpc3Rvcnk6IEhpc3Rvcnk7XG4gICAgcHVibGljIGxvZ2dpbmc6IExvZ2dpbmdMaWJyYXJ5O1xuICAgIHB1YmxpYyBwbGF5ZXIgPSAobnVsbCBhcyB1bmtub3duKSBhcyBQbGF5ZXI7XG4gICAgcHVibGljIHRpbGVzOiBBcnJheTxBcnJheTxUaWxlPj4gPSBbXTtcbiAgICBwdWJsaWMgbW9uc3RlcnM6IE1vbnN0ZXJbXSA9IFtdO1xuICAgIHB1YmxpYyBpdGVtczogSXRlbVtdID0gW107XG4gICAgLy8gVE9ETzogVXNlIGluIGdldFBvc3NpYmxlTW9uc3RlcnNcbiAgICBwdWJsaWMgbGV2ZWxJRCA9IDA7XG4gICAgcHVibGljIG1heExldmVsSUQgPSAxNjtcbiAgICBwdWJsaWMgZ2FtZVN0YXRlOiBHYW1lU3RhdGUgPSBHYW1lU3RhdGUuVElUTEU7XG4gICAgcHVibGljIGFuaW1hdGlvbjogQW5pbWF0aW9uO1xuXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihvcHRpb25zOiBHYW1lT3B0aW9ucykge1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gb3B0aW9ucy5yZW5kZXJpbmdMaWJyYXJ5O1xuICAgICAgICB0aGlzLnVpID0gb3B0aW9ucy51aTtcbiAgICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhpc3RvcnkoKTtcbiAgICAgICAgdGhpcy5sb2dnaW5nID0gb3B0aW9ucy5sb2dnaW5nO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldE9uUmVuZGVyZXJSZWFkeSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVpLnJlbmRlclRpdGxlU2NyZWVuKHRoaXMpO1xuICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICB9LCAxNSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IHtcbiAgICAgICAgICAgIG9mZnNldFg6IDAsXG4gICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgc2hha2VBbW91bnQ6IDAsXG4gICAgICAgICAgICBzaGFrZVg6IDAsXG4gICAgICAgICAgICBlZmZlY3RTcHJpdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGVmZmVjdENvdW50ZXI6IDAsXG4gICAgICAgICAgICBzaGFrZVk6IDAsXG4gICAgICAgICAgICAvLyBUT0RPOiBDcmVhdGUgYSBHYW1lQW5pbWF0aW9uIGNsYXNzXG4gICAgICAgICAgICBzY3JlZW5zaGFrZSgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaGFrZUFtb3VudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYWtlQW1vdW50LS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNoYWtlQW5nbGUgPSBNYXRoLnJhbmRvbSgpICogTWF0aC5QSSAqIDI7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFrZVggPSBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICAgICBNYXRoLmNvcyhzaGFrZUFuZ2xlKSAqIHRoaXMuc2hha2VBbW91bnQsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWtlWSA9IE1hdGgucm91bmQoXG4gICAgICAgICAgICAgICAgICAgIE1hdGguc2luKHNoYWtlQW5nbGUpICogdGhpcy5zaGFrZUFtb3VudCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKG9wdGlvbnM/OiBHYW1lT3B0aW9ucyk6IEdhbWUge1xuICAgICAgICBpZiAoR2FtZS5pbnN0YW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAnZ2V0SW5zdGFuY2UgbmVlZHMgdG8gYmUgcGFzc2VkIHRoZSBwYXJhbWV0ZXJzIHdoZW4gY2FsbGVkIGZvciB0aGUgZmlzdCB0aW1lJyxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgR2FtZS5pbnN0YW5jZSA9IG5ldyBHYW1lKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBHYW1lLmluc3RhbmNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSYW5kb21QYXNzYWJsZVRpbGUoKTogVGlsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJhbmRvbVRpbGUoKHQ6IFRpbGUpID0+IHQucGFzc2FibGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUaWxlcyhjb25kaXRpb24/OiAodGlsZTogVGlsZSkgPT4gYm9vbGVhbik6IEFycmF5PFRpbGU+IHtcbiAgICAgICAgY29uc3QgYWxsVGlsZXMgPSBmbGF0dGVuPFRpbGU+KHRoaXMudGlsZXMpO1xuICAgICAgICByZXR1cm4gY29uZGl0aW9uID09PSB1bmRlZmluZWQgPyBhbGxUaWxlcyA6IGFsbFRpbGVzLmZpbHRlcihjb25kaXRpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQYXNzYWJsZVRpbGVzKCk6IEFycmF5PFRpbGU+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGlsZXMoKHQ6IFRpbGUpID0+IHQucGFzc2FibGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0dXBJbnB1dEhhbmRsZXJzKCkge1xuICAgICAgICBjb25zdCBodG1sID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpO1xuICAgICAgICBpZiAoaHRtbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1BsZWFzZSBydW4gdGhlIGFwcCBpbiB0aGUgYnJvd3NlciBlbnZpcm9ubWVudCcpO1xuICAgICAgICB9XG4gICAgICAgIGh0bWwub25rZXlkb3duID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZSA9PT0gR2FtZVN0YXRlLlRJVExFIHx8IHRoaXMuZ2FtZVN0YXRlID09PSBHYW1lU3RhdGUuREVBRCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRHYW1lKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2FtZVN0YXRlID09PSBHYW1lU3RhdGUuUExBWUlORykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsYXllciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci50cnlNb3ZlKDAsIC0xKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLnRyeU1vdmUoMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci50cnlNb3ZlKC0xLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLnRyeU1vdmUoMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0VudGVyJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJUaWxlID0gdGhpcy5wbGF5ZXIuZ2V0VGlsZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5nZXRUaWxlKHBsYXllclRpbGUueCwgcGxheWVyVGlsZS55KTtcbiAgICAgICAgICAgICAgICAgICAgdGlsZS5mZWF0dXJlcy5tYXAoZmVhdHVyZSA9PiBmZWF0dXJlLm9uSW50ZXJhY3QodGhpcy5wbGF5ZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICAgICAgICAgICAgICBzcGVsbHMuY29uZnVzZSh0aGlzLnBsYXllciwgdGhpcy5tb25zdGVyc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAvLyBNb25zdGVyIG1vdmVtZW50cyAodGVtcG9yYXJ5IGZlYXR1cmUpXG4gICAgICAgICAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9uc3RlcnNbMF0udHJ5TW92ZSgwLCAtMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9uc3RlcnNbMF0udHJ5TW92ZSgwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb25zdGVyc1swXS50cnlNb3ZlKC0xLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9uc3RlcnNbMF0udHJ5TW92ZSgxLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHNldHVwR2FtZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXR1cElucHV0SGFuZGxlcnMoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXJ0R2FtZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUgPSBHYW1lU3RhdGUuUExBWUlORztcbiAgICAgICAgdGhpcy5zdGFydExldmVsKDApO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGFydExldmVsKGxldmVsSWQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmxldmVsSUQgPSBsZXZlbElkO1xuICAgICAgICB0aGlzLmdlbmVyYXRlTGV2ZWwoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlTGV2ZWwoKTogdm9pZCB7XG4gICAgICAgIHRyeVRvKCdnZW5lcmF0ZSBtYXAnLCAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVUaWxlcygpID09PVxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0UmFuZG9tUGFzc2FibGVUaWxlKCkuZ2V0Q29ubmVjdGVkVGlsZXMoKS5sZW5ndGhcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHN0YXJ0aW5nVGlsZSA9IHRoaXMuZ2V0UmFuZG9tUGFzc2FibGVUaWxlKCk7XG4gICAgICAgIHRoaXMucGxheWVyID0gbmV3IFBsYXllcihzdGFydGluZ1RpbGUpO1xuXG4gICAgICAgIHRoaXMubW9uc3RlcnMgPSB0aGlzLmdlbmVyYXRlTW9uc3RlcnMoKTtcblxuICAgICAgICBpZiAodGhpcy5sZXZlbElEID4gMCkge1xuICAgICAgICAgICAgdGhpcy5nZXRSYW5kb21QYXNzYWJsZVRpbGUoKS5yZXBsYWNlKFN0YWlyY2FzZVVwKTtcbiAgICAgICAgICAgIC8vIHN0YWlyc1VwID0gbmV3IFN0YWlyY2FzZVVwKHN0YWlyc1VwLngsIHN0YWlyc1VwLnkpO1xuICAgICAgICAgICAgLy8gdGhpcy50aWxlc1tzdGFpcnNVcC54XVtzdGFpcnNVcC55XSA9IHN0YWlyc1VwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubGV2ZWxJRCA8IHRoaXMubWF4TGV2ZWxJRCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhaXJzRG93biA9IHRoaXMuZ2V0UmFuZG9tUGFzc2FibGVUaWxlKCkucmVwbGFjZShcbiAgICAgICAgICAgICAgICBTdGFpcmNhc2VEb3duLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmxldmVsSUQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBzdGFpcnNEb3duLnNwcml0ZSA9IDQyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc3RhaXJzRG93biA9IG5ldyBTdGFpcmNhc2VEb3duKHN0YWlyc0Rvd24ueCwgc3RhaXJzRG93bi55LCB0aGlzLmxldmVsSUQgPT09IDAgPyA0MiA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAvLyB0aGlzLnRpbGVzW3N0YWlyc0Rvd24ueF1bc3RhaXJzRG93bi55XSA9IHN0YWlyc0Rvd247XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBUT0RPOiBOb3QgZnVsbHkgaW1wbGVtZW50ZWQgKi9cbiAgICBwcml2YXRlIGdlbmVyYXRlTW9uc3RlcnMoKTogTW9uc3RlcltdIHtcbiAgICAgICAgY29uc3QgbW9uc3RlcnM6IE1vbnN0ZXJbXSA9IFtdO1xuXG4gICAgICAgIGNvbnN0IGFsbE1vbnN0ZXJzID0gW1xuICAgICAgICAgICAgW0RyYWdvbiwgTWFuLCBHb2JsaW4sIFNuYWtlLCBLb2JvbGRdLFxuICAgICAgICAgICAgW0RyYWdvbiwgTWFuLCBHb2JsaW4sIFNuYWtlLCBLb2JvbGRdLFxuICAgICAgICAgICAgW0RyYWdvbiwgTWFuLCBHb2JsaW4sIFNuYWtlLCBLb2JvbGRdLFxuICAgICAgICAgICAgW0tvYm9sZCwgR29ibGluXSxcbiAgICAgICAgICAgIFtLb2JvbGQsIEdvYmxpbl0sXG4gICAgICAgICAgICBbRHJhZ29uLCBEcmFnb24sIFdvbGYsIFdvbGYsIE1hbiwgVHJvbGwsIFNuYWtlLCBTbmFrZV0sXG4gICAgICAgICAgICBbS29ib2xkLCBHb2JsaW5dLFxuICAgICAgICAgICAgW0tvYm9sZCwgR29ibGluXSxcbiAgICAgICAgICAgIFtLb2JvbGQsIEdvYmxpbl0sXG4gICAgICAgICAgICBbS29ib2xkLCBHb2JsaW5dLFxuICAgICAgICAgICAgW0tvYm9sZCwgR29ibGluXSxcbiAgICAgICAgICAgIFtLb2JvbGQsIEdvYmxpbl0sXG4gICAgICAgICAgICBbS29ib2xkLCBHb2JsaW5dLFxuICAgICAgICAgICAgW0tvYm9sZCwgR29ibGluXSxcbiAgICAgICAgXTtcbiAgICAgICAgLy8gY29uc3QgbiA9IHJhbmRvbVJhbmdlKDIsIDIpO1xuICAgICAgICBmb3IgKGNvbnN0IG1vbnN0ZXIgb2YgYWxsTW9uc3RlcnNbdGhpcy5sZXZlbElEXSkge1xuICAgICAgICAgICAgbW9uc3RlcnMucHVzaChjcmVhdGVNb25zdGVyKG1vbnN0ZXIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9uc3RlcnM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJUaWxlcygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbnVtVGlsZXMgPSB0aGlzLnJlbmRlcmVyLm9wdGlvbnMubnVtVGlsZXM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVGlsZXM7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBudW1UaWxlczsgaisrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRUaWxlKGksIGopLmRyYXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyTW9uc3RlcnMoKTogdm9pZCB7XG4gICAgICAgIGZvciAoY29uc3QgbW9uc3RlciBvZiB0aGlzLm1vbnN0ZXJzKSB7XG4gICAgICAgICAgICBtb25zdGVyLmRyYXcoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2VuZXJhdGVUaWxlcygpOiBudW1iZXIge1xuICAgICAgICBsZXQgcGFzc2FibGVUaWxlcyA9IDA7XG4gICAgICAgIGNvbnN0IHRpbGVzOiBBcnJheTxBcnJheTxUaWxlPj4gPSBbXTtcbiAgICAgICAgY29uc3QgbnVtVGlsZXMgPSB0aGlzLnJlbmRlcmVyLm9wdGlvbnMubnVtVGlsZXM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVGlsZXM7IGkrKykge1xuICAgICAgICAgICAgdGlsZXNbaV0gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnVtVGlsZXM7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgMC4zIHx8ICF0aGlzLmluQm91bmRzKGksIGopKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbGVzW2ldW2pdID0gbmV3IFdhbGwoaSwgaik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGlsZXNbaV1bal0gPSBuZXcgRmxvb3IoaSwgaik7XG4gICAgICAgICAgICAgICAgICAgIHBhc3NhYmxlVGlsZXMrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRpbGVzID0gdGlsZXM7XG4gICAgICAgIHJldHVybiBwYXNzYWJsZVRpbGVzO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbkJvdW5kcyh4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBudW1UaWxlcyA9IHRoaXMucmVuZGVyZXIub3B0aW9ucy5udW1UaWxlcztcbiAgICAgICAgcmV0dXJuIHggPiAwICYmIHkgPiAwICYmIHggPCBudW1UaWxlcyAtIDEgJiYgeSA8IG51bVRpbGVzIC0gMTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VGlsZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IFRpbGUge1xuICAgICAgICBpZiAodGhpcy5pbkJvdW5kcyh4LCB5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGlsZXNbeF1beV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdhbGwoeCwgeSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgdGljaygpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgayA9IHRoaXMubW9uc3RlcnMubGVuZ3RoIC0gMTsgayA+PSAwOyBrLS0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1vbnN0ZXJzW2tdLmxpZmU/LmlzQWxpdmUoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubW9uc3RlcnNba10udXBkYXRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubW9uc3RlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnBsYXllci5saWZlLmlzQWxpdmUoKSkge1xuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUgPSBHYW1lU3RhdGUuREVBRDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZSA9PT0gR2FtZVN0YXRlLlBMQVlJTkcpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuY2xlYXJTY3JlZW4oKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbi5zY3JlZW5zaGFrZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLnNjcmVlbnNoYWtlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlbmRlclRpbGVzKCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlck1vbnN0ZXJzKCk7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5kcmF3KCk7XG4gICAgICAgICAgICB0aGlzLnVpLnJlbmRlcih0aGlzKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdhbWVTdGF0ZSA9PT0gR2FtZVN0YXRlLkRFQUQpIHtcbiAgICAgICAgICAgIHRoaXMudWkucmVuZGVyR2FtZU92ZXJTY3JlZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFJhbmRvbVRpbGUoY29uZGl0aW9uPzogKHRpbGU6IFRpbGUpID0+IGJvb2xlYW4pOiBUaWxlIHtcbiAgICAgICAgY29uc3QgYWxsVGlsZXMgPSBmbGF0dGVuPFRpbGU+KHRoaXMudGlsZXMpO1xuICAgICAgICBjb25zdCBwb3NzaWJsZVRpbGVzID1cbiAgICAgICAgICAgIGNvbmRpdGlvbiA9PT0gdW5kZWZpbmVkID8gYWxsVGlsZXMgOiBhbGxUaWxlcy5maWx0ZXIoY29uZGl0aW9uKTtcbiAgICAgICAgY29uc3QgcmFuZG9tVGlsZUluZGV4ID0gcmFuZG9tUmFuZ2UoMCwgcG9zc2libGVUaWxlcy5sZW5ndGggLSAxKTtcbiAgICAgICAgcmV0dXJuIHBvc3NpYmxlVGlsZXNbcmFuZG9tVGlsZUluZGV4XTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBBY3RvciB9IGZyb20gJy4vQWN0b3InO1xuaW1wb3J0IHsgR2FtZSB9IGZyb20gJy4vR2FtZSc7XG5pbXBvcnQgeyBBbmltYXRpb24gfSBmcm9tICcuL2xpYi9JbnRlcmZhY2VzJztcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJy4vVHlwZXMnO1xuaW1wb3J0IHsgc2h1ZmZsZSB9IGZyb20gJy4vVXRpbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGlsZUZlYXR1cmUge1xuICAgIG9uSW50ZXJhY3Q6IChhY3RvcjogQWN0b3IpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBUaWxlIHtcbiAgICBwdWJsaWMgZ2FtZTogR2FtZTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHg6IG51bWJlcixcbiAgICAgICAgcHVibGljIHk6IG51bWJlcixcbiAgICAgICAgcHVibGljIHNwcml0ZSA9IDAsXG4gICAgICAgIHB1YmxpYyBwYXNzYWJsZSA9IHRydWUsXG4gICAgICAgIHB1YmxpYyBtb25zdGVyOiBBY3RvciB8IG51bGwgPSBudWxsLFxuICAgICAgICBwdWJsaWMgYW5pbWF0aW9uPzogQW5pbWF0aW9uLFxuICAgICAgICBwdWJsaWMgZmVhdHVyZXM6IFRpbGVGZWF0dXJlW10gPSBbXSxcbiAgICApIHtcbiAgICAgICAgdGhpcy5nYW1lID0gR2FtZS5nZXRJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KCk6IHZvaWQge1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuZ2FtZS5yZW5kZXJlcjtcbiAgICAgICAgcmVuZGVyZXIuZHJhd1Nwcml0ZSh0aGlzLnNwcml0ZSwgdGhpcy54LCB0aGlzLnksIHRoaXMuZ2FtZS5hbmltYXRpb24pO1xuXG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbiAmJiB0aGlzLmFuaW1hdGlvbj8uZWZmZWN0Q291bnRlciA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLmVmZmVjdENvdW50ZXItLTtcbiAgICAgICAgICAgIHJlbmRlcmVyLnNldEdsb2JhbEFscGhhKHRoaXMuYW5pbWF0aW9uLmVmZmVjdENvdW50ZXIgLyAzMCk7XG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpb24uZWZmZWN0U3ByaXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJlci5kcmF3U3ByaXRlKHRoaXMuYW5pbWF0aW9uLmVmZmVjdFNwcml0ZSwgdGhpcy54LCB0aGlzLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVuZGVyZXIucmVzZXRHbG9iYWxBbHBoYSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHNldEFuaW1hdGlvbkVmZmVjdChlZmZlY3RTcHJpdGU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5hbmltYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLmVmZmVjdFNwcml0ZSA9IGVmZmVjdFNwcml0ZTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLmVmZmVjdENvdW50ZXIgPSAzMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBY3RvcnNPblRoaXMoKTogQWN0b3JbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdhbWUubW9uc3RlcnMuZmlsdGVyKFxuICAgICAgICAgICAgKGE6IEFjdG9yKSA9PiBhLnRpbGUueCA9PT0gdGhpcy54ICYmIGEudGlsZS55ID09PSB0aGlzLnksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE5laWdoYm9yKGR4OiBudW1iZXIsIGR5OiBudW1iZXIpOiBUaWxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZS5nZXRUaWxlKHRoaXMueCArIGR4LCB0aGlzLnkgKyBkeSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFkamFjZW50TmVpZ2hib3JzKCk6IEFycmF5PFRpbGU+IHtcbiAgICAgICAgcmV0dXJuIHNodWZmbGU8VGlsZT4oW1xuICAgICAgICAgICAgdGhpcy5nZXROZWlnaGJvcigwLCAtMSksXG4gICAgICAgICAgICB0aGlzLmdldE5laWdoYm9yKDAsIDEpLFxuICAgICAgICAgICAgdGhpcy5nZXROZWlnaGJvcigtMSwgMCksXG4gICAgICAgICAgICB0aGlzLmdldE5laWdoYm9yKDEsIDApLFxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QWRqYWNlbnRBY3RvcnM8VCBleHRlbmRzIEFjdG9yPigpOiBBcnJheTxUPiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLmdldEFkamFjZW50TmVpZ2hib3JzKClcbiAgICAgICAgICAgICAgICAuZmlsdGVyKCh0KSA9PiB0Lm1vbnN0ZXIgIT09IG51bGwpXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogUmV0dXJuIG5vdCBvbmx5IG1vbnN0ZXJzXG4gICAgICAgICAgICAgICAgLm1hcCgodCkgPT4gdC5tb25zdGVyIGFzIFQpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFkamFjZW50UGFzc2FibGVUaWxlcygpOiBBcnJheTxUaWxlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFkamFjZW50TmVpZ2hib3JzKCkuZmlsdGVyKCh0KSA9PiB0LnBhc3NhYmxlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGlzdGFuY2Uob3RoZXI6IFRpbGUpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5hYnModGhpcy54IC0gb3RoZXIueCkgKyBNYXRoLmFicyh0aGlzLnkgLSBvdGhlci55KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q29ubmVjdGVkVGlsZXMoKTogQXJyYXk8VGlsZT4ge1xuICAgICAgICBsZXQgY29ubmVjdGVkVGlsZXM6IEFycmF5PFRpbGU+ID0gW3RoaXNdO1xuICAgICAgICBsZXQgZnJvbnRpZXI6IEFycmF5PFRpbGU+ID0gW3RoaXNdO1xuICAgICAgICB3aGlsZSAoZnJvbnRpZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBuZWlnaGJvcnMgPSBmcm9udGllclxuICAgICAgICAgICAgICAgIC5wb3AoKVxuICAgICAgICAgICAgICAgID8uZ2V0QWRqYWNlbnRQYXNzYWJsZVRpbGVzKClcbiAgICAgICAgICAgICAgICAuZmlsdGVyKCh0OiBUaWxlKSA9PiAhY29ubmVjdGVkVGlsZXMuaW5jbHVkZXModCkpO1xuICAgICAgICAgICAgY29ubmVjdGVkVGlsZXMgPSBjb25uZWN0ZWRUaWxlcy5jb25jYXQobmVpZ2hib3JzID8/IFtdKTtcbiAgICAgICAgICAgIGZyb250aWVyID0gZnJvbnRpZXIuY29uY2F0KG5laWdoYm9ycyA/PyBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbm5lY3RlZFRpbGVzO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXBsYWNlKG5ld1RpbGVUeXBlOiB0eXBlb2YgVGlsZSk6IFRpbGUge1xuICAgICAgICAvLyBUT0RPOiBjb3B5IG92ZXIgbW9uc3RlcnMgYW5kIGl0ZW1zIGZyb20gdGhlIG9sZCB0aWxlIHRvIHRoZSBuZXcgaWYgbmVjZXNzYXJ5XG4gICAgICAgIHRoaXMuZ2FtZS50aWxlc1t0aGlzLnhdW3RoaXMueV0gPSBuZXcgbmV3VGlsZVR5cGUodGhpcy54LCB0aGlzLnkpO1xuICAgICAgICByZXR1cm4gdGhpcy5nYW1lLnRpbGVzW3RoaXMueF1bdGhpcy55XTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGbG9vciBleHRlbmRzIFRpbGUge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBzdXBlcih4LCB5LCAzMiwgdHJ1ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgV2FsbCBleHRlbmRzIFRpbGUge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBzdXBlcih4LCB5LCAzMywgZmFsc2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0YWlyY2FzZSBleHRlbmRzIFRpbGUge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgICAgeDogbnVtYmVyLFxuICAgICAgICB5OiBudW1iZXIsXG4gICAgICAgIHNwcml0ZTogbnVtYmVyLFxuICAgICAgICBwdWJsaWMgZGlyZWN0aW9uOiBEaXJlY3Rpb24sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKHgsIHksIHNwcml0ZSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZmVhdHVyZXMucHVzaCh7XG4gICAgICAgICAgICBvbkludGVyYWN0OiAoYWN0b3IpID0+IHRoaXMuY2xpbWIoKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNsaW1iKCkge1xuICAgICAgICBjb25zdCBuZXh0TGV2ZWwgPSB0aGlzLmdhbWUubGV2ZWxJRCArICh0aGlzLmRpcmVjdGlvbiA9PT0gJ1VQJyA/IC0gMSA6IDEpO1xuICAgICAgICB0aGlzLmdhbWUuc3RhcnRMZXZlbChuZXh0TGV2ZWwpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0YWlyY2FzZVVwIGV4dGVuZHMgU3RhaXJjYXNlIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHNwcml0ZSA9IDQ0KSB7XG4gICAgICAgIHN1cGVyKHgsIHksIHNwcml0ZSwgJ1VQJyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhaXJjYXNlRG93biBleHRlbmRzIFN0YWlyY2FzZSB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyLCBzcHJpdGUgPSA0Mykge1xuICAgICAgICBzdXBlcih4LCB5LCBzcHJpdGUsICdET1dOJyk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICcuL2luZGV4LmNzcyc7XG5cbmltcG9ydCB7IEdhbWUsIEdhbWVPcHRpb25zIH0gZnJvbSAnLi9HYW1lJztcbmltcG9ydCB7IENhbnZhc0RyYXdpbmdMaWJyYXJ5IH0gZnJvbSAnLi9saWIvQ2FudmFzRHJhd2luZ0xpYnJhcnknO1xuaW1wb3J0IHsgUmVuZGVyT3B0aW9ucyB9IGZyb20gJy4vbGliL0ludGVyZmFjZXMnO1xuaW1wb3J0IHsgQ29uc29sZUxvZ2dpbmcgfSBmcm9tICcuL2xpYi9Mb2dnaW5nJztcbmltcG9ydCB7IENhbnZhc1VJIH0gZnJvbSAnLi91aS9DYW52YXNVSSc7XG5cbmZ1bmN0aW9uIHNldHVwR2FtZSgpIHtcbiAgICBjb25zdCByZW5kZXJPcHRpb25zOiBSZW5kZXJPcHRpb25zID0ge1xuICAgICAgICB0aWxlU2l6ZTogMzIsXG4gICAgICAgIG51bVRpbGVzOiAxOSxcbiAgICAgICAgdWlXaWR0aDogNCxcbiAgICB9O1xuICAgIGNvbnN0IHJlbmRlcmluZ0xpYnJhcnkgPSBuZXcgQ2FudmFzRHJhd2luZ0xpYnJhcnkoJ2dhbWUnLCByZW5kZXJPcHRpb25zKTtcbiAgICBjb25zdCBnYW1lVUkgPSBuZXcgQ2FudmFzVUkoKTtcbiAgICBjb25zdCBsb2dnZXIgPSBuZXcgQ29uc29sZUxvZ2dpbmcoKTtcbiAgICBjb25zdCBnYW1lT3B0aW9uczogR2FtZU9wdGlvbnMgPSB7XG4gICAgICAgIHJlbmRlcmluZ0xpYnJhcnk6IHJlbmRlcmluZ0xpYnJhcnksXG4gICAgICAgIHVpOiBnYW1lVUksXG4gICAgICAgIGxvZ2dpbmc6IGxvZ2dlcixcbiAgICB9O1xuICAgIGNvbnN0IGdhbWUgPSBHYW1lLmdldEluc3RhbmNlKGdhbWVPcHRpb25zKTtcbiAgICBnYW1lLnNldHVwR2FtZSgpO1xufVxuXG5zZXR1cEdhbWUoKTtcbiIsImltcG9ydCB7IEFjdG9yLCBDb25mdXNpb25FZmZlY3QgfSBmcm9tICcuL0FjdG9yJztcbmltcG9ydCB7IFNwcml0ZXMgfSBmcm9tICcuL2xpYi9DYW52YXNEcmF3aW5nTGlicmFyeSc7XG5pbXBvcnQgeyBNb25zdGVyIH0gZnJvbSAnLi9Nb25zdGVyJztcblxuZXhwb3J0IGNvbnN0IHNwZWxscyA9IHtcbiAgICBibGluazogZnVuY3Rpb24gKGNhc3RlcjogTW9uc3Rlcik6IHZvaWQge1xuICAgICAgICBjYXN0ZXIubW92ZShjYXN0ZXIuZ2FtZS5nZXRSYW5kb21QYXNzYWJsZVRpbGUoKSk7XG4gICAgfSxcbiAgICBxdWFrZTogZnVuY3Rpb24gKGNhc3RlcjogQWN0b3IpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGlsZXMgPSBjYXN0ZXIuZ2FtZS50aWxlcztcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aWxlcy5sZW5ndGg7IHkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aWxlcy5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbGUgPSBjYXN0ZXIudGlsZTtcbiAgICAgICAgICAgICAgICBpZiAodGlsZS5tb25zdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG51bVdhbGxzID0gNCAtIHRpbGUuZ2V0QWRqYWNlbnRQYXNzYWJsZVRpbGVzKCkubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB0aWxlLm1vbnN0ZXIubGlmZT8udGFrZURhbWFnZShjYXN0ZXIsIG51bVdhbGxzICogMTAsIFtdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FzdGVyLmdhbWUuYW5pbWF0aW9uLnNoYWtlQW1vdW50ID0gMjA7XG4gICAgfSxcbiAgICBtYWVsc3Ryb206IGZ1bmN0aW9uIChjYXN0ZXI6IEFjdG9yKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGdhbWUgPSBjYXN0ZXIuZ2FtZTtcbiAgICAgICAgY29uc3QgbW9uc3RlcnMgPSBnYW1lLm1vbnN0ZXJzO1xuICAgICAgICBmb3IgKGNvbnN0IG1vbnN0ZXIgb2YgbW9uc3RlcnMpIHtcbiAgICAgICAgICAgIG1vbnN0ZXIubW92ZShnYW1lLmdldFJhbmRvbVBhc3NhYmxlVGlsZSgpKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbXVsbGlnYW46IGZ1bmN0aW9uIChjYXN0ZXI6IEFjdG9yKTogdm9pZCB7XG4gICAgICAgIGNhc3Rlci5nYW1lLnN0YXJ0TGV2ZWwoY2FzdGVyLmdhbWUubGV2ZWxJRCk7XG4gICAgfSxcbiAgICBhdXJhOiBmdW5jdGlvbiAoY2FzdGVyOiBBY3Rvcik6IHZvaWQge1xuICAgICAgICBmb3IgKGNvbnN0IHRpbGUgb2YgY2FzdGVyLnRpbGUuZ2V0QWRqYWNlbnROZWlnaGJvcnMoKSkge1xuICAgICAgICAgICAgdGlsZS5zZXRBbmltYXRpb25FZmZlY3QoMTMpO1xuICAgICAgICAgICAgaWYgKHRpbGUubW9uc3Rlcikge1xuICAgICAgICAgICAgICAgIHRpbGUubW9uc3Rlci5saWZlPy5oZWFsKDUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzdGVyLnRpbGUuc2V0QW5pbWF0aW9uRWZmZWN0KDEzKTtcbiAgICAgICAgICAgIGNhc3Rlci5saWZlPy5oZWFsKDUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkYXNoOiBmdW5jdGlvbiAoY2FzdGVyOiBNb25zdGVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG5ld1RpbGUgPSBjYXN0ZXIudGlsZTtcbiAgICAgICAgbGV0IHRlc3RUaWxlO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHRlc3RUaWxlID0gbmV3VGlsZS5nZXROZWlnaGJvcihcbiAgICAgICAgICAgICAgICBjYXN0ZXIubGFzdE1vdmUueCxcbiAgICAgICAgICAgICAgICBjYXN0ZXIubGFzdE1vdmUueSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gd2hpbGUgKHRlc3RUaWxlLnBhc3NhYmxlICYmICF0ZXN0VGlsZS5tb25zdGVyKTtcblxuICAgICAgICBpZiAoY2FzdGVyLnRpbGUgIT09IG5ld1RpbGUpIHtcbiAgICAgICAgICAgIGNhc3Rlci5tb3ZlKG5ld1RpbGUpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0aWxlIG9mIG5ld1RpbGUuZ2V0QWRqYWNlbnROZWlnaGJvcnMoKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aWxlLm1vbnN0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGlsZS5zZXRBbmltYXRpb25FZmZlY3QoU3ByaXRlcy5BVVJBKTtcbiAgICAgICAgICAgICAgICAgICAgdGlsZS5tb25zdGVyLnN0dW5uZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aWxlLm1vbnN0ZXIubGlmZT8udGFrZURhbWFnZShjYXN0ZXIsIDEwLCBbXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBjb25mdXNlOiBmdW5jdGlvbiAoY2FzdGVyOiBBY3RvciwgdGFyZ2V0OiBNb25zdGVyKTogdm9pZCB7XG4gICAgICAgIGlmICh0YXJnZXQuYWkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0LmFkZEVmZmVjdChDb25mdXNpb25FZmZlY3QpO1xuICAgIH0sXG59O1xuIiwiaW1wb3J0IHsgTG9nZ2luZ0xpYnJhcnkgfSBmcm9tICcuL0ludGVyZmFjZXMnO1xuXG4vKlxuICogQGV4cGVyaW1lbnRhbFxuICovXG5leHBvcnQgY2xhc3MgQ29uc29sZUxvZ2dpbmcgaW1wbGVtZW50cyBMb2dnaW5nTGlicmFyeSB7XG4gICAgcHVibGljIGxvZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgfVxufSIsImltcG9ydCB7IEdhbWUsIEdhbWVTdGF0ZSB9IGZyb20gJy4uL0dhbWUnO1xuaW1wb3J0IHsgR2FtZVVJIH0gZnJvbSAnLi4vbGliL0ludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgQ2FudmFzVUkgaW1wbGVtZW50cyBHYW1lVUkge1xuICAgIC8qXG4gICAgICogRGlzcGxheSBtZXNzYWdlIHVzaW5nIHRoZSByZW5kZXJpbmcgbGlicmFyeSB0aGUgZ2FtZSB3YXMgc2V0IHVwIHdpdGguXG4gICAgICogQHBhcmFtIGNvbG9yIG1pZ2h0IGJlIGlnbm9yZWQgaWYgdGhlIHJlbmRlcmluZyBsaWJyYXJ5IGRvZXMgbm90IHN1cHBvcnQgaXQuXG4gICAgICovXG4gICAgcHVibGljIG1zZyhnYW1lOiBHYW1lLCB0ZXh0OiBzdHJpbmcsIGNvbG9yID0gJ3Zpb2xldCcpOiB2b2lkIHtcbiAgICAgICAgZ2FtZS5sb2dnaW5nLmxvZyh0ZXh0KTtcbiAgICAgICAgXG4gICAgICAgIGdhbWUucmVuZGVyZXIuZHJhd1RleHQoXG4gICAgICAgICAgICAnTGV2ZWw6ICcgKyBnYW1lLmxldmVsSUQsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgNDAsXG4gICAgICAgICAgICBjb2xvcixcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFJlbmRlciB0aGUgVUkgYmFzZWQgb24gdGhlIGdhbWVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVuZGVyKGdhbWU6IEdhbWUpOiB2b2lkIHtcbiAgICAgICAgZ2FtZS5yZW5kZXJlci5kcmF3VGV4dChcbiAgICAgICAgICAgICdMZXZlbDogJyArIGdhbWUubGV2ZWxJRCxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICA0MCxcbiAgICAgICAgICAgICd2aW9sZXQnLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXJUaXRsZVNjcmVlbihnYW1lOiBHYW1lKTogdm9pZCB7XG4gICAgICAgIGdhbWUucmVuZGVyZXIuZHJhd1JlY3QoJ3JnYmEoMCwwLDAsLjc1KScsIDAsIDApO1xuICAgICAgICBnYW1lLmdhbWVTdGF0ZSA9IEdhbWVTdGF0ZS5USVRMRTtcblxuICAgICAgICAvLyB0aGlzLnJlbmRlcmVyLmRyYXdUZXh0KFwiU1VQRVJcIiwgNDAsIHRydWUsIGNhbnZhcy5oZWlnaHQgLyAyIC0gMTEwLCBcIndoaXRlXCIpO1xuICAgICAgICBnYW1lLnJlbmRlcmVyLmRyYXdUZXh0KFxuICAgICAgICAgICAgJ1BSRVNTIEFOWSBLRVkgVE8gU1RBUlQnLFxuICAgICAgICAgICAgNTAsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgNTAwLFxuICAgICAgICAgICAgJ3doaXRlJyxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyR2FtZU92ZXJTY3JlZW4oZ2FtZTogR2FtZSk6IHZvaWQge1xuICAgICAgICBnYW1lLnJlbmRlcmVyLmRyYXdSZWN0KCdyZ2JhKDAsMCwwLC41KScsIDAsIDApO1xuXG4gICAgICAgIGdhbWUucmVuZGVyZXIuZHJhd1RleHQoXG4gICAgICAgICAgICAnWU9VIERJRScsXG4gICAgICAgICAgICA1MCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAzMDAsXG4gICAgICAgICAgICAncmVkJyxcbiAgICAgICAgKTtcblxuICAgICAgICBnYW1lLnJlbmRlcmVyLmRyYXdUZXh0KFxuICAgICAgICAgICAgJ1BSRVNTIEFOWSBLRVkgVE8gU1RBUlQgQUdBSU4nLFxuICAgICAgICAgICAgNDAsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgNDAwLFxuICAgICAgICAgICAgJ3doaXRlJyxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicmVwbGFjZSIsInAiLCJDb21tYW5kcyIsIm1lc3NhZ2VzIiwibWVzc2FnZSIsIk1PVkVfVVAiLCJNT1ZFX1JJR0hUIiwiTU9WRV9ET1dOIiwiTU9WRV9MRUZUIiwiUElDS19JVEVNIiwiRFJPUF9JVEVNIiwiRFJPUF9MQVNUX0lURU0iLCJRVUFGRiIsIk9QRU5fSU5WRU5UT1JZIiwiV0lFTEQiLCJVTldJRUxEIiwiVEhST1ciLCJJTlZPS0UiLCJQUkFZIiwiaHAiLCJtYXhIcCIsImRlZmVuY2UiLCJhY3RvciIsImdhbWUiLCJHYW1lIiwiZ2V0SW5zdGFuY2UiLCJkaWUiLCJnZXRUaWxlIiwibW9uc3RlciIsImlzUGxheWVyIiwidWkiLCJtc2ciLCJnZXROYW1lIiwiaXNBbGl2ZSIsInRha2VEYW1hZ2UiLCJkZWFsZXIiLCJ2YWx1ZSIsIm1vZGlmaWVycyIsIndlYXBvbiIsImRhbWFnZVRha2VuIiwicG93ZXIiLCJyZWR1Y2UiLCJwcmV2IiwiY3VycmVudCIsImhwQmVmb3JlQXR0YWNrIiwiTWF0aCIsIm1heCIsImhlYWwiLCJtaW4iLCJuYW1lIiwiaXRlbXMiLCJnZXRDdXJyZW50V2VhcG9uIiwicGlja0l0ZW0iLCJza2lsbHMiLCJxdWVzdHMiLCJ4cCIsImF0dGFja0NvdW50VGhpc1R1cm4iLCJwdXJzdWluZyIsInhwTGV2ZWwiLCJwdXJzdWUiLCJwbGF5ZXIiLCJnZXRTa2lsbHMiLCJnZXRRdWVzdHMiLCJhZGRRdWVzdCIsInF1ZXN0IiwiYWN0Iiwic3R1bm5lZCIsInRvd2FyZFB1cnN1ZWRBY3RvciIsIm5laWdoYm9ycyIsImdldEFkamFjZW50VGlsZXMiLCJmaWx0ZXIiLCJ0IiwiYWN0b3JzIiwiZ2V0QWN0b3JzT25UaGlzIiwic29ydCIsImIiLCJkaXN0YW5jZSIsIm5ld1RpbGUiLCJ0cnlNb3ZlIiwieCIsInRpbGUiLCJ5Iiwib2xkQUkiLCJhaSIsIm9uRXhwaXJlZCIsIkNvbmZ1c2VkQUkiLCJ0dXJuc0xlZnQiLCJyZW5kZXJPbk1hcCIsInJlbmRlck9uVUkiLCJzcHJpdGUiLCJsaWZlIiwiZG9tYWlucyIsImxhc3RNb3ZlIiwiZWZmZWN0cyIsImFuaW1hdGlvbiIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZWZmZWN0Q291bnRlciIsInNoYWtlQW1vdW50Iiwic2hha2VYIiwic2hha2VZIiwiYWRkRWZmZWN0IiwiZWZmZWN0Q2xhc3MiLCJlZmZlY3QiLCJnZXREaXNwbGF5WCIsImdldERpc3BsYXlZIiwiZHJhdyIsInJlbmRlcmVyIiwiZHJhd1Nwcml0ZSIsInNpZ24iLCJnZXRBZGphY2VudFBhc3NhYmxlVGlsZXMiLCJtYXhIUCIsIkxpZmUiLCJTaW1wbGVMaWZlIiwiTW92ZUFuZEF0dGFja0FJIiwiZHJhd0hQIiwidGlsZVNpemUiLCJncmVlbkxlbmd0aCIsInJlZExlbmd0aCIsImRyYXdSZWN0IiwiZHgiLCJkeSIsImdldE5laWdoYm9yIiwicGFzc2FibGUiLCJtb3ZlIiwiY3VycmVudFRpbGUiLCJBY3RvciIsIk1vbnN0ZXIiLCJTbG93QUkiLCJDb25zdW1lckFJIiwiY3JlYXRlTW9uc3RlciIsImFjdG9yQ2xhc3MiLCJnZXRSYW5kb21QYXNzYWJsZVRpbGUiLCJBSSIsInNwZWVkIiwic3RhcnRlZFN0dW5uZWQiLCJlYXQiLCJwb2ludHNIZWFsZWQiLCJzbWFsbE1vbnN0ZXJzIiwibW9uc3RlcnMiLCJnZXRBZGphY2VudEFjdG9ycyIsIldpemFyZExpZmUiLCJ0aWNrIiwiU3ByaXRlcyIsImNhbnZhc0VsZW1lbnRJZCIsImlzUmVuZGVyZXJSZWFkeSIsImNhbnZhcyIsImJvZHkiLCJjdHgiLCJnZXRDb250ZXh0IiwiY29udGV4dCIsImltYWdlU21vb3RoaW5nRW5hYmxlZCIsIm9uUmVuZGVyZXJSZWFkeSIsIm51bVRpbGVzIiwidWlXaWR0aCIsIndpZHRoIiwiaGVpZ2h0Iiwic3ByaXRlc2hlZXQiLCJJbWFnZSIsImxvYWRBc3NldHMiLCJzZXRPblJlbmRlcmVyUmVhZHkiLCJvblJlYWR5Iiwic3ByaXRlcyIsIm9ubG9hZCIsInNwcml0ZXNoZWV0Um93cyIsInNwcml0ZXNoZWV0Q29sdW1ucyIsInNwcml0ZVJvdyIsImZsb29yIiwic3ByaXRlQ29sdW1uIiwiZHJhd0ltYWdlIiwiY29sb3IiLCJ3IiwiaCIsIm9sZENvbG9yIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJkcmF3VGV4dCIsInRleHQiLCJzaXplIiwiY2VudGVyZWQiLCJ0ZXh0WSIsInRleHRYIiwiZm9udCIsIm1lYXN1cmVUZXh0IiwiZmlsbFRleHQiLCJzZXRHbG9iYWxBbHBoYSIsImdsb2JhbEFscGhhIiwicmVzZXRHbG9iYWxBbHBoYSIsImNsZWFyU2NyZWVuIiwiY2xlYXJSZWN0IiwicmFuZG9tUmFuZ2UiLCJyYW5kb20iLCJHYW1lU3RhdGUiLCJmbGF0dGVuIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiZmVhdHVyZXMiLCJlZmZlY3RTcHJpdGUiLCJzZXRBbmltYXRpb25FZmZlY3QiLCJnZXRBZGphY2VudE5laWdoYm9ycyIsInRlbXAiLCJyIiwibmV3QXJyYXkiLCJzbGljZSIsInNodWZmbGUiLCJvdGhlciIsImFicyIsImdldENvbm5lY3RlZFRpbGVzIiwiY29ubmVjdGVkVGlsZXMiLCJmcm9udGllciIsInBvcCIsImluY2x1ZGVzIiwibmV3VGlsZVR5cGUiLCJ0aWxlcyIsIlRpbGUiLCJkaXJlY3Rpb24iLCJvbkludGVyYWN0IiwiY2xpbWIiLCJuZXh0TGV2ZWwiLCJsZXZlbElEIiwic3RhcnRMZXZlbCIsIlN0YWlyY2FzZSIsImdhbWVPcHRpb25zIiwibWF4TGV2ZWxJRCIsImdhbWVTdGF0ZSIsIlRJVExFIiwicmVuZGVyaW5nTGlicmFyeSIsImhpc3RvcnkiLCJIaXN0b3J5IiwibG9nZ2luZyIsInJlbmRlclRpdGxlU2NyZWVuIiwic2V0SW50ZXJ2YWwiLCJyZW5kZXIiLCJzY3JlZW5zaGFrZSIsInNoYWtlQW5nbGUiLCJQSSIsInJvdW5kIiwiY29zIiwic2luIiwiaW5zdGFuY2UiLCJnZXRSYW5kb21UaWxlIiwiZ2V0VGlsZXMiLCJjb25kaXRpb24iLCJhbGxUaWxlcyIsImdldFBhc3NhYmxlVGlsZXMiLCJzZXR1cElucHV0SGFuZGxlcnMiLCJodG1sIiwib25rZXlkb3duIiwiREVBRCIsInN0YXJ0R2FtZSIsIlBMQVlJTkciLCJwbGF5ZXJUaWxlIiwiZmVhdHVyZSIsIkNvbmZ1c2lvbkVmZmVjdCIsInNldHVwR2FtZSIsImxldmVsSWQiLCJnZW5lcmF0ZUxldmVsIiwiZGVzY3JpcHRpb24iLCJjYWxsYmFjayIsInRpbWVvdXQiLCJnZW5lcmF0ZVRpbGVzIiwidHJ5VG8iLCJzdGFydGluZ1RpbGUiLCJQbGF5ZXIiLCJnZW5lcmF0ZU1vbnN0ZXJzIiwiU3RhaXJjYXNlVXAiLCJzdGFpcnNEb3duIiwiU3RhaXJjYXNlRG93biIsIkRyYWdvbiIsIk1hbiIsIkdvYmxpbiIsIlNuYWtlIiwiS29ib2xkIiwiV29sZiIsIlRyb2xsIiwicmVuZGVyVGlsZXMiLCJqIiwicmVuZGVyTW9uc3RlcnMiLCJwYXNzYWJsZVRpbGVzIiwiaW5Cb3VuZHMiLCJXYWxsIiwiRmxvb3IiLCJyZW5kZXJHYW1lT3ZlclNjcmVlbiIsInBvc3NpYmxlVGlsZXMiLCJsb2ciLCJjb25zb2xlIiwiQ2FudmFzRHJhd2luZ0xpYnJhcnkiLCJDYW52YXNVSSIsIkNvbnNvbGVMb2dnaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==