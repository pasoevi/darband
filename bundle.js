(()=>{"use strict";var t={424:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([t.id,"html,\r\nbody {\r\n    border: 0;\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n}\r\n\r\n.container {\r\n    position: relative;\r\n    width: 95%;\r\n    height: 95%;\r\n}\r\n\r\n.container canvas, #game-ui {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n}\r\n\r\n#game-ui {\r\n    display: none;\r\n    background-color: rgba(2, green, blue, 0.75);\r\n    width: 90%;\r\n    height: auto;\r\n    color: red;\r\n}\r\n\r\ncanvas {\r\n    outline: 1px solid white;\r\n}\r\n\r\nbody {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: indigo;\r\n    text-align: center;\r\n}\r\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,SAAS;IACT,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;AACX;;AAEA;IACI,aAAa;IACb,4CAA4C;IAC5C,UAAU;IACV,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,wBAAwB;IACxB,kBAAkB;AACtB",sourcesContent:["html,\r\nbody {\r\n    border: 0;\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n}\r\n\r\n.container {\r\n    position: relative;\r\n    width: 95%;\r\n    height: 95%;\r\n}\r\n\r\n.container canvas, #game-ui {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n}\r\n\r\n#game-ui {\r\n    display: none;\r\n    background-color: rgba(2, green, blue, 0.75);\r\n    width: 90%;\r\n    height: auto;\r\n    color: red;\r\n}\r\n\r\ncanvas {\r\n    outline: 1px solid white;\r\n}\r\n\r\nbody {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: indigo;\r\n    text-align: center;\r\n}\r\n"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var u=0;u<t.length;u++){var h=[].concat(t[u]);r&&s[h[0]]||(void 0!==o&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=o),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),i&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=i):h[4]="".concat(i)),e.push(h))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),s=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},s=[],a=0;a<t.length;a++){var c=t[a],u=r.base?c[0]+r.base:c[0],h=o[u]||0,l="".concat(u," ").concat(h);o[u]=h+1;var p=n(l),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(f);else{var d=i(f,r);r.byIndex=a,e.splice(a,0,{identifier:l,updater:d,references:1})}s.push(l)}return s}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var c=r(t,i),u=0;u<o.length;u++){var h=n(o[u]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}o=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{var t=n(379),e=n.n(t),r=n(795),i=n.n(r),o=n(569),s=n.n(o),a=n(565),c=n.n(a),u=n(216),h=n.n(u),l=n(589),p=n.n(l),f=n(424),d={};d.styleTagTransform=p(),d.setAttributes=c(),d.insert=s().bind(null,"head"),d.domAPI=i(),d.insertStyleElement=h(),e()(f.Z,d),f.Z&&f.Z.locals&&f.Z.locals;var m,g,y,v=(m=function(t,e){return m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},m(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}m(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),A=function(){function t(t,e,n,r){void 0===e&&(e={}),void 0===n&&(n=[]),void 0===r&&(r=10),this.monster=t,this.attackCountThisTurn=0,this.pursuing=void 0,this.game=it.getInstance(),this.skills=e,this.quests=n,this.xp=r,this.xpLevel=0,this.pursue(this.game.player)}return t.prototype.getSkills=function(){return this.skills},t.prototype.getQuests=function(){return this.quests},t.prototype.addQuest=function(t){this.quests.push(t)},t.prototype.act=function(){if(this.monster.stunned)return this.monster.stunned=!1,void this.game.ui.msg(this.game,"".concat(this.monster.name," is no longer stunned"));this.towardPursuedActor()},t.prototype.pursue=function(t){this.pursuing=t},t.prototype.towardPursuedActor=function(){if(void 0!==this.pursuing){var t=this.monster.getAdjacentTiles();if((t=t.filter((function(t){var e=t.getActorsOnThis();return 0===e.length||e.filter((function(t){return t.isPlayer})).length>0}))).length>0){var e=this.pursuing.getTile();t.sort((function(t,n){return t.distance(e)-n.distance(e)}));var n=t[0];this.monster.tryMove(n.x-this.monster.tile.x,n.y-this.monster.tile.y)}}},t}(),w=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return v(e,t),e.prototype.act=function(){this.attackCountThisTurn=0,t.prototype.act.call(this),0===this.attackCountThisTurn&&t.prototype.act.call(this)},e}(A),b=function(t){function e(e,n){void 0===n&&(n=5);var r=t.call(this,e)||this;return r.speed=n,r}return v(e,t),e.prototype.act=function(){var e=this.monster.stunned;t.prototype.act.call(this),e||(this.monster.stunned=!0,this.game.ui.msg(this.game,"".concat(this.monster.name," is stunned")))},e}(A),T=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return v(e,t),e.prototype.eat=function(t){var e,n;null===(e=t.life)||void 0===e||e.die();var r=this.monster.life.heal(((null===(n=t.life)||void 0===n?void 0:n.maxHp)||0)/2);return this.game.ui.msg(this.game,"".concat(this.monster.name," heals by ").concat(r," by eating ").concat(t.name)),this.game.animation.shakeAmount=5,r>0},e.prototype.act=function(){var e=this;if(t.prototype.act.call(this),this.monster.life.hp<.75*this.monster.life.maxHp){var n=this.game.monsters.filter((function(t){return void 0!==t.life&&t.life.maxHp<e.monster.life.maxHp/2})).sort((function(t,n){return t.tile.distance(e.monster.tile)-n.tile.distance(e.monster.tile)}));this.pursue(n[0]);var r=this.monster.tile.getAdjacentActors().filter((function(t){return void 0!==t.life&&t.life.maxHp<e.monster.life.maxHp/2}));r.length>0&&this.eat(r[0])}else this.pursue(this.game.player)},e}(A),I=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return v(e,t),e.prototype.act=function(){var t=this.monster.tile.getAdjacentPassableTiles();if(t.length>0){var e=t[0].x-this.monster.tile.x,n=t[0].y-this.monster.tile.y;this.monster.tryMove(e,n)}},e}(A);!function(t){t.MOVE_UP="MOVE_UP",t.MOVE_RIGHT="MOVE_RIGHT",t.MOVE_DOWN="MOVE_DOWN",t.MOVE_LEFT="MOVE_LEFT",t.PICK_ITEM="PICK_ITEM",t.DROP_ITEM="DROP_ITEM",t.DROP_LAST_ITEM="DROP_LAST_ITEM",t.QUAFF="QUAFF",t.OPEN_INVENTORY="OPEN_INVENTORY",t.WIELD="WIELD",t.UNWIELD="UNWIELD",t.THROW="THROW",t.INVOKE="INVOKE",t.PRAY="PRAY"}(y||(y={})),(g={})[y.MOVE_UP]="",g[y.MOVE_RIGHT]="",g[y.MOVE_DOWN]="",g[y.MOVE_LEFT]="",g[y.PICK_ITEM]="",g[y.DROP_ITEM]="",g[y.DROP_LAST_ITEM]="",g[y.QUAFF]="",g[y.OPEN_INVENTORY]="",g[y.WIELD]="",g[y.UNWIELD]="",g[y.THROW]="",g[y.INVOKE]="",g[y.PRAY]="";var x,E=function(){function t(t,e,n,r){this.game=it.getInstance(),this.hp=t,this.maxHp=e,this.defence=n,this.actor=r}return t.prototype.die=function(){this.hp=0,this.actor.getTile().monster=null,this.actor.isPlayer?this.game.ui.msg(this.game,"You die."):this.game.ui.msg(this.game,"".concat(this.actor.getName()," dies"))},t.prototype.isAlive=function(){return this.hp>0},t.prototype.takeDamage=function(t,e,n,r){var i=e;if(!t||!this.isAlive())return i;r&&(i=r.power-this.defence),void 0!==n&&(i=n.reduce((function(t,e){return t+e.value}),i));var o=this.hp;return this.hp=Math.max(0,this.hp-i),this.hp<=0&&this.die(),this.game.ui.msg(this.game,"".concat(t.getName()," attacks ").concat(this.actor.getName()," for ").concat(i,". Was ").concat(o," is ").concat(this.hp),"#ff0000"),i},t.prototype.heal=function(t){return this.hp=Math.min(this.maxHp,this.hp+t),this.game.ui.msg(this.game,"".concat(this.actor.name," heals by ").concat(t)),t},t}(),O=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),_=(function(){function t(){this.game=it.getInstance(),this.items=[]}t.prototype.getCurrentWeapon=function(){return this.weapon},t.prototype.pickItem=function(t){this.items.push(t)}}(),function(t){function e(e){var n=t.call(this,e,5)||this;return n.oldAI=e.ai,n.onExpired=function(){e.ai=n.oldAI,e.game.ui.msg(e.game,"".concat(e.name," is no longer confused"))},e.ai=new I(e,n.oldAI.skills,n.oldAI.getQuests()),e.game.ui.msg(e.game,"".concat(e.name," is now confused")),n}return O(e,t),e}(function(){function t(t,e,n,r){void 0===e&&(e=5),void 0===n&&(n=""),this.actor=t,this.turnsLeft=e,this.name=n,this.onExpired=r}return t.prototype.renderOnMap=function(){},t.prototype.renderOnUI=function(){},t.prototype.update=function(){this.turnsLeft-=1,this.turnsLeft<=0&&void 0!==this.onExpired&&this.onExpired()},t}())),M=function(){function t(t,e,n,r,i,o){this.isPlayer=!1,this.stunned=!1,this.game=it.getInstance(),this.tile=e,this.name=null!=t?t:"Unnamed monster",this.sprite=n,this.domains=o,this.lastMove={x:-1,y:0},this.effects=[],this.animation={offsetX:0,offsetY:0,effectCounter:0,shakeAmount:0,shakeX:0,shakeY:0},void 0!==r&&(this.life=r),void 0!==i&&(this.ai=i)}return t.prototype.getName=function(){return this.name},t.prototype.getTile=function(){return this.tile},t.prototype.addEffect=function(t){var e=new t(this);this.effects.push(e)},t.prototype.getDisplayX=function(){return this.tile.x+this.animation.offsetX},t.prototype.getDisplayY=function(){return this.tile.y+this.animation.offsetY},t.prototype.update=function(){this.game.ui.msg(this.game,"".concat(this.name," ").concat(this.stunned?"is":"is NOT"," stunned")),this.ai&&this.ai.act();for(var t=this.effects.length-1;t>=0;t--){var e=this.effects[t];e.update(),e.turnsLeft<=0&&void 0!==e.onExpired&&this.effects.splice(t,1)}},t.prototype.draw=function(){void 0!==this.sprite&&this.game.renderer.drawSprite(this.sprite,this.getDisplayX(),this.getDisplayY(),this.game.animation),this.animation.offsetX-=Math.sign(this.animation.offsetX)*(1/8),this.animation.offsetY-=Math.sign(this.animation.offsetY)*(1/8)},t.prototype.getAdjacentTiles=function(){return this.game.getTile(this.tile.x,this.tile.y).getAdjacentPassableTiles()},t}(),P=function(t){function e(e,n){return void 0===n&&(n=200),t.call(this,n,n,3,e)||this}return O(e,t),e}(E),R=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),S=function(t){function e(e,n){return void 0===n&&(n=100),t.call(this,n,n,2,e)||this}return R(e,t),e}(E),C=function(t){function e(e,n,r,i,o,s,a){void 0===o&&(o=100);var c=t.call(this,e,r,n)||this;return c.life=null!=s?s:new S(c,o),c.ai=null!=a?a:new w(c),c}return R(e,t),e.prototype.draw=function(){t.prototype.draw.call(this),this.drawHP()},e.prototype.drawHP=function(){var t,e,n,r,i=this.game.renderer.options.tileSize,o=i*((null!==(e=null===(t=this.life)||void 0===t?void 0:t.hp)&&void 0!==e?e:0)/(null!==(r=null===(n=this.life)||void 0===n?void 0:n.maxHp)&&void 0!==r?r:1)),s=i-o;this.game.renderer.drawRect("lime",this.getDisplayX()*i,this.getDisplayY()*i+i-2,o,2),this.game.renderer.drawRect("red",this.getDisplayX()*i+o,this.getDisplayY()*i+i-2,s,2)},e.prototype.tryMove=function(t,e){var n,r=this.tile.getNeighbor(t,e);return!!r.passable&&(this.lastMove={x:t,y:e},null===r.monster?this.move(r):this.isPlayer!==r.monster.isPlayer&&(void 0!==this.ai&&(this.ai.attackCountThisTurn+=1),r.monster.stunned=!0,this.game.ui.msg(this.game,"".concat(this.name," stuns ").concat(r.monster.name)),null===(n=r.monster.life)||void 0===n||n.takeDamage(this,10,[]),this.animation.offsetX=(r.x-this.tile.x)/2,this.animation.offsetY=(r.y-this.tile.y)/2),!0)},e.prototype.move=function(t){this.game.ui.msg(this.game,"".concat(this.name," ").concat(this.isPlayer?"move":"moves"," to ").concat(t.x,", ").concat(t.y));var e=this.getTile();e.monster=null,this.animation.offsetX=e.x-t.x,this.animation.offsetY=e.y-t.y,this.tile=t,t.monster=this},e}(M),k=function(t){function e(e){return t.call(this,"goblin",12,e,[0,1,2],95)||this}return R(e,t),e}(C),D=function(t){function e(e){return t.call(this,"kobold",15,e,[0,1,2],125)||this}return R(e,t),e}(C),N=(R((function(t){return x.call(this,"orc",14,t,[0,1,2,3],115)||this}),x=C),function(t){function e(e){var n=t.call(this,"wolf",11,e,[0,1,2,3,4],95)||this;return n.ai=new I(n),n}return R(e,t),e}(C)),L=(function(t){R((function(e){return t.call(this,"dwarf",19,e,[7,8,9,10,11,12],120)||this}),t)}(C),function(t){function e(e){return t.call(this,"man",16,e,[3,4,5],100)||this}return R(e,t),e}(C)),j=function(t){function e(e){var n=t.call(this,"troll",17,e,[3,4],160)||this;return n.ai=new b(n),n}return R(e,t),e}(C),Y=(function(t){R((function(e){return t.call(this,"elf",18,e,[0,1,2],150)||this}),t)}(C),function(t){function e(e){var n=t.call(this,"dragon",3,e,[10,11,12,13,14,15],250,void 0)||this;return n.ai=new T(n),n}return R(e,t),e}(C)),U=function(t){function e(e){return t.call(this,"snake",13,e,[7,8,9],15)||this}return R(e,t),e}(C);function B(t){return new t(it.getInstance().getRandomPassableTile())}var G=function(){function t(){this.messages=[]}return t.prototype.push=function(t){this.messages.push(t)},t}(),H=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),V=function(t){function e(e){var n=t.call(this,"You",0,e,[])||this;return n.life=new P(n,1e3),n.isPlayer=!0,n}return H(e,t),e.prototype.tryMove=function(e,n){return!!t.prototype.tryMove.call(this,e,n)&&(this.game.tick(),!0)},e}(C);const W=n.p+"ed154dfad390b910057308a394fa740b.png";var X;!function(t){t[t.AURA=13]="AURA"}(X||(X={}));var F=function(){function t(t,e){var n;this.isRendererReady=!1;var r=document.createElement("canvas");r.id=t,document.body.appendChild(r),this.canvas=r;var i=this.canvas.getContext("2d");if(null===i)throw new Error("No matching drawing context supported");this.context=i,this.options=e,this.context.imageSmoothingEnabled=!1,this.onRendererReady=null!==(n=e.onRendererReady)&&void 0!==n?n:function(){};var o=e.tileSize,s=e.numTiles,a=e.uiWidth;r.width=o*(s+a),r.height=o*s,r.style.width="".concat(r.width,"px"),r.style.height="".concat(r.height,"px"),this.spritesheet=new Image,this.loadAssets()}return t.prototype.setOnRendererReady=function(t){this.isRendererReady?t():this.onRendererReady=t},t.prototype.loadAssets=function(){var t=this;this.spritesheet.src=W,this.spritesheet.onload=function(){t.isRendererReady=!0,t.onRendererReady()}},t.prototype.drawSprite=function(t,e,n,r){var i,o,s=this.context,a=this.options.tileSize,c=this.spritesheet.height/a,u=this.spritesheet.width/a,h=Math.floor(t/u)*a,l=t%c*a;s.drawImage(this.spritesheet,l,h,a,a,e*a+(null!==(i=null==r?void 0:r.shakeX)&&void 0!==i?i:0),n*a+(null!==(o=null==r?void 0:r.shakeY)&&void 0!==o?o:0),a,a)},t.prototype.drawRect=function(t,e,n,r,i){void 0===r&&(r=this.canvas.width),void 0===i&&(i=this.canvas.height);var o=this.context,s=o.fillStyle;o.fillStyle=t,o.fillRect(e,n,r,i),o.fillStyle=s},t.prototype.drawText=function(t,e,n,r,i){var o;this.context.fillStyle=i,this.context.font="".concat(e,"px monospace"),o=n?(this.canvas.width-this.context.measureText(t).width)/2:this.canvas.width-this.options.uiWidth*this.options.tileSize,this.context.fillText(t,o,r)},t.prototype.setGlobalAlpha=function(t){this.context.globalAlpha=t},t.prototype.resetGlobalAlpha=function(){this.setGlobalAlpha(1)},t.prototype.clearScreen=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},t}();function K(t,e){return Math.floor(Math.random()*(e-t+1))+t}var Q,Z=function(t,e){void 0===e&&(e=[]);for(var n=0,r=t.length;n<r;n++){var i=t[n];Array.isArray(i)?Z(i,e):e.push(i)}return e},q=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),z=function(){function t(t,e,n,r,i,o,s){void 0===n&&(n=0),void 0===r&&(r=!0),void 0===i&&(i=null),void 0===s&&(s=[]),this.x=t,this.y=e,this.sprite=n,this.passable=r,this.monster=i,this.animation=o,this.features=s,this.game=it.getInstance()}return t.prototype.draw=function(){var t,e=this.game.renderer;e.drawSprite(this.sprite,this.x,this.y,this.game.animation),this.animation&&(null===(t=this.animation)||void 0===t?void 0:t.effectCounter)>0&&(this.animation.effectCounter--,e.setGlobalAlpha(this.animation.effectCounter/30),void 0!==this.animation.effectSprite&&e.drawSprite(this.animation.effectSprite,this.x,this.y),e.resetGlobalAlpha())},t.prototype.setAnimationEffect=function(t){this.animation&&(this.animation.effectSprite=t,this.animation.effectCounter=30)},t.prototype.getActorsOnThis=function(){var t=this;return this.game.monsters.filter((function(e){return e.tile.x===t.x&&e.tile.y===t.y}))},t.prototype.getNeighbor=function(t,e){return this.game.getTile(this.x+t,this.y+e)},t.prototype.getAdjacentNeighbors=function(){return function(t){for(var e,n,r=t.slice(),i=1;i<r.length;i++)n=K(0,i),e=r[i],r[i]=r[n],r[n]=e;return r}([this.getNeighbor(0,-1),this.getNeighbor(0,1),this.getNeighbor(-1,0),this.getNeighbor(1,0)])},t.prototype.getAdjacentActors=function(){return this.getAdjacentNeighbors().filter((function(t){return null!==t.monster})).map((function(t){return t.monster}))},t.prototype.getAdjacentPassableTiles=function(){return this.getAdjacentNeighbors().filter((function(t){return t.passable}))},t.prototype.distance=function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},t.prototype.getConnectedTiles=function(){for(var t,e=[this],n=[this];n.length;){var r=null===(t=n.pop())||void 0===t?void 0:t.getAdjacentPassableTiles().filter((function(t){return!e.includes(t)}));e=e.concat(null!=r?r:[]),n=n.concat(null!=r?r:[])}return e},t.prototype.replace=function(t){var e=new t(this.x,this.y);return e.monster=this.monster,this.game.tiles[this.x][this.y]=e,e},t.prototype.interact=function(t){this.features.map((function(e){return e.onInteract(t)}))},t}(),$=function(t){function e(e,n){return t.call(this,e,n,32,!0)||this}return q(e,t),e}(z),J=function(t){function e(e,n){return t.call(this,e,n,33,!1)||this}return q(e,t),e}(z),tt=function(t){function e(e,n,r,i){var o=t.call(this,e,n,r,!0)||this;return o.direction=i,o.features.push({onInteract:function(t){return o.climb()}}),o}return q(e,t),e.prototype.climb=function(){var t=this.game.levelID+("UP"===this.direction?-1:1);this.game.startLevel(t)},e}(z),et=function(t){function e(e,n,r){return void 0===r&&(r=44),t.call(this,e,n,r,"UP")||this}return q(e,t),e}(tt),nt=function(t){function e(e,n,r){return void 0===r&&(r=43),t.call(this,e,n,r,"DOWN")||this}return q(e,t),e}(tt);!function(t){t[t.LOADING=0]="LOADING",t[t.PLAYING=1]="PLAYING",t[t.DEAD=2]="DEAD",t[t.TITLE=3]="TITLE"}(Q||(Q={}));var rt,it=function(){function t(t){var e=this;this.player=null,this.tiles=[],this.monsters=[],this.items=[],this.levelID=0,this.maxLevelID=16,this.gameState=Q.TITLE,this.renderer=t.renderingLibrary,this.ui=t.ui,this.history=new G,this.logging=t.logging,this.gameState=Q.TITLE,this.renderer.setOnRendererReady((function(){e.ui.renderTitleScreen(e),setInterval((function(){e.render()}),15)})),this.animation={offsetX:0,offsetY:0,shakeAmount:0,shakeX:0,effectSprite:void 0,effectCounter:0,shakeY:0,screenshake:function(){this.shakeAmount&&(this.shakeAmount-=1);var t=Math.random()*Math.PI*2;this.shakeX=Math.round(Math.cos(t)*this.shakeAmount),this.shakeY=Math.round(Math.sin(t)*this.shakeAmount)}}}return t.getInstance=function(e){if(void 0===t.instance){if(void 0===e)throw new Error("getInstance needs to be passed the parameters when called for the fist time");t.instance=new t(e)}return t.instance},t.prototype.getRandomPassableTile=function(){return this.getRandomTile((function(t){return t.passable}))},t.prototype.getTiles=function(t){var e=Z(this.tiles);return void 0===t?e:e.filter(t)},t.prototype.getPassableTiles=function(){return this.getTiles((function(t){return t.passable}))},t.prototype.setupInputHandlers=function(){var t=this,e=document.querySelector("html");if(null===e)throw Error("Please run the app in the browser environment");e.onkeydown=function(e){if(t.gameState===Q.TITLE||t.gameState===Q.DEAD)t.startGame();else if(t.gameState===Q.PLAYING){if(void 0===t.player)return;switch(e.key){case"w":t.player.tryMove(0,-1);break;case"s":t.player.tryMove(0,1);break;case"a":t.player.tryMove(-1,0);break;case"d":t.player.tryMove(1,0);break;case"Enter":var n=t.player.getTile();t.getTile(n.x,n.y).interact(t.player);break;case"c":t.player,void 0!==(r=t.monsters[0]).ai&&r.addEffect(_);break;case"ArrowUp":t.monsters[0].tryMove(0,-1);break;case"ArrowDown":t.monsters[0].tryMove(0,1);break;case"ArrowLeft":t.monsters[0].tryMove(-1,0);break;case"ArrowRight":t.monsters[0].tryMove(1,0)}}var r}},t.prototype.setupGame=function(){this.setupInputHandlers()},t.prototype.startGame=function(){this.gameState=Q.PLAYING,this.startLevel(0)},t.prototype.startLevel=function(t){this.levelID=t,this.generateLevel()},t.prototype.generateLevel=function(){var t=this;!function(e,n){for(var r=1e3;r>0;r--)if(t.generateTiles()===t.getRandomPassableTile().getConnectedTiles().length)return;throw Error("Timeout while trying to ".concat("generate map"))}();var e=this.getRandomPassableTile();if(this.player=new V(e),this.monsters=this.generateMonsters(),this.levelID>0&&this.getRandomPassableTile().replace(et),this.levelID<this.maxLevelID){var n=this.getRandomPassableTile().replace(nt);0===this.levelID&&(n.sprite=42)}},t.prototype.generateMonsters=function(){return[[Y,L,k,U,D],[Y,L,k,U,D],[Y,L,k,U,D],[D,k],[D,k],[Y,Y,N,N,L,j,U,U],[D,k],[D,k],[D,k],[D,k],[D,k],[D,k],[D,k],[D,k]][this.levelID].map((function(t){return B(t)}))},t.prototype.renderTiles=function(){for(var t=this.renderer.options.numTiles,e=0;e<t;e+=1)for(var n=0;n<t;n+=1)this.getTile(e,n).draw()},t.prototype.renderMonsters=function(){this.monsters.map((function(t){return t.draw()}))},t.prototype.generateTiles=function(){for(var t=0,e=[],n=this.renderer.options.numTiles,r=0;r<n;r+=1){e[r]=[];for(var i=0;i<n;i+=1)Math.random()<.3||!this.inBounds(r,i)?e[r][i]=new J(r,i):(e[r][i]=new $(r,i),t+=1)}return this.tiles=e,t},t.prototype.inBounds=function(t,e){var n=this.renderer.options.numTiles;return t>0&&e>0&&t<n-1&&e<n-1},t.prototype.getTile=function(t,e){return this.inBounds(t,e)?this.tiles[t][e]:new J(t,e)},t.prototype.tick=function(){for(var t,e=this.monsters.length-1;e>=0;e-=1)(null===(t=this.monsters[e].life)||void 0===t?void 0:t.isAlive())?this.monsters[e].update():this.monsters.splice(e,1);this.player.life.isAlive()||(this.gameState=Q.DEAD)},t.prototype.render=function(){this.gameState===Q.PLAYING?(this.renderer.clearScreen(),this.animation.screenshake&&this.animation.screenshake(),this.renderTiles(),this.renderMonsters(),this.player.draw(),this.ui.render(this)):this.gameState===Q.DEAD&&this.ui.renderGameOverScreen(this)},t.prototype.getRandomTile=function(t){var e=Z(this.tiles),n=void 0===t?e:e.filter(t);return n[K(0,n.length-1)]},t}(),ot=function(){function t(){}return t.prototype.log=function(t){console.log(t)},t}(),st=function(){function t(){}return t.prototype.msg=function(t,e,n){void 0===n&&(n="violet"),t.logging.log(e),t.renderer.drawText("Level: ".concat(t.levelID),25,!1,40,n)},t.prototype.render=function(t){t.renderer.drawText("Level: ".concat(t.levelID),25,!1,40,"violet")},t.prototype.renderTitleScreen=function(t){t.renderer.drawRect("rgba(0,0,0,.75)",0,0),t.renderer.drawText("PRESS ANY KEY TO START",50,!0,500,"white")},t.prototype.renderGameOverScreen=function(t){t.renderer.drawRect("rgba(0,0,0,.5)",0,0),t.renderer.drawText("YOU DIE",50,!0,300,"red"),t.renderer.drawText("PRESS ANY KEY TO START AGAIN",40,!0,400,"white")},t}();rt={renderingLibrary:new F("game",{tileSize:32,numTiles:19,uiWidth:4}),ui:new st,logging:new ot},it.getInstance(rt).setupGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,