(()=>{"use strict";var t={424:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(537),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,"html,\nbody {\n    border: 0;\n    margin: 0;\n    padding: 0;\n    height: 100%;\n}\n\n.container {\n    position: relative;\n    width: 95%;\n    height: 95%;\n}\n\n.container canvas, #game-ui {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n#game-ui {\n    display: none;\n    background-color: rgba(2, green, blue, 0.75);\n    width: 90%;\n    height: auto;\n    color: red;\n}\n\ncanvas {\n    outline: 1px solid white;\n}\n\nbody {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: indigo;\n    text-align: center;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,SAAS;IACT,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;AACX;;AAEA;IACI,aAAa;IACb,4CAA4C;IAC5C,UAAU;IACV,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,wBAAwB;IACxB,kBAAkB;AACtB",sourcesContent:["html,\nbody {\n    border: 0;\n    margin: 0;\n    padding: 0;\n    height: 100%;\n}\n\n.container {\n    position: relative;\n    width: 95%;\n    height: 95%;\n}\n\n.container canvas, #game-ui {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n#game-ui {\n    display: none;\n    background-color: rgba(2, green, blue, 0.75);\n    width: 90%;\n    height: auto;\n    color: red;\n}\n\ncanvas {\n    outline: 1px solid white;\n}\n\nbody {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: indigo;\n    text-align: center;\n}\n"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(i)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var u=0;u<t.length;u++){var h=[].concat(t[u]);i&&s[h[0]]||(void 0!==o&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=o),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),r&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=r):h[4]="".concat(r)),e.push(h))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */"),s=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},s=[],a=0;a<t.length;a++){var c=t[a],u=i.base?c[0]+i.base:c[0],h=o[u]||0,l="".concat(u," ").concat(h);o[u]=h+1;var p=n(l),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(f);else{var d=r(f,i);i.byIndex=a,e.splice(a,0,{identifier:l,updater:d,references:1})}s.push(l)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=i(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var c=i(t,r),u=0;u<o.length;u++){var h=n(o[u]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}o=c}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{var t=n(379),e=n.n(t),i=n(795),r=n.n(i),o=n(569),s=n.n(o),a=n(565),c=n.n(a),u=n(216),h=n.n(u),l=n(589),p=n.n(l),f=n(424),d={};d.styleTagTransform=p(),d.setAttributes=c(),d.insert=s().bind(null,"head"),d.domAPI=r(),d.insertStyleElement=h(),e()(f.Z,d),f.Z&&f.Z.locals&&f.Z.locals;var m,g,v=function(){function t(){this.messages=[]}return t.prototype.push=function(t){this.messages.push(t)},t}();!function(t){t.MOVE_UP="MOVE_UP",t.MOVE_RIGHT="MOVE_RIGHT",t.MOVE_DOWN="MOVE_DOWN",t.MOVE_LEFT="MOVE_LEFT",t.PICK_ITEM="PICK_ITEM",t.DROP_ITEM="DROP_ITEM",t.DROP_LAST_ITEM="DROP_LAST_ITEM",t.QUAFF="QUAFF",t.OPEN_INVENTORY="OPEN_INVENTORY",t.WIELD="WIELD",t.UNWIELD="UNWIELD",t.THROW="THROW",t.INVOKE="INVOKE",t.PRAY="PRAY"}(g||(g={})),(m={})[g.MOVE_UP]="",m[g.MOVE_RIGHT]="",m[g.MOVE_DOWN]="",m[g.MOVE_LEFT]="",m[g.PICK_ITEM]="",m[g.DROP_ITEM]="",m[g.DROP_LAST_ITEM]="",m[g.QUAFF]="",m[g.OPEN_INVENTORY]="",m[g.WIELD]="",m[g.UNWIELD]="",m[g.THROW]="",m[g.INVOKE]="",m[g.PRAY]="";var y,A,w=(y=function(t,e){return y=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},y(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}y(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),T=function(){function t(t,e,n,i){this.game=it.getInstance(),this.hp=t,this.maxHp=e,this.defence=n,this.actor=i}return t.prototype.die=function(){this.hp=0,this.actor.getTile().monster=null,this.actor.isPlayer?this.game.ui.msg(this.game,"You die."):this.game.ui.msg(this.game,"".concat(this.actor.getName()," dies"))},t.prototype.isAlive=function(){return this.hp>0},t.prototype.takeDamage=function(t,e,n,i){var r=e;if(!t||!this.isAlive())return r;i&&(r=i.power-this.defence),void 0!==n&&(r=n.reduce((function(t,e){return t+e.value}),r));var o=this.hp;return this.hp=Math.max(0,this.hp-r),this.hp<=0&&this.die(),this.game.ui.msg(this.game,"".concat(t.getName()," attacks ").concat(this.actor.getName()," for ").concat(r,". Was ").concat(o," is ").concat(this.hp),"#ff0000"),r},t.prototype.heal=function(t){return this.hp=Math.min(this.maxHp,this.hp+t),this.game.ui.msg(this.game,"".concat(this.actor.name," heals by ").concat(t)),t},t}(),b=(function(){function t(){this.game=it.getInstance(),this.items=[]}t.prototype.getCurrentWeapon=function(){return this.weapon},t.prototype.pickItem=function(t){this.items.push(t)}}(),function(){function t(t,e,n,i){void 0===e&&(e={}),void 0===n&&(n=[]),void 0===i&&(i=10),this.monster=t,this.attackCountThisTurn=0,this.pursuing=void 0,this.game=it.getInstance(),this.skills=e,this.quests=n,this.xp=i,this.xpLevel=0,this.pursue(this.game.player)}return t.prototype.getSkills=function(){return this.skills},t.prototype.getQuests=function(){return this.quests},t.prototype.addQuest=function(t){this.quests.push(t)},t.prototype.act=function(){if(this.monster.stunned)return this.monster.stunned=!1,void this.game.ui.msg(this.game,"".concat(this.monster.name," is no longer stunned"));this.towardPursuedActor()},t.prototype.pursue=function(t){this.pursuing=t},t.prototype.towardPursuedActor=function(){if(void 0!==this.pursuing){var t=this.monster.getAdjacentTiles();if((t=t.filter((function(t){var e=t.getActorsOnThis();return 0===e.length||e.filter((function(t){return t.isPlayer})).length>0}))).length>0){var e=this.pursuing.getTile();t.sort((function(t,n){return t.distance(e)-n.distance(e)}));var n=t[0];this.monster.tryMove(n.x-this.monster.tile.x,n.y-this.monster.tile.y)}}},t}()),I=function(t){function e(e){var n=t.call(this,e,5)||this;return n.oldAI=e.ai,n.onExpired=function(){e.ai=n.oldAI,e.game.ui.msg(e.game,"".concat(e.name," is no longer confused"))},e.ai=new B(e,n.oldAI.skills,n.oldAI.getQuests()),e.game.ui.msg(e.game,"".concat(e.name," is now confused")),n}return w(e,t),e}(function(){function t(t,e,n,i){void 0===e&&(e=5),void 0===n&&(n=""),this.actor=t,this.turnsLeft=e,this.name=n,this.onExpired=i}return t.prototype.renderOnMap=function(){},t.prototype.renderOnUI=function(){},t.prototype.update=function(){this.turnsLeft-=1,this.turnsLeft<=0&&void 0!==this.onExpired&&this.onExpired()},t}()),x=function(){function t(t,e,n,i,r,o){this.isPlayer=!1,this.stunned=!1,this.game=it.getInstance(),this.tile=e,this.name=null!=t?t:"Unnamed monster",this.sprite=n,this.domains=o,this.lastMove={x:-1,y:0},this.effects=[],this.animation={offsetX:0,offsetY:0,effectCounter:0,shakeAmount:0,shakeX:0,shakeY:0},void 0!==i&&(this.life=i),void 0!==r&&(this.ai=r)}return t.prototype.getName=function(){return this.name},t.prototype.getTile=function(){return this.tile},t.prototype.addEffect=function(t){var e=new t(this);this.effects.push(e)},t.prototype.getDisplayX=function(){return this.tile.x+this.animation.offsetX},t.prototype.getDisplayY=function(){return this.tile.y+this.animation.offsetY},t.prototype.update=function(){this.game.ui.msg(this.game,"".concat(this.name," ").concat(this.stunned?"is":"is NOT"," stunned")),this.ai&&this.ai.act();for(var t=this.effects.length-1;t>=0;t--){var e=this.effects[t];e.update(),e.turnsLeft<=0&&void 0!==e.onExpired&&this.effects.splice(t,1)}},t.prototype.draw=function(){void 0!==this.sprite&&this.game.renderer.drawSprite(this.sprite,this.getDisplayX(),this.getDisplayY(),this.game.animation),this.animation.offsetX-=Math.sign(this.animation.offsetX)*(1/8),this.animation.offsetY-=Math.sign(this.animation.offsetY)*(1/8)},t.prototype.getAdjacentTiles=function(){return this.game.getTile(this.tile.x,this.tile.y).getAdjacentPassableTiles()},t}(),E=function(t){function e(e,n){return void 0===n&&(n=200),t.call(this,n,n,3,e)||this}return w(e,t),e}(T),O=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),M=function(t){function e(e,n,i,r,o,s,a){void 0===o&&(o=100);var c=t.call(this,e,i,n)||this;return c.life=null!=s?s:new L(c,o),c.ai=null!=a?a:new Y(c),c}return O(e,t),e.prototype.draw=function(){t.prototype.draw.call(this),this.drawHP()},e.prototype.drawHP=function(){var t,e,n,i,r=this.game.renderer.options.tileSize,o=r*((null!==(e=null===(t=this.life)||void 0===t?void 0:t.hp)&&void 0!==e?e:0)/(null!==(i=null===(n=this.life)||void 0===n?void 0:n.maxHp)&&void 0!==i?i:1)),s=r-o;this.game.renderer.drawRect("lime",this.getDisplayX()*r,this.getDisplayY()*r+r-2,o,2),this.game.renderer.drawRect("red",this.getDisplayX()*r+o,this.getDisplayY()*r+r-2,s,2)},e.prototype.tryMove=function(t,e){var n,i=this.tile.getNeighbor(t,e);return!!i.passable&&(this.lastMove={x:t,y:e},null===i.monster?this.move(i):this.isPlayer!==i.monster.isPlayer&&(void 0!==this.ai&&this.ai.attackCountThisTurn++,i.monster.stunned=!0,this.game.ui.msg(this.game,"".concat(this.name," stuns ").concat(i.monster.name)),null===(n=i.monster.life)||void 0===n||n.takeDamage(this,10,[]),this.animation.offsetX=(i.x-this.tile.x)/2,this.animation.offsetY=(i.y-this.tile.y)/2),!0)},e.prototype.move=function(t){this.game.ui.msg(this.game,"".concat(this.name," ").concat(this.isPlayer?"move":"moves"," to ").concat(t.x,", ").concat(t.y));var e=this.getTile();e.monster=null,this.animation.offsetX=e.x-t.x,this.animation.offsetY=e.y-t.y,this.tile=t,t.monster=this},e}(x),R=function(t){function e(e){return t.call(this,"goblin",12,e,[0,1,2],95)||this}return O(e,t),e}(M),P=function(t){function e(e){return t.call(this,"kobold",15,e,[0,1,2],125)||this}return O(e,t),e}(M),S=(O((function(t){return A.call(this,"orc",14,t,[0,1,2,3],115)||this}),A=M),function(t){function e(e){var n=t.call(this,"wolf",11,e,[0,1,2,3,4],95)||this;return n.ai=new B(n),n}return O(e,t),e}(M)),C=(function(t){O((function(e){return t.call(this,"dwarf",19,e,[7,8,9,10,11,12],120)||this}),t)}(M),function(t){function e(e){return t.call(this,"man",16,e,[3,4,5],100)||this}return O(e,t),e}(M)),_=function(t){function e(e){var n=t.call(this,"troll",17,e,[3,4],160)||this;return n.ai=new j(n),n}return O(e,t),e}(M),k=(function(t){O((function(e){return t.call(this,"elf",18,e,[0,1,2],150)||this}),t)}(M),function(t){function e(e){var n=t.call(this,"dragon",3,e,[10,11,12,13,14,15],250,void 0)||this;return n.ai=new U(n),n}return O(e,t),e}(M)),D=function(t){function e(e){return t.call(this,"snake",13,e,[7,8,9],15)||this}return O(e,t),e}(M);function N(t){return new t(it.getInstance().getRandomPassableTile())}var L=function(t){function e(e,n){return void 0===n&&(n=100),t.call(this,n,n,2,e)||this}return O(e,t),e}(T),Y=function(t){function e(e){return t.call(this,e)||this}return O(e,t),e.prototype.act=function(){this.attackCountThisTurn=0,t.prototype.act.call(this),0===this.attackCountThisTurn&&t.prototype.act.call(this)},e}(b),j=function(t){function e(e,n){void 0===n&&(n=5);var i=t.call(this,e)||this;return i.speed=n,i}return O(e,t),e.prototype.act=function(){var e=this.monster.stunned;t.prototype.act.call(this),e||(this.monster.stunned=!0,this.game.ui.msg(this.game,"".concat(this.monster.name," is stunned")))},e}(b),U=function(t){function e(e){return t.call(this,e)||this}return O(e,t),e.prototype.eat=function(t){var e,n;null===(e=t.life)||void 0===e||e.die();var i=this.monster.life.heal((null===(n=t.life)||void 0===n?void 0:n.maxHp)/2);return this.game.ui.msg(this.game,"".concat(this.monster.name," heals by ").concat(i," by eating ").concat(t.name)),this.game.animation.shakeAmount=5,i>0},e.prototype.act=function(){var e=this;if(t.prototype.act.call(this),this.monster.life.hp<.75*this.monster.life.maxHp){var n=this.game.monsters.filter((function(t){return void 0!==t.life&&t.life.maxHp<e.monster.life.maxHp/2})).sort((function(t,n){return t.tile.distance(e.monster.tile)-n.tile.distance(e.monster.tile)}));this.pursue(n[0]);var i=this.monster.tile.getAdjacentActors().filter((function(t){return void 0!==t.life&&t.life.maxHp<e.monster.life.maxHp/2}));i.length>0&&this.eat(i[0])}else this.pursue(this.game.player)},e}(b),B=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return O(e,t),e.prototype.act=function(){var t=this.monster.tile.getAdjacentPassableTiles();if(t.length>0){var e=t[0].x-this.monster.tile.x,n=t[0].y-this.monster.tile.y;this.monster.tryMove(e,n)}},e}(b),G=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),H=function(t){function e(e){var n=t.call(this,"You",0,e,[])||this;return n.life=new E(n,10),n.isPlayer=!0,n}return G(e,t),e.prototype.tryMove=function(e,n){return!!t.prototype.tryMove.call(this,e,n)&&(this.game.tick(),!0)},e}(M);const V=n.p+"ed154dfad390b910057308a394fa740b.png";var W;!function(t){t[t.AURA=13]="AURA"}(W||(W={}));var X=function(){function t(t,e){var n;this.isRendererReady=!1;var i=document.createElement("canvas");i.id=t,document.body.appendChild(i),this.canvas=i;var r=this.canvas.getContext("2d");if(null===r)throw new Error("No matching drawing context supported");this.context=r,this.options=e,this.context.imageSmoothingEnabled=!1,this.onRendererReady=null!==(n=e.onRendererReady)&&void 0!==n?n:function(){};var o=e.tileSize,s=e.numTiles,a=e.uiWidth;i.width=o*(s+a),i.height=o*s,i.style.width=i.width+"px",i.style.height=i.height+"px",this.spritesheet=new Image,this.loadAssets()}return t.prototype.setOnRendererReady=function(t){this.isRendererReady?t():this.onRendererReady=t},t.prototype.loadAssets=function(){var t=this;this.spritesheet.src=V,this.spritesheet.onload=function(){t.isRendererReady=!0,t.onRendererReady()}},t.prototype.drawSprite=function(t,e,n,i){var r,o,s=this.context,a=this.options.tileSize,c=this.spritesheet.height/a,u=this.spritesheet.width/a,h=Math.floor(t/u)*a,l=t%c*a;s.drawImage(this.spritesheet,l,h,a,a,e*a+(null!==(r=null==i?void 0:i.shakeX)&&void 0!==r?r:0),n*a+(null!==(o=null==i?void 0:i.shakeY)&&void 0!==o?o:0),a,a)},t.prototype.drawRect=function(t,e,n,i,r){void 0===i&&(i=this.canvas.width),void 0===r&&(r=this.canvas.height);var o=this.context,s=o.fillStyle;o.fillStyle=t,o.fillRect(e,n,i,r),o.fillStyle=s},t.prototype.drawText=function(t,e,n,i,r){var o;this.context.fillStyle=r,this.context.font=e+"px monospace",o=n?(this.canvas.width-this.context.measureText(t).width)/2:this.canvas.width-this.options.uiWidth*this.options.tileSize,this.context.fillText(t,o,i)},t.prototype.setGlobalAlpha=function(t){this.context.globalAlpha=t},t.prototype.resetGlobalAlpha=function(){this.setGlobalAlpha(1)},t.prototype.clearScreen=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},t}();function F(t,e){return Math.floor(Math.random()*(e-t+1))+t}var K,Q=function(t,e){void 0===e&&(e=[]);for(var n=0,i=t.length;n<i;n++){var r=t[n];Array.isArray(r)?Q(r,e):e.push(r)}return e},Z=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),q=function(){function t(t,e,n,i,r,o){void 0===n&&(n=0),void 0===i&&(i=!0),void 0===r&&(r=null),this.x=t,this.y=e,this.sprite=n,this.passable=i,this.monster=r,this.animation=o,this.game=it.getInstance()}return t.prototype.draw=function(){var t,e=this.game.renderer;e.drawSprite(this.sprite,this.x,this.y,this.game.animation),this.animation&&(null===(t=this.animation)||void 0===t?void 0:t.effectCounter)>0&&(this.animation.effectCounter--,e.setGlobalAlpha(this.animation.effectCounter/30),void 0!==this.animation.effectSprite&&e.drawSprite(this.animation.effectSprite,this.x,this.y),e.resetGlobalAlpha())},t.prototype.setAnimationEffect=function(t){this.animation&&(this.animation.effectSprite=t,this.animation.effectCounter=30)},t.prototype.getActorsOnThis=function(){var t=this;return this.game.monsters.filter((function(e){return e.tile.x===t.x&&e.tile.y===t.y}))},t.prototype.getNeighbor=function(t,e){return this.game.getTile(this.x+t,this.y+e)},t.prototype.getAdjacentNeighbors=function(){return function(t){for(var e,n,i=t.slice(),r=1;r<i.length;r++)n=F(0,r),e=i[r],i[r]=i[n],i[n]=e;return i}([this.getNeighbor(0,-1),this.getNeighbor(0,1),this.getNeighbor(-1,0),this.getNeighbor(1,0)])},t.prototype.getAdjacentActors=function(){return this.getAdjacentNeighbors().filter((function(t){return null!==t.monster})).map((function(t){return t.monster}))},t.prototype.getAdjacentPassableTiles=function(){return this.getAdjacentNeighbors().filter((function(t){return t.passable}))},t.prototype.distance=function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},t.prototype.getConnectedTiles=function(){for(var t,e=[this],n=[this];n.length;){var i=null===(t=n.pop())||void 0===t?void 0:t.getAdjacentPassableTiles().filter((function(t){return!e.includes(t)}));e=e.concat(null!=i?i:[]),n=n.concat(null!=i?i:[])}return e},t.prototype.replace=function(t){return this.game.tiles[this.x][this.y]=new t(this.x,this.y),this.game.tiles[this.x][this.y]},t}(),z=function(t){function e(e,n){return t.call(this,e,n,32,!0)||this}return Z(e,t),e}(q),$=function(t){function e(e,n){return t.call(this,e,n,33,!1)||this}return Z(e,t),e}(q),J=function(t){function e(e,n,i,r){var o=t.call(this,e,n,i,!0)||this;return o.direction=r,o}return Z(e,t),e}(q),tt=function(t){function e(e,n,i){return void 0===i&&(i=44),t.call(this,e,n,i,"UP")||this}return Z(e,t),e}(J),et=function(t){function e(e,n,i){return void 0===i&&(i=43),t.call(this,e,n,i,"DOWN")||this}return Z(e,t),e}(J);!function(t){t[t.LOADING=0]="LOADING",t[t.PLAYING=1]="PLAYING",t[t.DEAD=2]="DEAD",t[t.TITLE=3]="TITLE"}(K||(K={}));var nt,it=function(){function t(t){var e=this;this.player=null,this.tiles=[],this.monsters=[],this.items=[],this.levelID=0,this.maxLevelID=16,this.gameState=K.TITLE,this.renderer=t.renderingLibrary,this.ui=t.ui,this.history=new v,this.logging=t.logging,this.renderer.setOnRendererReady((function(){e.ui.renderTitleScreen(e),setInterval((function(){e.render()}),15)})),this.animation={offsetX:0,offsetY:0,shakeAmount:0,shakeX:0,effectSprite:void 0,effectCounter:0,shakeY:0,screenshake:function(){this.shakeAmount&&this.shakeAmount--;var t=Math.random()*Math.PI*2;this.shakeX=Math.round(Math.cos(t)*this.shakeAmount),this.shakeY=Math.round(Math.sin(t)*this.shakeAmount)}}}return t.getInstance=function(e){if(void 0===t.instance){if(void 0===e)throw new Error("getInstance needs to be passed the parameters when called for the fist time");t.instance=new t(e)}return t.instance},t.prototype.getRandomPassableTile=function(){return this.getRandomTile((function(t){return t.passable}))},t.prototype.getTiles=function(t){var e=Q(this.tiles);return void 0===t?e:e.filter(t)},t.prototype.getPassableTiles=function(){return this.getTiles((function(t){return t.passable}))},t.prototype.setupInputHandlers=function(){var t=this,e=document.querySelector("html");if(null===e)throw Error("Please run the app in the browser environment");e.onkeydown=function(e){if(t.gameState===K.TITLE||t.gameState===K.DEAD)t.startGame();else if(t.gameState===K.PLAYING){if(void 0===t.player)return;switch(e.key){case"w":t.player.tryMove(0,-1);break;case"s":t.player.tryMove(0,1);break;case"a":t.player.tryMove(-1,0);break;case"d":t.player.tryMove(1,0);break;case"Enter":t.startLevel(t.levelID+1);break;case"c":t.player,void 0!==(n=t.monsters[0]).ai&&n.addEffect(I);break;case"ArrowUp":t.monsters[0].tryMove(0,-1);break;case"ArrowDown":t.monsters[0].tryMove(0,1);break;case"ArrowLeft":t.monsters[0].tryMove(-1,0);break;case"ArrowRight":t.monsters[0].tryMove(1,0)}}var n}},t.prototype.setupGame=function(){this.setupInputHandlers()},t.prototype.startGame=function(){this.gameState=K.PLAYING,this.startLevel(0)},t.prototype.startLevel=function(t){this.levelID=t,this.generateLevel()},t.prototype.generateLevel=function(){var t=this;!function(e,n){for(var i=1e3;i>0;i--)if(t.generateTiles()===t.getRandomPassableTile().getConnectedTiles().length)return;throw"Timeout while trying to generate map"}();var e=this.getRandomPassableTile();if(this.player=new H(e),this.monsters=this.generateMonsters(),this.levelID>0&&this.getRandomPassableTile().replace(tt),this.levelID<this.maxLevelID){var n=this.getRandomPassableTile().replace(et);0===this.levelID&&(n.sprite=42)}},t.prototype.generateMonsters=function(){for(var t=[],e=0,n=[[k,C,R,D,P],[k,C,R,D,P],[k,C,R,D,P],[P,R],[P,R],[k,k,S,S,C,_,D,D],[P,R],[P,R],[P,R],[P,R],[P,R],[P,R],[P,R],[P,R]][this.levelID];e<n.length;e++){var i=n[e];t.push(N(i))}return t},t.prototype.renderTiles=function(){for(var t=this.renderer.options.numTiles,e=0;e<t;e++)for(var n=0;n<t;n++)this.getTile(e,n).draw()},t.prototype.renderMonsters=function(){for(var t=0,e=this.monsters;t<e.length;t++)e[t].draw()},t.prototype.generateTiles=function(){for(var t=0,e=[],n=this.renderer.options.numTiles,i=0;i<n;i++){e[i]=[];for(var r=0;r<n;r++)Math.random()<.3||!this.inBounds(i,r)?e[i][r]=new $(i,r):(e[i][r]=new z(i,r),t++)}return this.tiles=e,t},t.prototype.inBounds=function(t,e){var n=this.renderer.options.numTiles;return t>0&&e>0&&t<n-1&&e<n-1},t.prototype.getTile=function(t,e){return this.inBounds(t,e)?this.tiles[t][e]:new $(t,e)},t.prototype.tick=function(){for(var t,e=this.monsters.length-1;e>=0;e--)(null===(t=this.monsters[e].life)||void 0===t?void 0:t.isAlive())?this.monsters[e].update():this.monsters.splice(e,1);this.player.life.isAlive()||(this.gameState=K.DEAD)},t.prototype.render=function(){this.gameState===K.PLAYING?(this.renderer.clearScreen(),this.animation.screenshake&&this.animation.screenshake(),this.renderTiles(),this.renderMonsters(),this.player.draw(),this.ui.render(this)):this.gameState===K.DEAD&&this.ui.renderGameOverScreen(this)},t.prototype.getRandomTile=function(t){var e=Q(this.tiles),n=void 0===t?e:e.filter(t);return n[F(0,n.length-1)]},t}(),rt=function(){function t(){}return t.prototype.log=function(t){console.log(t)},t}(),ot=function(){function t(){}return t.prototype.msg=function(t,e,n){void 0===n&&(n="violet"),t.logging.log(e),t.renderer.drawText("Level: "+t.levelID,25,!1,40,n)},t.prototype.render=function(t){t.renderer.drawText("Level: "+t.levelID,25,!1,40,"violet")},t.prototype.renderTitleScreen=function(t){t.renderer.drawRect("rgba(0,0,0,.75)",0,0),t.gameState=K.TITLE,t.renderer.drawText("PRESS ANY KEY TO START",50,!0,500,"white")},t.prototype.renderGameOverScreen=function(t){t.renderer.drawRect("rgba(0,0,0,.5)",0,0),t.renderer.drawText("YOU DIE",50,!0,300,"red"),t.renderer.drawText("PRESS ANY KEY TO START AGAIN",40,!0,400,"white")},t}();nt={renderingLibrary:new X("game",{tileSize:32,numTiles:19,uiWidth:4}),ui:new ot,logging:new rt},it.getInstance(nt).setupGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,