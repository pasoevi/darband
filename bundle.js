(()=>{"use strict";var t={424:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(537),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,"html,\nbody {\n    border: 0;\n    margin: 0;\n    padding: 0;\n    height: 100%;\n}\n\n.container {\n    position: relative;\n    width: 95%;\n    height: 95%;\n}\n\n.container canvas, #game-ui {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n#game-ui {\n    display: none;\n    background-color: rgba(2, green, blue, 0.75);\n    width: 90%;\n    height: auto;\n    color: red;\n}\n\ncanvas {\n    outline: 1px solid white;\n}\n\nbody {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: indigo;\n    text-align: center;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,SAAS;IACT,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;AACX;;AAEA;IACI,aAAa;IACb,4CAA4C;IAC5C,UAAU;IACV,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,wBAAwB;IACxB,kBAAkB;AACtB",sourcesContent:["html,\nbody {\n    border: 0;\n    margin: 0;\n    padding: 0;\n    height: 100%;\n}\n\n.container {\n    position: relative;\n    width: 95%;\n    height: 95%;\n}\n\n.container canvas, #game-ui {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n#game-ui {\n    display: none;\n    background-color: rgba(2, green, blue, 0.75);\n    width: 90%;\n    height: auto;\n    color: red;\n}\n\ncanvas {\n    outline: 1px solid white;\n}\n\nbody {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: indigo;\n    text-align: center;\n}\n"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(i)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var u=0;u<t.length;u++){var h=[].concat(t[u]);i&&s[h[0]]||(void 0!==o&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=o),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),r&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=r):h[4]="".concat(r)),e.push(h))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */"),s=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},s=[],a=0;a<t.length;a++){var c=t[a],u=i.base?c[0]+i.base:c[0],h=o[u]||0,l="".concat(u," ").concat(h);o[u]=h+1;var p=n(l),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(f);else{var d=r(f,i);i.byIndex=a,e.splice(a,0,{identifier:l,updater:d,references:1})}s.push(l)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=i(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var c=i(t,r),u=0;u<o.length;u++){var h=n(o[u]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}o=c}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{var t=n(379),e=n.n(t),i=n(795),r=n.n(i),o=n(569),s=n.n(o),a=n(565),c=n.n(a),u=n(216),h=n.n(u),l=n(589),p=n.n(l),f=n(424),d={};d.styleTagTransform=p(),d.setAttributes=c(),d.insert=s().bind(null,"head"),d.domAPI=r(),d.insertStyleElement=h(),e()(f.Z,d),f.Z&&f.Z.locals&&f.Z.locals;var m,g,v=function(){function t(){this.messages=[]}return t.prototype.push=function(t){this.messages.push(t)},t}();!function(t){t.MOVE_UP="MOVE_UP",t.MOVE_RIGHT="MOVE_RIGHT",t.MOVE_DOWN="MOVE_DOWN",t.MOVE_LEFT="MOVE_LEFT",t.PICK_ITEM="PICK_ITEM",t.DROP_ITEM="DROP_ITEM",t.DROP_LAST_ITEM="DROP_LAST_ITEM",t.QUAFF="QUAFF",t.OPEN_INVENTORY="OPEN_INVENTORY",t.WIELD="WIELD",t.UNWIELD="UNWIELD",t.THROW="THROW",t.INVOKE="INVOKE",t.PRAY="PRAY"}(g||(g={})),(m={})[g.MOVE_UP]="",m[g.MOVE_RIGHT]="",m[g.MOVE_DOWN]="",m[g.MOVE_LEFT]="",m[g.PICK_ITEM]="",m[g.DROP_ITEM]="",m[g.DROP_LAST_ITEM]="",m[g.QUAFF]="",m[g.OPEN_INVENTORY]="",m[g.WIELD]="",m[g.UNWIELD]="",m[g.THROW]="",m[g.INVOKE]="",m[g.PRAY]="";var y,A,w=(y=function(t,e){return y=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},y(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}y(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),T=function(){function t(t,e,n,i){this.game=it.getInstance(),this.hp=t,this.maxHp=e,this.defence=n,this.actor=i}return t.prototype.die=function(){this.hp=0,this.actor.getTile().monster=null,this.actor.isPlayer?this.game.ui.msg(this.game,"You die."):this.game.ui.msg(this.game,"".concat(this.actor.getName()," dies"))},t.prototype.isAlive=function(){return this.hp>0},t.prototype.takeDamage=function(t,e,n,i){var r=e;if(!t||!this.isAlive())return r;i&&(r=i.power-this.defence),void 0!==n&&(r=n.reduce((function(t,e){return t+e.value}),r));var o=this.hp;return this.hp=Math.max(0,this.hp-r),this.hp<=0&&this.die(),this.game.ui.msg(this.game,"".concat(t.getName()," attacks ").concat(this.actor.getName()," for ").concat(r,". Was ").concat(o," is ").concat(this.hp),"#ff0000"),r},t.prototype.heal=function(t){return this.hp=Math.min(this.maxHp,this.hp+t),this.game.ui.msg(this.game,"".concat(this.actor.name," heals by ").concat(t)),t},t}(),b=(function(){function t(){this.game=it.getInstance(),this.items=[]}t.prototype.getCurrentWeapon=function(){return this.weapon},t.prototype.pickItem=function(t){this.items.push(t)}}(),function(){function t(t,e,n,i){void 0===e&&(e={}),void 0===n&&(n=[]),void 0===i&&(i=10),this.monster=t,this.attackCountThisTurn=0,this.pursuing=void 0,this.game=it.getInstance(),this.skills=e,this.quests=n,this.xp=i,this.xpLevel=0,this.pursue(this.game.player)}return t.prototype.getSkills=function(){return this.skills},t.prototype.getQuests=function(){return this.quests},t.prototype.addQuest=function(t){this.quests.push(t)},t.prototype.act=function(){if(this.monster.stunned)return this.monster.stunned=!1,void this.game.ui.msg(this.game,"".concat(this.monster.name," is no longer stunned"));this.towardPursuedActor()},t.prototype.pursue=function(t){this.pursuing=t},t.prototype.towardPursuedActor=function(){if(void 0!==this.pursuing){var t=this.monster.getAdjacentTiles();if((t=t.filter((function(t){var e=t.getActorsOnThis();return 0===e.length||e.filter((function(t){return t.isPlayer})).length>0}))).length>0){var e=this.pursuing.getTile();t.sort((function(t,n){return t.distance(e)-n.distance(e)}));var n=t[0];this.monster.tryMove(n.x-this.monster.tile.x,n.y-this.monster.tile.y)}}},t}()),I=function(t){function e(e){var n=t.call(this,e,5)||this;return n.oldAI=e.ai,n.onExpired=function(){e.ai=n.oldAI,e.game.ui.msg(e.game,"".concat(e.name," is no longer confused"))},e.ai=new B(e,n.oldAI.skills,n.oldAI.getQuests()),e.game.ui.msg(e.game,"".concat(e.name," is now confused")),n}return w(e,t),e}(function(){function t(t,e,n,i){void 0===e&&(e=5),void 0===n&&(n=""),this.actor=t,this.turnsLeft=e,this.name=n,this.onExpired=i}return t.prototype.renderOnMap=function(){},t.prototype.renderOnUI=function(){},t.prototype.update=function(){this.turnsLeft-=1,this.turnsLeft<=0&&void 0!==this.onExpired&&this.onExpired()},t}()),x=function(){function t(t,e,n,i,r,o){this.isPlayer=!1,this.stunned=!1,this.game=it.getInstance(),this.tile=e,this.name=null!=t?t:"Unnamed monster",this.sprite=n,this.domains=o,this.lastMove={x:-1,y:0},this.effects=[],this.animation={offsetX:0,offsetY:0,effectCounter:0,shakeAmount:0,shakeX:0,shakeY:0},void 0!==i&&(this.life=i),void 0!==r&&(this.ai=r)}return t.prototype.getName=function(){return this.name},t.prototype.getTile=function(){return this.tile},t.prototype.addEffect=function(t){var e=new t(this);this.effects.push(e)},t.prototype.getDisplayX=function(){return this.tile.x+this.animation.offsetX},t.prototype.getDisplayY=function(){return this.tile.y+this.animation.offsetY},t.prototype.update=function(){this.game.ui.msg(this.game,"".concat(this.name," ").concat(this.stunned?"is":"is NOT"," stunned")),this.ai&&this.ai.act();for(var t=this.effects.length-1;t>=0;t--){var e=this.effects[t];e.update(),e.turnsLeft<=0&&void 0!==e.onExpired&&this.effects.splice(t,1)}},t.prototype.draw=function(){void 0!==this.sprite&&this.game.renderer.drawSprite(this.sprite,this.getDisplayX(),this.getDisplayY(),this.game.animation),this.animation.offsetX-=Math.sign(this.animation.offsetX)*(1/8),this.animation.offsetY-=Math.sign(this.animation.offsetY)*(1/8)},t.prototype.getAdjacentTiles=function(){return this.game.getTile(this.tile.x,this.tile.y).getAdjacentPassableTiles()},t}(),E=function(t){function e(e,n){return void 0===n&&(n=200),t.call(this,n,n,3,e)||this}return w(e,t),e}(T),O=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),M=function(t){function e(e,n,i,r,o,s,a){void 0===o&&(o=100);var c=t.call(this,e,i,n)||this;return c.life=null!=s?s:new L(c,o),c.ai=null!=a?a:new Y(c),c}return O(e,t),e.prototype.draw=function(){t.prototype.draw.call(this),this.drawHP()},e.prototype.drawHP=function(){var t,e,n,i,r=this.game.renderer.options.tileSize,o=r*((null!==(e=null===(t=this.life)||void 0===t?void 0:t.hp)&&void 0!==e?e:0)/(null!==(i=null===(n=this.life)||void 0===n?void 0:n.maxHp)&&void 0!==i?i:1)),s=r-o;this.game.renderer.drawRect("lime",this.getDisplayX()*r,this.getDisplayY()*r+r-2,o,2),this.game.renderer.drawRect("red",this.getDisplayX()*r+o,this.getDisplayY()*r+r-2,s,2)},e.prototype.tryMove=function(t,e){var n,i=this.tile.getNeighbor(t,e);return!!i.passable&&(this.lastMove={x:t,y:e},null===i.monster?this.move(i):this.isPlayer!==i.monster.isPlayer&&(void 0!==this.ai&&this.ai.attackCountThisTurn++,i.monster.stunned=!0,this.game.ui.msg(this.game,"".concat(this.name," stuns ").concat(i.monster.name)),null===(n=i.monster.life)||void 0===n||n.takeDamage(this,10,[]),this.animation.offsetX=(i.x-this.tile.x)/2,this.animation.offsetY=(i.y-this.tile.y)/2),!0)},e.prototype.move=function(t){this.game.ui.msg(this.game,"".concat(this.name," ").concat(this.isPlayer?"move":"moves"," to ").concat(t.x,", ").concat(t.y));var e=this.getTile();e.monster=null,this.animation.offsetX=e.x-t.x,this.animation.offsetY=e.y-t.y,this.tile=t,t.monster=this},e}(x),P=function(t){function e(e){return t.call(this,"goblin",12,e,[0,1,2],95)||this}return O(e,t),e}(M),R=function(t){function e(e){return t.call(this,"kobold",15,e,[0,1,2],125)||this}return O(e,t),e}(M),S=(O((function(t){return A.call(this,"orc",14,t,[0,1,2,3],115)||this}),A=M),function(t){function e(e){var n=t.call(this,"wolf",11,e,[0,1,2,3,4],95)||this;return n.ai=new B(n),n}return O(e,t),e}(M)),C=(function(t){O((function(e){return t.call(this,"dwarf",19,e,[7,8,9,10,11,12],120)||this}),t)}(M),function(t){function e(e){return t.call(this,"man",16,e,[3,4,5],100)||this}return O(e,t),e}(M)),_=function(t){function e(e){var n=t.call(this,"troll",17,e,[3,4],160)||this;return n.ai=new j(n),n}return O(e,t),e}(M),k=(function(t){O((function(e){return t.call(this,"elf",18,e,[0,1,2],150)||this}),t)}(M),function(t){function e(e){var n=t.call(this,"dragon",3,e,[10,11,12,13,14,15],250,void 0)||this;return n.ai=new U(n),n}return O(e,t),e}(M)),D=function(t){function e(e){return t.call(this,"snake",13,e,[7,8,9],15)||this}return O(e,t),e}(M);function N(t){return new t(it.getInstance().getRandomPassableTile())}var L=function(t){function e(e,n){return void 0===n&&(n=100),t.call(this,n,n,2,e)||this}return O(e,t),e}(T),Y=function(t){function e(e){return t.call(this,e)||this}return O(e,t),e.prototype.act=function(){this.attackCountThisTurn=0,t.prototype.act.call(this),0===this.attackCountThisTurn&&t.prototype.act.call(this)},e}(b),j=function(t){function e(e,n){void 0===n&&(n=5);var i=t.call(this,e)||this;return i.speed=n,i}return O(e,t),e.prototype.act=function(){var e=this.monster.stunned;t.prototype.act.call(this),e||(this.monster.stunned=!0,this.game.ui.msg(this.game,"".concat(this.monster.name," is stunned")))},e}(b),U=function(t){function e(e){return t.call(this,e)||this}return O(e,t),e.prototype.eat=function(t){var e,n;null===(e=t.life)||void 0===e||e.die();var i=this.monster.life.heal((null===(n=t.life)||void 0===n?void 0:n.maxHp)/2);return this.game.ui.msg(this.game,"".concat(this.monster.name," heals by ").concat(i," by eating ").concat(t.name)),this.game.animation.shakeAmount=5,i>0},e.prototype.act=function(){var e=this;if(t.prototype.act.call(this),this.monster.life.hp<.75*this.monster.life.maxHp){var n=this.game.monsters.filter((function(t){return void 0!==t.life&&t.life.maxHp<e.monster.life.maxHp/2})).sort((function(t,n){return t.tile.distance(e.monster.tile)-n.tile.distance(e.monster.tile)}));this.pursue(n[0]);var i=this.monster.tile.getAdjacentActors().filter((function(t){return void 0!==t.life&&t.life.maxHp<e.monster.life.maxHp/2}));i.length>0&&this.eat(i[0])}else this.pursue(this.game.player)},e}(b),B=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return O(e,t),e.prototype.act=function(){var t=this.monster.tile.getAdjacentPassableTiles();if(t.length>0){var e=t[0].x-this.monster.tile.x,n=t[0].y-this.monster.tile.y;this.monster.tryMove(e,n)}},e}(b),G=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),H=function(t){function e(e){var n=t.call(this,"You",0,e,[])||this;return n.life=new E(n,1e3),n.isPlayer=!0,n}return G(e,t),e.prototype.tryMove=function(e,n){return!!t.prototype.tryMove.call(this,e,n)&&(this.game.tick(),!0)},e}(M);const V=n.p+"ed154dfad390b910057308a394fa740b.png";var W;!function(t){t[t.AURA=13]="AURA"}(W||(W={}));var X=function(){function t(t,e){var n;this.isRendererReady=!1;var i=document.createElement("canvas");i.id=t,document.body.appendChild(i),this.canvas=i;var r=this.canvas.getContext("2d");if(null===r)throw new Error("No matching drawing context supported");this.context=r,this.options=e,this.context.imageSmoothingEnabled=!1,this.onRendererReady=null!==(n=e.onRendererReady)&&void 0!==n?n:function(){};var o=e.tileSize,s=e.numTiles,a=e.uiWidth;i.width=o*(s+a),i.height=o*s,i.style.width=i.width+"px",i.style.height=i.height+"px",this.spritesheet=new Image,this.loadAssets()}return t.prototype.setOnRendererReady=function(t){this.isRendererReady?t():this.onRendererReady=t},t.prototype.loadAssets=function(){var t=this;this.spritesheet.src=V,this.spritesheet.onload=function(){t.isRendererReady=!0,t.onRendererReady()}},t.prototype.drawSprite=function(t,e,n,i){var r,o,s=this.context,a=this.options.tileSize,c=this.spritesheet.height/a,u=this.spritesheet.width/a,h=Math.floor(t/u)*a,l=t%c*a;s.drawImage(this.spritesheet,l,h,a,a,e*a+(null!==(r=null==i?void 0:i.shakeX)&&void 0!==r?r:0),n*a+(null!==(o=null==i?void 0:i.shakeY)&&void 0!==o?o:0),a,a)},t.prototype.drawRect=function(t,e,n,i,r){void 0===i&&(i=this.canvas.width),void 0===r&&(r=this.canvas.height);var o=this.context,s=o.fillStyle;o.fillStyle=t,o.fillRect(e,n,i,r),o.fillStyle=s},t.prototype.drawText=function(t,e,n,i,r){var o;this.context.fillStyle=r,this.context.font=e+"px monospace",o=n?(this.canvas.width-this.context.measureText(t).width)/2:this.canvas.width-this.options.uiWidth*this.options.tileSize,this.context.fillText(t,o,i)},t.prototype.setGlobalAlpha=function(t){this.context.globalAlpha=t},t.prototype.resetGlobalAlpha=function(){this.setGlobalAlpha(1)},t.prototype.clearScreen=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},t}();function F(t,e){return Math.floor(Math.random()*(e-t+1))+t}var K,Q=function(t,e){void 0===e&&(e=[]);for(var n=0,i=t.length;n<i;n++){var r=t[n];Array.isArray(r)?Q(r,e):e.push(r)}return e},Z=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),q=function(){function t(t,e,n,i,r,o,s){void 0===n&&(n=0),void 0===i&&(i=!0),void 0===r&&(r=null),void 0===s&&(s=[]),this.x=t,this.y=e,this.sprite=n,this.passable=i,this.monster=r,this.animation=o,this.features=s,this.game=it.getInstance()}return t.prototype.draw=function(){var t,e=this.game.renderer;e.drawSprite(this.sprite,this.x,this.y,this.game.animation),this.animation&&(null===(t=this.animation)||void 0===t?void 0:t.effectCounter)>0&&(this.animation.effectCounter--,e.setGlobalAlpha(this.animation.effectCounter/30),void 0!==this.animation.effectSprite&&e.drawSprite(this.animation.effectSprite,this.x,this.y),e.resetGlobalAlpha())},t.prototype.setAnimationEffect=function(t){this.animation&&(this.animation.effectSprite=t,this.animation.effectCounter=30)},t.prototype.getActorsOnThis=function(){var t=this;return this.game.monsters.filter((function(e){return e.tile.x===t.x&&e.tile.y===t.y}))},t.prototype.getNeighbor=function(t,e){return this.game.getTile(this.x+t,this.y+e)},t.prototype.getAdjacentNeighbors=function(){return function(t){for(var e,n,i=t.slice(),r=1;r<i.length;r++)n=F(0,r),e=i[r],i[r]=i[n],i[n]=e;return i}([this.getNeighbor(0,-1),this.getNeighbor(0,1),this.getNeighbor(-1,0),this.getNeighbor(1,0)])},t.prototype.getAdjacentActors=function(){return this.getAdjacentNeighbors().filter((function(t){return null!==t.monster})).map((function(t){return t.monster}))},t.prototype.getAdjacentPassableTiles=function(){return this.getAdjacentNeighbors().filter((function(t){return t.passable}))},t.prototype.distance=function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},t.prototype.getConnectedTiles=function(){for(var t,e=[this],n=[this];n.length;){var i=null===(t=n.pop())||void 0===t?void 0:t.getAdjacentPassableTiles().filter((function(t){return!e.includes(t)}));e=e.concat(null!=i?i:[]),n=n.concat(null!=i?i:[])}return e},t.prototype.replace=function(t){return this.game.tiles[this.x][this.y]=new t(this.x,this.y),this.game.tiles[this.x][this.y]},t}(),z=function(t){function e(e,n){return t.call(this,e,n,32,!0)||this}return Z(e,t),e}(q),$=function(t){function e(e,n){return t.call(this,e,n,33,!1)||this}return Z(e,t),e}(q),J=function(t){function e(e,n,i,r){var o=t.call(this,e,n,i,!0)||this;return o.direction=r,o}return Z(e,t),e.prototype.climb=function(t){var e=this.game.levelID+("UP"===t?-1:1);this.game.startLevel(e)},e}(q),tt=function(t){function e(e,n,i){void 0===i&&(i=44);var r=t.call(this,e,n,i,"UP")||this;return r.features.push({onInteract:function(t){return r.climb("UP")}}),r}return Z(e,t),e}(J),et=function(t){function e(e,n,i){void 0===i&&(i=43);var r=t.call(this,e,n,i,"DOWN")||this;return r.features.push({onInteract:function(t){return r.climb("DOWN")}}),r}return Z(e,t),e}(J);!function(t){t[t.LOADING=0]="LOADING",t[t.PLAYING=1]="PLAYING",t[t.DEAD=2]="DEAD",t[t.TITLE=3]="TITLE"}(K||(K={}));var nt,it=function(){function t(t){var e=this;this.player=null,this.tiles=[],this.monsters=[],this.items=[],this.levelID=0,this.maxLevelID=16,this.gameState=K.TITLE,this.renderer=t.renderingLibrary,this.ui=t.ui,this.history=new v,this.logging=t.logging,this.renderer.setOnRendererReady((function(){e.ui.renderTitleScreen(e),setInterval((function(){e.render()}),15)})),this.animation={offsetX:0,offsetY:0,shakeAmount:0,shakeX:0,effectSprite:void 0,effectCounter:0,shakeY:0,screenshake:function(){this.shakeAmount&&this.shakeAmount--;var t=Math.random()*Math.PI*2;this.shakeX=Math.round(Math.cos(t)*this.shakeAmount),this.shakeY=Math.round(Math.sin(t)*this.shakeAmount)}}}return t.getInstance=function(e){if(void 0===t.instance){if(void 0===e)throw new Error("getInstance needs to be passed the parameters when called for the fist time");t.instance=new t(e)}return t.instance},t.prototype.getRandomPassableTile=function(){return this.getRandomTile((function(t){return t.passable}))},t.prototype.getTiles=function(t){var e=Q(this.tiles);return void 0===t?e:e.filter(t)},t.prototype.getPassableTiles=function(){return this.getTiles((function(t){return t.passable}))},t.prototype.setupInputHandlers=function(){var t=this,e=document.querySelector("html");if(null===e)throw Error("Please run the app in the browser environment");e.onkeydown=function(e){if(t.gameState===K.TITLE||t.gameState===K.DEAD)t.startGame();else if(t.gameState===K.PLAYING){if(void 0===t.player)return;switch(e.key){case"w":t.player.tryMove(0,-1);break;case"s":t.player.tryMove(0,1);break;case"a":t.player.tryMove(-1,0);break;case"d":t.player.tryMove(1,0);break;case"Enter":var n=t.player.getTile();t.getTile(n.x,n.y).features.map((function(e){return e.onInteract(t.player)}));break;case"c":t.player,void 0!==(i=t.monsters[0]).ai&&i.addEffect(I);break;case"ArrowUp":t.monsters[0].tryMove(0,-1);break;case"ArrowDown":t.monsters[0].tryMove(0,1);break;case"ArrowLeft":t.monsters[0].tryMove(-1,0);break;case"ArrowRight":t.monsters[0].tryMove(1,0)}}var i}},t.prototype.setupGame=function(){this.setupInputHandlers()},t.prototype.startGame=function(){this.gameState=K.PLAYING,this.startLevel(0)},t.prototype.startLevel=function(t){this.levelID=t,this.generateLevel()},t.prototype.generateLevel=function(){var t=this;!function(e,n){for(var i=1e3;i>0;i--)if(t.generateTiles()===t.getRandomPassableTile().getConnectedTiles().length)return;throw"Timeout while trying to generate map"}();var e=this.getRandomPassableTile();if(this.player=new H(e),this.monsters=this.generateMonsters(),this.levelID>0&&this.getRandomPassableTile().replace(tt),this.levelID<this.maxLevelID){var n=this.getRandomPassableTile().replace(et);0===this.levelID&&(n.sprite=42)}},t.prototype.generateMonsters=function(){for(var t=[],e=0,n=[[k,C,P,D,R],[k,C,P,D,R],[k,C,P,D,R],[R,P],[R,P],[k,k,S,S,C,_,D,D],[R,P],[R,P],[R,P],[R,P],[R,P],[R,P],[R,P],[R,P]][this.levelID];e<n.length;e++){var i=n[e];t.push(N(i))}return t},t.prototype.renderTiles=function(){for(var t=this.renderer.options.numTiles,e=0;e<t;e++)for(var n=0;n<t;n++)this.getTile(e,n).draw()},t.prototype.renderMonsters=function(){for(var t=0,e=this.monsters;t<e.length;t++)e[t].draw()},t.prototype.generateTiles=function(){for(var t=0,e=[],n=this.renderer.options.numTiles,i=0;i<n;i++){e[i]=[];for(var r=0;r<n;r++)Math.random()<.3||!this.inBounds(i,r)?e[i][r]=new $(i,r):(e[i][r]=new z(i,r),t++)}return this.tiles=e,t},t.prototype.inBounds=function(t,e){var n=this.renderer.options.numTiles;return t>0&&e>0&&t<n-1&&e<n-1},t.prototype.getTile=function(t,e){return this.inBounds(t,e)?this.tiles[t][e]:new $(t,e)},t.prototype.tick=function(){for(var t,e=this.monsters.length-1;e>=0;e--)(null===(t=this.monsters[e].life)||void 0===t?void 0:t.isAlive())?this.monsters[e].update():this.monsters.splice(e,1);this.player.life.isAlive()||(this.gameState=K.DEAD)},t.prototype.render=function(){this.gameState===K.PLAYING?(this.renderer.clearScreen(),this.animation.screenshake&&this.animation.screenshake(),this.renderTiles(),this.renderMonsters(),this.player.draw(),this.ui.render(this)):this.gameState===K.DEAD&&this.ui.renderGameOverScreen(this)},t.prototype.getRandomTile=function(t){var e=Q(this.tiles),n=void 0===t?e:e.filter(t);return n[F(0,n.length-1)]},t}(),rt=function(){function t(){}return t.prototype.log=function(t){console.log(t)},t}(),ot=function(){function t(){}return t.prototype.msg=function(t,e,n){void 0===n&&(n="violet"),t.logging.log(e),t.renderer.drawText("Level: "+t.levelID,25,!1,40,n)},t.prototype.render=function(t){t.renderer.drawText("Level: "+t.levelID,25,!1,40,"violet")},t.prototype.renderTitleScreen=function(t){t.renderer.drawRect("rgba(0,0,0,.75)",0,0),t.gameState=K.TITLE,t.renderer.drawText("PRESS ANY KEY TO START",50,!0,500,"white")},t.prototype.renderGameOverScreen=function(t){t.renderer.drawRect("rgba(0,0,0,.5)",0,0),t.renderer.drawText("YOU DIE",50,!0,300,"red"),t.renderer.drawText("PRESS ANY KEY TO START AGAIN",40,!0,400,"white")},t}();nt={renderingLibrary:new X("game",{tileSize:32,numTiles:19,uiWidth:4}),ui:new ot,logging:new rt},it.getInstance(nt).setupGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUF5QmhOLEdBQ3JCQSxFQUFLb0YsU0FBU1ksU0FBUyxrQkFBbUIsRUFBRyxHQUM3Q2hHLEVBQUswTSxVQUFZakMsRUFBVWtDLE1BRzNCM00sRUFBS29GLFNBQVNxRSxTQUNWLHlCQUNBLElBQ0EsRUFDQSxJQUNBLFVBSUQsWUFBQTJHLHFCQUFQLFNBQTRCcFEsR0FDeEJBLEVBQUtvRixTQUFTWSxTQUFTLGlCQUFrQixFQUFHLEdBRTVDaEcsRUFBS29GLFNBQVNxRSxTQUNWLFVBQ0EsSUFDQSxFQUNBLElBQ0EsT0FHSnpKLEVBQUtvRixTQUFTcUUsU0FDViwrQkFDQSxJQUNBLEVBQ0EsSUFDQSxVQUdaLEVBL0RBLEdIY1UrQyxHQUEyQixDQUM3QkksaUJBSnFCLElBQUk0RCxFQUFxQixPQUxiLENBQ2pDM0ssU0FBVSxHQUNWcUMsU0FBVSxHQUNWQyxRQUFTLElBT1Q1SCxHQUpXLElBQUlrUSxHQUtmMUQsUUFKVyxJQUFJMkQsSUFNTnpRLEdBQUtDLFlBQVlzTSxJQUN6QmdDLGEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXJiYW5kMi8uL3NyYy9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2RhcmJhbmQyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2RhcmJhbmQyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2RhcmJhbmQyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2RhcmJhbmQyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9kYXJiYW5kMi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9kYXJiYW5kMi93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9kYXJiYW5kMi93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9kYXJiYW5kMi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2RhcmJhbmQyL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2RhcmJhbmQyLy4vc3JjL2luZGV4LmNzcz9jZmU0Iiwid2VicGFjazovL2RhcmJhbmQyLy4vc3JjL2hpc3RvcnkvSGlzdG9yeS50cyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL3NyYy9EYXRhLnRzIiwid2VicGFjazovL2RhcmJhbmQyLy4vc3JjL01vbnN0ZXIudHMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9zcmMvQWN0b3IudHMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9zcmMvUGxheWVyLnRzIiwid2VicGFjazovL2RhcmJhbmQyLy4vYXNzZXRzL3Nwcml0ZXMucG5nIiwid2VicGFjazovL2RhcmJhbmQyLy4vc3JjL2xpYi9DYW52YXNEcmF3aW5nTGlicmFyeS50cyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL3NyYy9VdGlsLnRzIiwid2VicGFjazovL2RhcmJhbmQyLy4vc3JjL0dhbWUudHMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9zcmMvVGlsZS50cyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9kYXJiYW5kMi8uL3NyYy9TcGVsbHMudHMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9zcmMvbGliL0xvZ2dpbmcudHMiLCJ3ZWJwYWNrOi8vZGFyYmFuZDIvLi9zcmMvdWkvQ2FudmFzVUkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJodG1sLFxcbmJvZHkge1xcbiAgICBib3JkZXI6IDA7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4uY29udGFpbmVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB3aWR0aDogOTUlO1xcbiAgICBoZWlnaHQ6IDk1JTtcXG59XFxuXFxuLmNvbnRhaW5lciBjYW52YXMsICNnYW1lLXVpIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxufVxcblxcbiNnYW1lLXVpIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyLCBncmVlbiwgYmx1ZSwgMC43NSk7XFxuICAgIHdpZHRoOiA5MCU7XFxuICAgIGhlaWdodDogYXV0bztcXG4gICAgY29sb3I6IHJlZDtcXG59XFxuXFxuY2FudmFzIHtcXG4gICAgb3V0bGluZTogMXB4IHNvbGlkIHdoaXRlO1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGluZGlnbztcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOztJQUVJLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsVUFBVTtJQUNWLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixNQUFNO0lBQ04sT0FBTztBQUNYOztBQUVBO0lBQ0ksYUFBYTtJQUNiLDRDQUE0QztJQUM1QyxVQUFVO0lBQ1YsWUFBWTtJQUNaLFVBQVU7QUFDZDs7QUFFQTtJQUNJLHdCQUF3QjtBQUM1Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtJQUN4QixrQkFBa0I7QUFDdEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiaHRtbCxcXG5ib2R5IHtcXG4gICAgYm9yZGVyOiAwO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLmNvbnRhaW5lciB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgd2lkdGg6IDk1JTtcXG4gICAgaGVpZ2h0OiA5NSU7XFxufVxcblxcbi5jb250YWluZXIgY2FudmFzLCAjZ2FtZS11aSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAwO1xcbiAgICBsZWZ0OiAwO1xcbn1cXG5cXG4jZ2FtZS11aSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMiwgZ3JlZW4sIGJsdWUsIDAuNzUpO1xcbiAgICB3aWR0aDogOTAlO1xcbiAgICBoZWlnaHQ6IGF1dG87XFxuICAgIGNvbG9yOiByZWQ7XFxufVxcblxcbmNhbnZhcyB7XFxuICAgIG91dGxpbmU6IDFweCBzb2xpZCB3aGl0ZTtcXG59XFxuXFxuYm9keSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmRpZ287XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICcuLi9saWIvSW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBIaXN0b3J5IHtcbiAgICBwcml2YXRlIG1lc3NhZ2VzOiBNZXNzYWdlW10gPSBbXTtcblxuICAgIHB1YmxpYyBwdXNoKG1lc3NhZ2U6IE1lc3NhZ2UpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgIH1cbn0iLCJjb25zdCBDb2xvcnMgPSB7XG4gICAgd2FsbDogJyNjM2MzYzMnLFxuICAgIGZsb29yOiAnIzMyMzIzMicsXG4gICAgZmlyZTogJyNlMjU4MjInLFxuICAgIGljZTogJyNhNWYyZjMnLFxuICAgIHBvaXNvbjogJyM0NWYxMmMnLFxuICAgIG1hZ2ljOiAnIzhiMDA4YicsXG4gICAgY2hhb3M6ICcjZDQwZjBmJyxcbiAgICB3ZWFsdGg6ICcjYzZjNmM2JyxcbiAgICBnb2xkX21ldGFsbGljOiAnI2Q0YWYzNycsXG4gICAgZ29sZF9vbGQ6ICcjY2ZiNTNiJyxcbiAgICBnb2xkX3llbGxvdzogJyNmZmRmMDAnLFxuICAgIHJlZDogJyNmZjAwMDAnLFxuICAgIHdoaXRlOiAnI2ZmZmZmZicsXG4gICAgYmxhY2s6ICcjMDAwMDAwJyxcbiAgICBvcmFuZ2U6ICcjYWE4ODExJyxcbiAgICBibHVlOiAnIzAwMDBGRicsXG4gICAgcHVycGxlOiAnIzQ0MDA0NCcsXG59O1xuXG5leHBvcnQgY29uc3QgQWN0b3JUeXBlID0ge1xuICAgIE1PTlNURVI6ICdtb25zdGVyJyxcbiAgICBXRUFQT046ICd3ZWFwb24nLFxuICAgIFBPVElPTjogJ3BvdGlvbicsXG59O1xuXG5jb25zdCBMZXZlbHMgPSBbXG4gICAge1xuICAgICAgICBkb21haW46ICdhYnN0cmFjdHMnLFxuICAgICAgICBsZXZlbElEOiAwLFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2R1bmdlb25zJyxcbiAgICAgICAgbGV2ZWxJRDogMSxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdkdW5nZW9ucycsXG4gICAgICAgIGxldmVsSUQ6IDIsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZHVuZ2VvbnMnLFxuICAgICAgICBsZXZlbElEOiAzLFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2R1bmdlb25zJyxcbiAgICAgICAgbGV2ZWxJRDogNCxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdkdW5nZW9ucycsXG4gICAgICAgIGxldmVsSUQ6IDUsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZHVuZ2VvbnMnLFxuICAgICAgICBsZXZlbElEOiA2LFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2R1bmdlb25zJyxcbiAgICAgICAgbGV2ZWxJRDogNyxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdkdW5nZW9ucycsXG4gICAgICAgIGxldmVsSUQ6IDgsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZHVuZ2VvbnMnLFxuICAgICAgICBsZXZlbElEOiA5LFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2R1bmdlb25zJyxcbiAgICAgICAgbGV2ZWxJRDogMTAsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZHVuZ2VvbnMnLFxuICAgICAgICBsZXZlbElEOiAxMSxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdkdW5nZW9ucycsXG4gICAgICAgIGxldmVsSUQ6IDEyLFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2R1bmdlb25zJyxcbiAgICAgICAgbGV2ZWxJRDogMTMsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZ2F0ZXMnLFxuICAgICAgICBsZXZlbElEOiAxNCxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdnYXRlcycsXG4gICAgICAgIGxldmVsSUQ6IDE1LFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2dhdGVzJyxcbiAgICAgICAgbGV2ZWxJRDogMTYsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZ2F0ZXMnLFxuICAgICAgICBsZXZlbElEOiAxNyxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdnYXRlcycsXG4gICAgICAgIGxldmVsSUQ6IDE4LFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2dhdGVzJyxcbiAgICAgICAgbGV2ZWxJRDogMTksXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZ2F0ZXMnLFxuICAgICAgICBsZXZlbElEOiAyMCxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdnYXRlcycsXG4gICAgICAgIGxldmVsSUQ6IDIxLFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2dhdGVzJyxcbiAgICAgICAgbGV2ZWxJRDogMjIsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZ2F0ZXMnLFxuICAgICAgICBsZXZlbElEOiAyMyxcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBkb21haW46ICdnYXRlcycsXG4gICAgICAgIGxldmVsSUQ6IDI0LFxuICAgICAgICBwb3NzaWJsZU1vbnN0ZXJzOiBbXG4gICAgICAgICAgICAnZ29ibGluJyxcbiAgICAgICAgICAgICdrb2JvbGQnLFxuICAgICAgICAgICAgJ29yYycsXG4gICAgICAgICAgICAnZHdhcmYnLFxuICAgICAgICAgICAgJ21hbicsXG4gICAgICAgICAgICAndHJvbGwnLFxuICAgICAgICAgICAgJ2VsZicsXG4gICAgICAgICAgICAnZHJhZ29uJyxcbiAgICAgICAgICAgICdzbmFrZScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGRvbWFpbjogJ2dhdGVzJyxcbiAgICAgICAgbGV2ZWxJRDogMjUsXG4gICAgICAgIHBvc3NpYmxlTW9uc3RlcnM6IFtcbiAgICAgICAgICAgICdnb2JsaW4nLFxuICAgICAgICAgICAgJ2tvYm9sZCcsXG4gICAgICAgICAgICAnb3JjJyxcbiAgICAgICAgICAgICdkd2FyZicsXG4gICAgICAgICAgICAnbWFuJyxcbiAgICAgICAgICAgICd0cm9sbCcsXG4gICAgICAgICAgICAnZWxmJyxcbiAgICAgICAgICAgICdkcmFnb24nLFxuICAgICAgICAgICAgJ3NuYWtlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZG9tYWluOiAnZ2F0ZXMnLFxuICAgICAgICBsZXZlbElEOiAyNixcbiAgICAgICAgcG9zc2libGVNb25zdGVyczogW1xuICAgICAgICAgICAgJ2dvYmxpbicsXG4gICAgICAgICAgICAna29ib2xkJyxcbiAgICAgICAgICAgICdvcmMnLFxuICAgICAgICAgICAgJ2R3YXJmJyxcbiAgICAgICAgICAgICdtYW4nLFxuICAgICAgICAgICAgJ3Ryb2xsJyxcbiAgICAgICAgICAgICdlbGYnLFxuICAgICAgICAgICAgJ2RyYWdvbicsXG4gICAgICAgICAgICAnc25ha2UnLFxuICAgICAgICBdLFxuICAgIH0sXG5dO1xuXG5jb25zdCBJdGVtcyA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6ICdkYWdnZXInLFxuICAgICAgICBjaDogJ18nLFxuICAgICAgICBjb2w6ICcjZGZkJyxcbiAgICAgICAgc3BlZWQ6IDEwMCxcbiAgICAgICAgZG9tYWluczogWzEsIDIsIDUsIDZdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnbG9uZyBzd29yZCcsXG4gICAgICAgIGNoOiAnfScsXG4gICAgICAgIGNvbDogJyMyZjknLFxuICAgICAgICBzcGVlZDogMTAwLFxuICAgICAgICBkb21haW5zOiBbMSwgNSwgNSwgNl0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdrbmlmZScsXG4gICAgICAgIGNoOiAnLScsXG4gICAgICAgIGNvbDogJyMyZjknLFxuICAgICAgICBzcGVlZDogMTAwLFxuICAgICAgICBkb21haW5zOiBbMSwgNCwgNSwgNl0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdvcmMnLFxuICAgICAgICBjaDogJysnLFxuICAgICAgICBjb2w6ICcjMmY5JyxcbiAgICAgICAgc3BlZWQ6IDEwMCxcbiAgICAgICAgZG9tYWluczogWzMsIDQsIDUsIDZdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnb3JjJyxcbiAgICAgICAgY2g6ICcoJyxcbiAgICAgICAgY29sOiAnIzJmOScsXG4gICAgICAgIHNwZWVkOiAxMDAsXG4gICAgICAgIGRvbWFpbnM6IFszLCA0LCA1LCA2XSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ29yYycsXG4gICAgICAgIGNoOiAnKScsXG4gICAgICAgIGNvbDogJyMyZjknLFxuICAgICAgICBzcGVlZDogMTAwLFxuICAgICAgICBkb21haW5zOiBbMywgNCwgNSwgNl0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdvcmMnLFxuICAgICAgICBjaDogJyknLFxuICAgICAgICBjb2w6ICcjMmY5JyxcbiAgICAgICAgc3BlZWQ6IDEwMCxcbiAgICAgICAgZG9tYWluczogWzMsIDQsIDUsIDZdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnYmx1ZSBwb3Rpb24nLFxuICAgICAgICBjaDogJ18nLFxuICAgICAgICBjb2w6IENvbG9ycy5ibHVlLFxuICAgICAgICBzcGVlZDogMTAwLFxuICAgICAgICBkb21haW5zOiBbMSwgM10sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdwdXJwbGUgcG90aW9uJyxcbiAgICAgICAgY2g6ICdfJyxcbiAgICAgICAgY29sOiBDb2xvcnMucHVycGxlLFxuICAgICAgICBzcGVlZDogMTAwLFxuICAgICAgICBkb21haW5zOiBbMiwgMywgNCwgNV0sXG4gICAgfSxcbl07XG5cbmNvbnN0IFRleHRzID0ge1xuICAgIGVuOiB7XG4gICAgICAgIHF1b3RlczogW1xuICAgICAgICAgICAgYEhlIHdobyBmaWdodHMgbW9uc3RlcnMgbXVzdCB0YWtlIGNhcmUgbGVzdCBoZSB0aGVyZWJ5XG5iZWNvbWUgYSBtb25zdGVyYCxcbiAgICAgICAgICAgICdMaXZlIGZvciB0b2RheSwgZm9yIHRvbW9ycm93IG5ldmVyIGNvbWVzLicsXG4gICAgICAgICAgICAnQWx3YXlzIHdhdGNoIGFuZCBmb2xsb3cgbmF0dXJlJyxcbiAgICAgICAgICAgICdXaGVyZSBtYW55IGRpZSB0aGVyZSBpcyBubyBmZWFyIG9mIGRlYXRoJyxcbiAgICAgICAgICAgICdEZWNlaXQgc2xlZXBzIHdpdGggZ3JlZWQnLFxuICAgICAgICAgICAgJ1RoZXJlIGlzIG5vdGhpbmcgc2luaXN0ZXIgaW4gc29yY2VyeSwgb25seSBpbiB0aGUgaGVhcnRzIG9mIG1lbi4nLFxuICAgICAgICAgICAgJ09ubHkgaGUgd2hvIHdhbmRlcnMgY2FuIGZpbmQgbmV3IHBhdGhzLicsXG4gICAgICAgICAgICAnRGVhdGggYW5zd2VycyBiZWZvcmUgc2hlIGlzIGFza2VkLiAnLFxuICAgICAgICAgICAgJ1RoZSB3b3JsZCBuZWVkcyBtb3JlIGhlcm9lcy4nLFxuICAgICAgICAgICAgJ0JldHRlciB1bmxlYXJuZWQgYW5kIGJyaWdodCwgdGhhbiBlcnVkaXRlIGFuZCBmb29saXNoLicsXG4gICAgICAgICAgICAnQmV0dGVyIGdvIHdpdGhvdXQgaGVhbGluZywgdGhhbiBjYWxsIGZvciBhbiB1bnNraWxsZWQgaGVhbGVyLicsXG4gICAgICAgICAgICAnU2tpbGwgaXMgbm90IGEgaGVhdnkgbG9hZCB0byBjYXJyeS4nLFxuICAgICAgICAgICAgJ0V2ZW4gdGhlIGJlc3QgY2xpbWJlciBtYXkgZmFsbC4nLFxuICAgICAgICAgICAgJ1RoZXJlIGlzIG5vIGRlYXRoIGZvciB0aGUgaG9ub3JhYmxlLCBvbmx5IGEgY2hhbmdlIG9mIGJvZGllcy4nLFxuICAgICAgICAgICAgJ1N0cmFpZ2h0IGFoZWFkIGlzIGFsd2F5cyBzaG9ydGVzdCwgYnV0IG5vdCBhbHdheXMgYmVzdC4nLFxuICAgICAgICAgICAgJ1RoZSBza3kgaXMgbm8gbGVzcyBibHVlIG9ubHkgYmVjYXVzZSB0aGUgYmxpbmQgY2FuIG5vdCBzZWUgaXQuJyxcbiAgICAgICAgICAgICdEZWF0aCBzbWlsZXMgYXQgdXMgYWxsLiBBbGwgYSBtYW4gY2FuIGRvIGlzIHRvIHNtaWxlIGJhY2suJyxcbiAgICAgICAgICAgICdOb3doZXJlIGFyZSB0aGVyZSBtb3JlIGhpZGluZyBwbGFjZXMgdGhhbiBpbiB0aGUgaGVhcnQuJyxcbiAgICAgICAgICAgICdXaGF0IGlzIHRoZSB1c2Ugb2YgcnVubmluZyB3aGVuIHdlIGFyZSBub3Qgb24gdGhlIHJpZ2h0IHRyYWNrPycsXG4gICAgICAgICAgICAnV2hlbiBtZW4gc3BlYWsgaWxsIG9mIHlvdSwgbGl2ZSBzbyB0aGF0IG5vYm9keSB3aWxsIGJlbGlldmUgdGhlbS4nLFxuICAgICAgICAgICAgJ0V2ZXJ5dGhpbmcgd2UgaGVhciBpcyBhbiBvcGluaW9uLCBub3QgYSBmYWN0LiBFdmVyeXRoaW5nIHdlIHNlZSBpcyBhIHBlcnNwZWN0aXZlLCBub3QgdGhlIHRydXRoLicsXG4gICAgICAgICAgICAnSG9wZSBpcyB0aGUgZHJlYW1zIG9mIHRoZSBtYW4gYXdha2UuJyxcbiAgICAgICAgICAgICdIZSB3aG8gc3RhcnRzIGEgZmlnaHQgaGFkIGJldHRlciBkbyB0aGUgZmlnaHRpbmcgaGltc2VsZi4nLFxuICAgICAgICAgICAgJ0RvIG5vdCBjcnkgYmVmb3JlIHlvdSBhcmUgaHVydC4nLFxuICAgICAgICAgICAgJ0Nvd2FyZHMgbWF5IGRpZSBtYW55IHRpbWVzIGJlZm9yZSB0aGVpciBkZWF0aHMuJyxcbiAgICAgICAgICAgICdGZWFyIHRoZSByZWNrb25pbmcgb2YgdGhvc2UgeW91IGhhdmUgd3JvbmdlZC4nLFxuICAgICAgICAgICAgJ0hlIHdobyBiZWNvbWVzIGEgc2hlZXAgd2lsbCBiZSBlYXRlbiBieSB0aGUgd29sZi4nLFxuICAgICAgICAgICAgJ1RoZSBhcnQgb2YgbGl2aW5nIHdlbGwgYW5kIHRoZSBhcnQgb2YgZHlpbmcgd2VsbCBpcyBvbmUuJyxcbiAgICAgICAgICAgICdIZXJvaXNtIGNvbnNpc3RzIGluIGhhbmdpbmcgb24gb25lIG1pbnV0ZSBsb25nZXIuJyxcbiAgICAgICAgICAgICdNZW4gYnJhdmUgYW5kIGdlbmVyb3VzIGxpdmUgdGhlIGJlc3QgbGl2ZXMsIHNlbGRvbSB3aWxsIHRoZXkgc29ycm93OyB0aGVuIHRoZXJlIGFyZSBmb29scywgYWZyYWlkIG9mIGV2ZXJ5dGhpbmcsIHdobyBncnVtYmxlIGluc3RlYWQgb2YgZ2l2aW5nLicsXG4gICAgICAgIF0sXG4gICAgICAgIHBvZW1zOiBbXSxcbiAgICB9LFxuICAgIHJ1OiB7XG4gICAgICAgIHF1b3RlczogW1xuICAgICAgICAgICAgYEhlIHdobyBmaWdodHMgbW9uc3RlcnMgbXVzdCB0YWtlIGNhcmUgbGVzdCBoZSB0aGVyZWJ5XG5iZWNvbWUgYSBtb25zdGVyYCxcbiAgICAgICAgICAgICdMaXZlIGZvciB0b2RheSwgZm9yIHRvbW9ycm93IG5ldmVyIGNvbWVzLicsXG4gICAgICAgICAgICAnQWx3YXlzIHdhdGNoIGFuZCBmb2xsb3cgbmF0dXJlJyxcbiAgICAgICAgICAgICdXaGVyZSBtYW55IGRpZSB0aGVyZSBpcyBubyBmZWFyIG9mIGRlYXRoJyxcbiAgICAgICAgICAgICdEZWNlaXQgc2xlZXBzIHdpdGggZ3JlZWQnLFxuICAgICAgICBdLFxuICAgICAgICBwb2VtczogW10sXG4gICAgfSxcbn07XG5cbi8vIEJlZ2luIENPTU1BTkRTXG5cbmVudW0gQ29tbWFuZHMge1xuICAgIE1PVkVfVVAgPSAnTU9WRV9VUCcsXG4gICAgTU9WRV9SSUdIVCA9ICdNT1ZFX1JJR0hUJyxcbiAgICBNT1ZFX0RPV04gPSAnTU9WRV9ET1dOJyxcbiAgICBNT1ZFX0xFRlQgPSAnTU9WRV9MRUZUJyxcbiAgICBQSUNLX0lURU0gPSAnUElDS19JVEVNJyxcbiAgICBEUk9QX0lURU0gPSAnRFJPUF9JVEVNJyxcbiAgICBEUk9QX0xBU1RfSVRFTSA9ICdEUk9QX0xBU1RfSVRFTScsXG4gICAgUVVBRkYgPSAnUVVBRkYnLFxuICAgIE9QRU5fSU5WRU5UT1JZID0gJ09QRU5fSU5WRU5UT1JZJyxcbiAgICBXSUVMRCA9ICdXSUVMRCcsXG4gICAgVU5XSUVMRCA9ICdVTldJRUxEJyxcbiAgICBUSFJPVyA9ICdUSFJPVycsXG4gICAgSU5WT0tFID0gJ0lOVk9LRScsXG4gICAgUFJBWSA9ICdQUkFZJyxcbn1cblxuLy8gRW5kIENPTU1BTkRTXG5cbmNvbnN0IFNldHRpbmdzID0ge1xuICAgIHByb2dyYW1OYW1lOiAnZGFyYmFuZCcsXG4gICAgdmVyc2lvbjogJzAuMC4xJyxcbiAgICBkZWJ1ZzogdHJ1ZSxcbiAgICB0ZXN0OiBmYWxzZSxcbiAgICBtYXBXOiAzNixcbiAgICBtYXBIOiAxMyxcbiAgICB3aW5kb3dXOiAzNixcbiAgICB3aW5kb3dIOiAxNixcbiAgICBsb2dIZWlnaHQ6IDgsXG4gICAgbXNnOiB7XG4gICAgICAgIC8vIE1lc3NhZ2UgYm94IGxvY2F0aW9uXG4gICAgICAgIHg6IDUsXG4gICAgICAgIHk6IDAsXG4gICAgfSxcbiAgICBnYW1lOiB7XG4gICAgICAgIHdpbkxldmVsOiAwLFxuICAgICAgICBzdGFydExldmVsOiAxNixcbiAgICB9LFxuICAgIGtleWJpbmRpbmdzOiB7XG4gICAgICAgIFtDb21tYW5kcy5NT1ZFX1VQXTogJycsXG4gICAgICAgIFtDb21tYW5kcy5NT1ZFX1JJR0hUXTogJycsXG4gICAgICAgIFtDb21tYW5kcy5NT1ZFX0RPV05dOiAnJyxcbiAgICAgICAgW0NvbW1hbmRzLk1PVkVfTEVGVF06ICcnLFxuICAgICAgICBbQ29tbWFuZHMuUElDS19JVEVNXTogJycsXG4gICAgICAgIFtDb21tYW5kcy5EUk9QX0lURU1dOiAnJyxcbiAgICAgICAgW0NvbW1hbmRzLkRST1BfTEFTVF9JVEVNXTogJycsXG4gICAgICAgIFtDb21tYW5kcy5RVUFGRl06ICcnLFxuICAgICAgICBbQ29tbWFuZHMuT1BFTl9JTlZFTlRPUlldOiAnJyxcbiAgICAgICAgW0NvbW1hbmRzLldJRUxEXTogJycsXG4gICAgICAgIFtDb21tYW5kcy5VTldJRUxEXTogJycsXG4gICAgICAgIFtDb21tYW5kcy5USFJPV106ICcnLFxuICAgICAgICBbQ29tbWFuZHMuSU5WT0tFXTogJycsXG4gICAgICAgIFtDb21tYW5kcy5QUkFZXTogJycsXG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IFNldHRpbmdzLCBDb2xvcnMsIExldmVscywgSXRlbXMsIFRleHRzIH07XG4iLCJpbXBvcnQgeyBBY3RvciwgQUksIExpZmUgfSBmcm9tICcuL0FjdG9yJztcbmltcG9ydCB7IEdhbWUgfSBmcm9tICcuL0dhbWUnO1xuaW1wb3J0IHsgVGlsZSB9IGZyb20gJy4vVGlsZSc7XG5cbmV4cG9ydCBjbGFzcyBNb25zdGVyIGV4dGVuZHMgQWN0b3Ige1xuICAgIHB1YmxpYyBhaTogQUk7XG4gICAgcHVibGljIGxpZmU6IExpZmU7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBuYW1lOiBzdHJpbmcsXG4gICAgICAgIHNwcml0ZTogbnVtYmVyLFxuICAgICAgICB0aWxlOiBUaWxlLFxuICAgICAgICBkb21haW5zOiBBcnJheTxudW1iZXI+LFxuICAgICAgICBtYXhIUCA9IDEwMCxcbiAgICAgICAgbGlmZT86IExpZmUsXG4gICAgICAgIGFpPzogQUksXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKG5hbWUsIHRpbGUsIHNwcml0ZSk7XG4gICAgICAgIHRoaXMubGlmZSA9IGxpZmUgPz8gbmV3IFNpbXBsZUxpZmUodGhpcywgbWF4SFApO1xuICAgICAgICB0aGlzLmFpID0gYWkgPz8gbmV3IE1vdmVBbmRBdHRhY2tBSSh0aGlzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuZHJhdygpO1xuICAgICAgICB0aGlzLmRyYXdIUCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3SFAoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHRpbGVTaXplID0gdGhpcy5nYW1lLnJlbmRlcmVyLm9wdGlvbnMudGlsZVNpemU7XG4gICAgICAgIGNvbnN0IGhwUGVyY2VudGFnZSA9ICh0aGlzLmxpZmU/LmhwID8/IDApIC8gKHRoaXMubGlmZT8ubWF4SHAgPz8gMSk7XG4gICAgICAgIGNvbnN0IGdyZWVuTGVuZ3RoID0gdGlsZVNpemUgKiBocFBlcmNlbnRhZ2U7XG4gICAgICAgIGNvbnN0IHJlZExlbmd0aCA9IHRpbGVTaXplIC0gZ3JlZW5MZW5ndGg7XG4gICAgICAgIGNvbnN0IGhwTGluZUhlaWdodCA9IDI7XG4gICAgICAgIHRoaXMuZ2FtZS5yZW5kZXJlci5kcmF3UmVjdChcbiAgICAgICAgICAgICdsaW1lJyxcbiAgICAgICAgICAgIHRoaXMuZ2V0RGlzcGxheVgoKSAqIHRpbGVTaXplLFxuICAgICAgICAgICAgdGhpcy5nZXREaXNwbGF5WSgpICogdGlsZVNpemUgKyB0aWxlU2l6ZSAtIGhwTGluZUhlaWdodCxcbiAgICAgICAgICAgIGdyZWVuTGVuZ3RoLFxuICAgICAgICAgICAgaHBMaW5lSGVpZ2h0LFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmdhbWUucmVuZGVyZXIuZHJhd1JlY3QoXG4gICAgICAgICAgICAncmVkJyxcbiAgICAgICAgICAgIHRoaXMuZ2V0RGlzcGxheVgoKSAqIHRpbGVTaXplICsgZ3JlZW5MZW5ndGgsXG4gICAgICAgICAgICB0aGlzLmdldERpc3BsYXlZKCkgKiB0aWxlU2l6ZSArIHRpbGVTaXplIC0gaHBMaW5lSGVpZ2h0LFxuICAgICAgICAgICAgcmVkTGVuZ3RoLFxuICAgICAgICAgICAgaHBMaW5lSGVpZ2h0LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cnlNb3ZlKGR4OiBudW1iZXIsIGR5OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgbmV3VGlsZSA9IHRoaXMudGlsZS5nZXROZWlnaGJvcihkeCwgZHkpO1xuICAgICAgICBpZiAobmV3VGlsZS5wYXNzYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0TW92ZSA9IHsgeDogZHgsIHk6IGR5IH07XG4gICAgICAgICAgICBpZiAobmV3VGlsZS5tb25zdGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlKG5ld1RpbGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzUGxheWVyICE9PSBuZXdUaWxlLm1vbnN0ZXIuaXNQbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5haSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWkuYXR0YWNrQ291bnRUaGlzVHVybisrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdUaWxlLm1vbnN0ZXIuc3R1bm5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnVpLm1zZyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgICAgICAgICBgJHt0aGlzLm5hbWV9IHN0dW5zICR7bmV3VGlsZS5tb25zdGVyLm5hbWV9YCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEdldCBhY3R1YWwgZGFtYWdlIHZhbHVlIGZyb20gdGhlIGRlYWxlciB0YWtpbmcgaW50byBhY2NvdW50XG4gICAgICAgICAgICAgICAgLy8gc3RhdHMsIGRlZmVuY2UsIGV0Yy5cbiAgICAgICAgICAgICAgICBjb25zdCBwb3dlciA9IDEwO1xuXG4gICAgICAgICAgICAgICAgbmV3VGlsZS5tb25zdGVyLmxpZmU/LnRha2VEYW1hZ2UodGhpcywgcG93ZXIsIFtdKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLm9mZnNldFggPSAobmV3VGlsZS54IC0gdGhpcy50aWxlLngpIC8gMjtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5vZmZzZXRZID0gKG5ld1RpbGUueSAtIHRoaXMudGlsZS55KSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIG1vdmUobmV3VGlsZTogVGlsZSk6IHZvaWQge1xuICAgICAgICB0aGlzLmdhbWUudWkubXNnKFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgYCR7dGhpcy5uYW1lfSAke3RoaXMuaXNQbGF5ZXIgPyAnbW92ZScgOiAnbW92ZXMnfSB0byAke1xuICAgICAgICAgICAgICAgIG5ld1RpbGUueFxuICAgICAgICAgICAgfSwgJHtuZXdUaWxlLnl9YCxcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRpbGUgPSB0aGlzLmdldFRpbGUoKTtcbiAgICAgICAgY3VycmVudFRpbGUubW9uc3RlciA9IG51bGw7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLm9mZnNldFggPSBjdXJyZW50VGlsZS54IC0gbmV3VGlsZS54O1xuICAgICAgICB0aGlzLmFuaW1hdGlvbi5vZmZzZXRZID0gY3VycmVudFRpbGUueSAtIG5ld1RpbGUueTtcblxuICAgICAgICB0aGlzLnRpbGUgPSBuZXdUaWxlO1xuICAgICAgICBuZXdUaWxlLm1vbnN0ZXIgPSB0aGlzO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEdvYmxpbiBleHRlbmRzIE1vbnN0ZXIge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0aWxlOiBUaWxlKSB7XG4gICAgICAgIHN1cGVyKCdnb2JsaW4nLCAxMiwgdGlsZSwgWzAsIDEsIDJdLCA5NSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgS29ib2xkIGV4dGVuZHMgTW9uc3RlciB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgc3VwZXIoJ2tvYm9sZCcsIDE1LCB0aWxlLCBbMCwgMSwgMl0sIDEyNSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgT3JjIGV4dGVuZHMgTW9uc3RlciB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgc3VwZXIoJ29yYycsIDE0LCB0aWxlLCBbMCwgMSwgMiwgM10sIDExNSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgV29sZiBleHRlbmRzIE1vbnN0ZXIge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0aWxlOiBUaWxlKSB7XG4gICAgICAgIHN1cGVyKCd3b2xmJywgMTEsIHRpbGUsIFswLCAxLCAyLCAzLCA0XSwgOTUpO1xuICAgICAgICB0aGlzLmFpID0gbmV3IENvbmZ1c2VkQUkodGhpcyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRHdhcmYgZXh0ZW5kcyBNb25zdGVyIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodGlsZTogVGlsZSkge1xuICAgICAgICBzdXBlcignZHdhcmYnLCAxOSwgdGlsZSwgWzcsIDgsIDksIDEwLCAxMSwgMTJdLCAxMjApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1hbiBleHRlbmRzIE1vbnN0ZXIge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0aWxlOiBUaWxlKSB7XG4gICAgICAgIHN1cGVyKCdtYW4nLCAxNiwgdGlsZSwgWzMsIDQsIDVdLCAxMDApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRyb2xsIGV4dGVuZHMgTW9uc3RlciB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgc3VwZXIoJ3Ryb2xsJywgMTcsIHRpbGUsIFszLCA0XSwgMTYwKTtcbiAgICAgICAgdGhpcy5haSA9IG5ldyBTbG93QUkodGhpcyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRWxmIGV4dGVuZHMgTW9uc3RlciB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgc3VwZXIoJ2VsZicsIDE4LCB0aWxlLCBbMCwgMSwgMl0sIDE1MCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRHJhZ29uIGV4dGVuZHMgTW9uc3RlciB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgc3VwZXIoJ2RyYWdvbicsIDMsIHRpbGUsIFsxMCwgMTEsIDEyLCAxMywgMTQsIDE1XSwgMjUwLCB1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLmFpID0gbmV3IENvbnN1bWVyQUkodGhpcyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU25ha2UgZXh0ZW5kcyBNb25zdGVyIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodGlsZTogVGlsZSkge1xuICAgICAgICBzdXBlcignc25ha2UnLCAxMywgdGlsZSwgWzcsIDgsIDldLCAxNSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTW9uc3RlcjxNIGV4dGVuZHMgTW9uc3Rlcj4oXG4gICAgYWN0b3JDbGFzczogbmV3ICh0aWxlOiBUaWxlKSA9PiBNLFxuKTogTSB7XG4gICAgY29uc3QgcmFuZG9tVGlsZSA9IEdhbWUuZ2V0SW5zdGFuY2UoKS5nZXRSYW5kb21QYXNzYWJsZVRpbGUoKTtcbiAgICByZXR1cm4gbmV3IGFjdG9yQ2xhc3MocmFuZG9tVGlsZSk7XG59XG5cbmV4cG9ydCBjbGFzcyBTaW1wbGVMaWZlIGV4dGVuZHMgTGlmZSB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGFjdG9yOiBBY3RvciwgbWF4SFAgPSAxMDApIHtcbiAgICAgICAgc3VwZXIobWF4SFAsIG1heEhQLCAyLCBhY3Rvcik7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTW92ZUFuZEF0dGFja0FJIGV4dGVuZHMgQUkge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihhY3RvcjogTW9uc3Rlcikge1xuICAgICAgICBzdXBlcihhY3Rvcik7XG4gICAgfVxuXG4gICAgcHVibGljIGFjdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hdHRhY2tDb3VudFRoaXNUdXJuID0gMDtcbiAgICAgICAgc3VwZXIuYWN0KCk7XG5cbiAgICAgICAgaWYgKHRoaXMuYXR0YWNrQ291bnRUaGlzVHVybiA9PT0gMCkge1xuICAgICAgICAgICAgc3VwZXIuYWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTbG93QUkgZXh0ZW5kcyBBSSB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKG1vbnN0ZXI6IE1vbnN0ZXIsIHB1YmxpYyBzcGVlZCA9IDUpIHtcbiAgICAgICAgc3VwZXIobW9uc3Rlcik7XG4gICAgfVxuXG4gICAgcHVibGljIGFjdCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc3RhcnRlZFN0dW5uZWQgPSB0aGlzLm1vbnN0ZXIuc3R1bm5lZDtcbiAgICAgICAgc3VwZXIuYWN0KCk7XG4gICAgICAgIGlmICghc3RhcnRlZFN0dW5uZWQpIHtcbiAgICAgICAgICAgIHRoaXMubW9uc3Rlci5zdHVubmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS51aS5tc2codGhpcy5nYW1lLCBgJHt0aGlzLm1vbnN0ZXIubmFtZX0gaXMgc3R1bm5lZGApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBXaGVuIGxvdyBvbiBocCwgbW9uc3RlcnMgb2YgdGhpcyBraW5kIGNhbiBlYXQgb3RoZXIgbW9uc3RlcnMgdGhhdCBhcmUgbm8gbW9yZVxuLy8gdGhhbiBoYWxmIG9mIGl0cyBzaXplIGluIG9yZGVyIGRvIHJlc3RvcmUgaHBcbmV4cG9ydCBjbGFzcyBDb25zdW1lckFJIGV4dGVuZHMgQUkge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihhY3RvcjogTW9uc3Rlcikge1xuICAgICAgICBzdXBlcihhY3Rvcik7XG4gICAgfVxuXG4gICAgcHVibGljIGVhdChhY3RvcjogTW9uc3Rlcik6IGJvb2xlYW4ge1xuICAgICAgICBhY3Rvci5saWZlPy5kaWUoKTtcbiAgICAgICAgY29uc3QgcG9pbnRzSGVhbGVkID0gdGhpcy5tb25zdGVyLmxpZmUuaGVhbChhY3Rvci5saWZlPy5tYXhIcCAvIDIpO1xuICAgICAgICB0aGlzLmdhbWUudWkubXNnKFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgYCR7dGhpcy5tb25zdGVyLm5hbWV9IGhlYWxzIGJ5ICR7cG9pbnRzSGVhbGVkfSBieSBlYXRpbmcgJHthY3Rvci5uYW1lfWAsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZ2FtZS5hbmltYXRpb24uc2hha2VBbW91bnQgPSA1O1xuICAgICAgICByZXR1cm4gcG9pbnRzSGVhbGVkID4gMDtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHRoaXMgYmVoYXZpb3VyIHBvc3NpYmxlIHRvIGF0dGFjaCB0byBvdGhlciB0eXBlcyBvZiBhY3RvcnNcbiAgICBwdWJsaWMgYWN0KCk6IHZvaWQge1xuICAgICAgICBzdXBlci5hY3QoKTtcbiAgICAgICAgaWYgKHRoaXMubW9uc3Rlci5saWZlLmhwIDwgdGhpcy5tb25zdGVyLmxpZmUubWF4SHAgKiAwLjc1KSB7XG4gICAgICAgICAgICBjb25zdCBzbWFsbE1vbnN0ZXJzID0gdGhpcy5nYW1lLm1vbnN0ZXJzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgKHQpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmxpZmUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdC5saWZlLm1heEhwIDwgdGhpcy5tb25zdGVyLmxpZmUubWF4SHAgLyAyLFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuc29ydChcbiAgICAgICAgICAgICAgICAgICAgKGEsIGIpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBhLnRpbGUuZGlzdGFuY2UodGhpcy5tb25zdGVyLnRpbGUpIC1cbiAgICAgICAgICAgICAgICAgICAgICAgIGIudGlsZS5kaXN0YW5jZSh0aGlzLm1vbnN0ZXIudGlsZSksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMucHVyc3VlKHNtYWxsTW9uc3RlcnNbMF0pO1xuICAgICAgICAgICAgY29uc3QgbmVpZ2hib3JzID0gdGhpcy5tb25zdGVyLnRpbGVcbiAgICAgICAgICAgICAgICAuZ2V0QWRqYWNlbnRBY3RvcnM8TW9uc3Rlcj4oKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICh0KSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgdC5saWZlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHQubGlmZS5tYXhIcCA8IHRoaXMubW9uc3Rlci5saWZlLm1heEhwIC8gMixcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKG5laWdoYm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lYXQobmVpZ2hib3JzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHVyc3VlKHRoaXMuZ2FtZS5wbGF5ZXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29uZnVzZWRBSSBleHRlbmRzIEFJIHtcbiAgICBwdWJsaWMgYWN0KCk6IHZvaWQge1xuICAgICAgICBjb25zdCBuZWlnaGJvcnMgPSB0aGlzLm1vbnN0ZXIudGlsZS5nZXRBZGphY2VudFBhc3NhYmxlVGlsZXMoKTtcbiAgICAgICAgaWYgKG5laWdoYm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBkeCA9IG5laWdoYm9yc1swXS54IC0gdGhpcy5tb25zdGVyLnRpbGUueDtcbiAgICAgICAgICAgIGNvbnN0IGR5ID0gbmVpZ2hib3JzWzBdLnkgLSB0aGlzLm1vbnN0ZXIudGlsZS55O1xuICAgICAgICAgICAgdGhpcy5tb25zdGVyLnRyeU1vdmUoZHgsIGR5KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbG9ycyB9IGZyb20gJy4vRGF0YSc7XG5pbXBvcnQgeyBHYW1lIH0gZnJvbSAnLi9HYW1lJztcbmltcG9ydCB7IEl0ZW0gfSBmcm9tICcuL0l0ZW0nO1xuaW1wb3J0IHsgQW5pbWF0aW9uLCBQb3NPbk1hcCB9IGZyb20gJy4vbGliL0ludGVyZmFjZXMnO1xuaW1wb3J0IHsgQ29uZnVzZWRBSSwgTW9uc3RlciB9IGZyb20gJy4vTW9uc3Rlcic7XG5pbXBvcnQgeyBUaWxlIH0gZnJvbSAnLi9UaWxlJztcbmltcG9ydCB7IE1vZGlmaWVyLCBXZWFwb24gfSBmcm9tICcuL1dlYXBvbic7XG5cbmV4cG9ydCBjbGFzcyBMaWZlIHtcbiAgICBwdWJsaWMgaHA6IG51bWJlcjtcbiAgICBwdWJsaWMgbWF4SHA6IG51bWJlcjtcbiAgICBwdWJsaWMgZGVmZW5jZTogbnVtYmVyO1xuICAgIHByaXZhdGUgZ2FtZTogR2FtZTtcbiAgICBwcml2YXRlIGFjdG9yOiBBY3RvcjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgICAgaHA6IG51bWJlcixcbiAgICAgICAgbWF4SHA6IG51bWJlcixcbiAgICAgICAgZGVmZW5jZTogbnVtYmVyLFxuICAgICAgICBhY3RvcjogQWN0b3IsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IEdhbWUuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgdGhpcy5ocCA9IGhwO1xuICAgICAgICB0aGlzLm1heEhwID0gbWF4SHA7XG4gICAgICAgIHRoaXMuZGVmZW5jZSA9IGRlZmVuY2U7XG4gICAgICAgIHRoaXMuYWN0b3IgPSBhY3RvcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGllKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmhwID0gMDtcbiAgICAgICAgdGhpcy5hY3Rvci5nZXRUaWxlKCkubW9uc3RlciA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLmFjdG9yLmlzUGxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUudWkubXNnKHRoaXMuZ2FtZSwgJ1lvdSBkaWUuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUudWkubXNnKHRoaXMuZ2FtZSwgYCR7dGhpcy5hY3Rvci5nZXROYW1lKCl9IGRpZXNgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBpc0FsaXZlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5ocCA+IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGFrZSB2YWx1ZSBkYW1hZ2UgZnJvbSBkZWFsZXIsIGkuZSBzdWJ0cmFjdCB2YWx1ZSBmcm9tIHRoZSBkZWFsZXIuXG4gICAgICovXG4gICAgcHVibGljIHRha2VEYW1hZ2UoXG4gICAgICAgIGRlYWxlcjogQWN0b3IsXG4gICAgICAgIHZhbHVlOiBudW1iZXIsXG4gICAgICAgIG1vZGlmaWVycz86IE1vZGlmaWVyW10sXG4gICAgICAgIHdlYXBvbj86IFdlYXBvbixcbiAgICApOiBudW1iZXIge1xuICAgICAgICBsZXQgZGFtYWdlVGFrZW4gPSB2YWx1ZTtcblxuICAgICAgICBpZiAoIWRlYWxlciB8fCAhdGhpcy5pc0FsaXZlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYW1hZ2VUYWtlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3ZWFwb24pIHtcbiAgICAgICAgICAgIGRhbWFnZVRha2VuID0gd2VhcG9uLnBvd2VyIC0gdGhpcy5kZWZlbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vZGlmaWVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkYW1hZ2VUYWtlbiA9IG1vZGlmaWVycy5yZWR1Y2UoXG4gICAgICAgICAgICAgICAgKHByZXYsIGN1cnJlbnQpID0+IHByZXYgKyBjdXJyZW50LnZhbHVlLFxuICAgICAgICAgICAgICAgIGRhbWFnZVRha2VuLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhwQmVmb3JlQXR0YWNrID0gdGhpcy5ocDtcbiAgICAgICAgdGhpcy5ocCA9IE1hdGgubWF4KDAsIHRoaXMuaHAgLSBkYW1hZ2VUYWtlbik7XG4gICAgICAgIGlmICh0aGlzLmhwIDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGllKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdhbWUudWkubXNnKFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgYCR7ZGVhbGVyLmdldE5hbWUoKX0gYXR0YWNrcyAke3RoaXMuYWN0b3IuZ2V0TmFtZSgpfSBmb3IgJHtkYW1hZ2VUYWtlbn0uIFdhcyAke2hwQmVmb3JlQXR0YWNrfSBpcyAke1xuICAgICAgICAgICAgICAgIHRoaXMuaHBcbiAgICAgICAgICAgIH1gLFxuICAgICAgICAgICAgQ29sb3JzLnJlZCxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gZGFtYWdlVGFrZW47XG4gICAgfVxuXG4gICAgcHVibGljIGhlYWwoaHA6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHRoaXMuaHAgPSBNYXRoLm1pbih0aGlzLm1heEhwLCB0aGlzLmhwICsgaHApO1xuICAgICAgICB0aGlzLmdhbWUudWkubXNnKHRoaXMuZ2FtZSwgYCR7dGhpcy5hY3Rvci5uYW1lfSBoZWFscyBieSAke2hwfWApO1xuICAgICAgICByZXR1cm4gaHA7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW52ZW50b3J5IHtcbiAgICBwcml2YXRlIGdhbWU6IEdhbWU7XG4gICAgcHJpdmF0ZSB3ZWFwb24/OiBXZWFwb247XG4gICAgcHJpdmF0ZSBpdGVtczogSXRlbVtdO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmdhbWUgPSBHYW1lLmdldEluc3RhbmNlKCk7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q3VycmVudFdlYXBvbigpOiBXZWFwb24gfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWFwb247XG4gICAgfVxuXG4gICAgcHVibGljIHBpY2tJdGVtKGl0ZW06IEl0ZW0pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pdGVtcy5wdXNoKGl0ZW0pO1xuICAgIH1cbn1cblxuY2xhc3MgUXVlc3Qge1xuICAgIHB1YmxpYyBnZXROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ1NvbWUgcXVlc3QnO1xuICAgIH1cbn1cblxuaW50ZXJmYWNlIFNraWxsIHtcbiAgICB2YWx1ZTogbnVtYmVyO1xuICAgIG5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgU2tpbGxzID0geyBba2V5OiBzdHJpbmddOiBudW1iZXIgfTtcblxuZXhwb3J0IGNsYXNzIEFJIHtcbiAgICBwdWJsaWMgZ2FtZTogR2FtZTtcbiAgICBwdWJsaWMgc2tpbGxzOiBTa2lsbHM7XG4gICAgcHJpdmF0ZSBxdWVzdHM6IFF1ZXN0W107XG4gICAgcHJpdmF0ZSB4cDogbnVtYmVyO1xuICAgIHByaXZhdGUgeHBMZXZlbDogbnVtYmVyO1xuICAgIHB1YmxpYyBhdHRhY2tDb3VudFRoaXNUdXJuID0gMDtcbiAgICBwdWJsaWMgcHVyc3Vpbmc6IEFjdG9yIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgbW9uc3RlcjogTW9uc3RlcixcbiAgICAgICAgc2tpbGxzOiBTa2lsbHMgPSB7fSxcbiAgICAgICAgcXVlc3RzOiBBcnJheTxRdWVzdD4gPSBbXSxcbiAgICAgICAgeHAgPSAxMCxcbiAgICApIHtcbiAgICAgICAgdGhpcy5nYW1lID0gR2FtZS5nZXRJbnN0YW5jZSgpO1xuICAgICAgICB0aGlzLnNraWxscyA9IHNraWxscztcbiAgICAgICAgdGhpcy5xdWVzdHMgPSBxdWVzdHM7XG4gICAgICAgIHRoaXMueHAgPSB4cDtcbiAgICAgICAgdGhpcy54cExldmVsID0gMDtcbiAgICAgICAgdGhpcy5wdXJzdWUodGhpcy5nYW1lLnBsYXllcik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNraWxscygpOiBTa2lsbHMge1xuICAgICAgICByZXR1cm4gdGhpcy5za2lsbHM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFF1ZXN0cygpOiBBcnJheTxRdWVzdD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWVzdHM7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFF1ZXN0KHF1ZXN0OiBRdWVzdCk6IHZvaWQge1xuICAgICAgICB0aGlzLnF1ZXN0cy5wdXNoKHF1ZXN0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWN0KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5tb25zdGVyLnN0dW5uZWQpIHtcbiAgICAgICAgICAgIHRoaXMubW9uc3Rlci5zdHVubmVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmdhbWUudWkubXNnKFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICBgJHt0aGlzLm1vbnN0ZXIubmFtZX0gaXMgbm8gbG9uZ2VyIHN0dW5uZWRgLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRvd2FyZFB1cnN1ZWRBY3RvcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBwdXJzdWUoYWN0b3I6IEFjdG9yKTogdm9pZCB7XG4gICAgICAgIHRoaXMucHVyc3VpbmcgPSBhY3RvcjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdG93YXJkUHVyc3VlZEFjdG9yKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5wdXJzdWluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5laWdoYm9ycyA9IHRoaXMubW9uc3Rlci5nZXRBZGphY2VudFRpbGVzKCk7XG5cbiAgICAgICAgbmVpZ2hib3JzID0gbmVpZ2hib3JzLmZpbHRlcigodCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWN0b3JzID0gdC5nZXRBY3RvcnNPblRoaXMoKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgYWN0b3JzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgIGFjdG9ycy5maWx0ZXIoKGEpID0+IGEuaXNQbGF5ZXIpLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChuZWlnaGJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcHVyc3VlZEFjdG9yVGlsZSA9IHRoaXMucHVyc3VpbmcuZ2V0VGlsZSgpO1xuICAgICAgICAgICAgbmVpZ2hib3JzLnNvcnQoXG4gICAgICAgICAgICAgICAgKGEsIGIpID0+XG4gICAgICAgICAgICAgICAgICAgIGEuZGlzdGFuY2UocHVyc3VlZEFjdG9yVGlsZSkgLSBiLmRpc3RhbmNlKHB1cnN1ZWRBY3RvclRpbGUpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1RpbGUgPSBuZWlnaGJvcnNbMF07XG4gICAgICAgICAgICB0aGlzLm1vbnN0ZXIudHJ5TW92ZShcbiAgICAgICAgICAgICAgICBuZXdUaWxlLnggLSB0aGlzLm1vbnN0ZXIudGlsZS54LFxuICAgICAgICAgICAgICAgIG5ld1RpbGUueSAtIHRoaXMubW9uc3Rlci50aWxlLnksXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRWZmZWN0IHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBhY3RvcjogQWN0b3IsXG4gICAgICAgIHB1YmxpYyB0dXJuc0xlZnQ6IG51bWJlciA9IDUsXG4gICAgICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSAnJyxcbiAgICAgICAgcHVibGljIG9uRXhwaXJlZD86ICgpID0+IHZvaWQsXG4gICAgKSB7fVxuXG4gICAgcHJpdmF0ZSByZW5kZXJPbk1hcCgpIHtcbiAgICAgICAgLyogbm9vcCAqL1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyT25VSSgpIHtcbiAgICAgICAgLyogbm9vcCAqL1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudHVybnNMZWZ0IC09IDE7XG4gICAgICAgIGlmICh0aGlzLnR1cm5zTGVmdCA8PSAwICYmIHRoaXMub25FeHBpcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMub25FeHBpcmVkKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25mdXNpb25FZmZlY3QgZXh0ZW5kcyBFZmZlY3Qge1xuICAgIHByaXZhdGUgb2xkQUk6IEFJO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKG1vbnN0ZXI6IE1vbnN0ZXIpIHtcbiAgICAgICAgc3VwZXIobW9uc3RlciwgNSk7XG4gICAgICAgIHRoaXMub2xkQUkgPSBtb25zdGVyLmFpO1xuICAgICAgICB0aGlzLm9uRXhwaXJlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIG1vbnN0ZXIuYWkgPSB0aGlzLm9sZEFJO1xuICAgICAgICAgICAgbW9uc3Rlci5nYW1lLnVpLm1zZyhcbiAgICAgICAgICAgICAgICBtb25zdGVyLmdhbWUsXG4gICAgICAgICAgICAgICAgYCR7bW9uc3Rlci5uYW1lfSBpcyBubyBsb25nZXIgY29uZnVzZWRgLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICAgICAgbW9uc3Rlci5haSA9IG5ldyBDb25mdXNlZEFJKFxuICAgICAgICAgICAgbW9uc3RlcixcbiAgICAgICAgICAgIHRoaXMub2xkQUkuc2tpbGxzLFxuICAgICAgICAgICAgdGhpcy5vbGRBSS5nZXRRdWVzdHMoKSxcbiAgICAgICAgKTtcblxuICAgICAgICBtb25zdGVyLmdhbWUudWkubXNnKG1vbnN0ZXIuZ2FtZSwgYCR7bW9uc3Rlci5uYW1lfSBpcyBub3cgY29uZnVzZWRgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBY3RvciB7XG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgc3ByaXRlPzogbnVtYmVyO1xuICAgIHB1YmxpYyB0aWxlOiBUaWxlO1xuICAgIHB1YmxpYyBpc1BsYXllciA9IGZhbHNlO1xuICAgIHB1YmxpYyBnYW1lOiBHYW1lO1xuICAgIHB1YmxpYyBsaWZlPzogTGlmZTtcbiAgICBwdWJsaWMgaW52ZW50b3J5PzogSW52ZW50b3J5O1xuICAgIHB1YmxpYyBhaT86IEFJO1xuICAgIHB1YmxpYyBkb21haW5zPzogUmVhZG9ubHlBcnJheTxudW1iZXI+O1xuICAgIHB1YmxpYyBzdHVubmVkID0gZmFsc2U7XG4gICAgcHJvdGVjdGVkIGFuaW1hdGlvbjogQW5pbWF0aW9uO1xuICAgIHB1YmxpYyBlZmZlY3RzOiBBcnJheTxFZmZlY3Q+O1xuICAgIHB1YmxpYyBsYXN0TW92ZTogUG9zT25NYXA7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgICAgdGlsZTogVGlsZSxcbiAgICAgICAgc3ByaXRlOiBudW1iZXIsXG4gICAgICAgIGxpZmU/OiBMaWZlLFxuICAgICAgICBhaT86IEFJLFxuICAgICAgICBkb21haW5zPzogUmVhZG9ubHlBcnJheTxudW1iZXI+LFxuICAgICkge1xuICAgICAgICB0aGlzLmdhbWUgPSBHYW1lLmdldEluc3RhbmNlKCk7XG4gICAgICAgIHRoaXMudGlsZSA9IHRpbGU7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWUgPz8gJ1VubmFtZWQgbW9uc3Rlcic7XG4gICAgICAgIHRoaXMuc3ByaXRlID0gc3ByaXRlO1xuICAgICAgICB0aGlzLmRvbWFpbnMgPSBkb21haW5zO1xuICAgICAgICB0aGlzLmxhc3RNb3ZlID0geyB4OiAtMSwgeTogMCB9O1xuICAgICAgICB0aGlzLmVmZmVjdHMgPSBbXTtcblxuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IHtcbiAgICAgICAgICAgIG9mZnNldFg6IDAsXG4gICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgZWZmZWN0Q291bnRlcjogMCxcbiAgICAgICAgICAgIHNoYWtlQW1vdW50OiAwLFxuICAgICAgICAgICAgc2hha2VYOiAwLFxuICAgICAgICAgICAgc2hha2VZOiAwLFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChsaWZlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMubGlmZSA9IGxpZmU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5haSA9IGFpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VGlsZSgpOiBUaWxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkRWZmZWN0KGVmZmVjdENsYXNzOiB0eXBlb2YgRWZmZWN0KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IG5ldyBlZmZlY3RDbGFzcyh0aGlzKTtcbiAgICAgICAgdGhpcy5lZmZlY3RzLnB1c2goZWZmZWN0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RGlzcGxheVgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZS54ICsgdGhpcy5hbmltYXRpb24ub2Zmc2V0WDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RGlzcGxheVkoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZS55ICsgdGhpcy5hbmltYXRpb24ub2Zmc2V0WTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmdhbWUudWkubXNnKFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgYCR7dGhpcy5uYW1lfSAke3RoaXMuc3R1bm5lZCA/ICdpcycgOiAnaXMgTk9UJ30gc3R1bm5lZGAsXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHRoaXMuYWkpIHtcbiAgICAgICAgICAgIHRoaXMuYWkuYWN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5lZmZlY3RzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCBlZmZlY3QgPSB0aGlzLmVmZmVjdHNbaV07XG4gICAgICAgICAgICBlZmZlY3QudXBkYXRlKCk7XG4gICAgICAgICAgICBpZiAoZWZmZWN0LnR1cm5zTGVmdCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVmZmVjdC5vbkV4cGlyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVmZmVjdHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zcHJpdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5nYW1lLnJlbmRlcmVyLmRyYXdTcHJpdGUoXG4gICAgICAgICAgICAgICAgdGhpcy5zcHJpdGUsXG4gICAgICAgICAgICAgICAgdGhpcy5nZXREaXNwbGF5WCgpLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0RGlzcGxheVkoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuYW5pbWF0aW9uLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLm9mZnNldFggLT0gTWF0aC5zaWduKHRoaXMuYW5pbWF0aW9uLm9mZnNldFgpICogKDEgLyA4KTtcbiAgICAgICAgdGhpcy5hbmltYXRpb24ub2Zmc2V0WSAtPSBNYXRoLnNpZ24odGhpcy5hbmltYXRpb24ub2Zmc2V0WSkgKiAoMSAvIDgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBZGphY2VudFRpbGVzKCk6IEFycmF5PFRpbGU+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZVxuICAgICAgICAgICAgLmdldFRpbGUodGhpcy50aWxlLngsIHRoaXMudGlsZS55KVxuICAgICAgICAgICAgLmdldEFkamFjZW50UGFzc2FibGVUaWxlcygpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFdpemFyZExpZmUgZXh0ZW5kcyBMaWZlIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoYWN0b3I6IEFjdG9yLCBtYXhIUCA9IDIwMCkge1xuICAgICAgICBzdXBlcihtYXhIUCwgbWF4SFAsIDMsIGFjdG9yKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBMaWZlLCBXaXphcmRMaWZlIH0gZnJvbSAnLi9BY3Rvcic7XG5pbXBvcnQgeyBNb25zdGVyIH0gZnJvbSAnLi9Nb25zdGVyJztcbmltcG9ydCB7IFRpbGUgfSBmcm9tICcuL1RpbGUnO1xuXG5leHBvcnQgY2xhc3MgUGxheWVyIGV4dGVuZHMgTW9uc3RlciB7XG4gICAgcHVibGljIGxpZmU6IExpZmU7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgc3VwZXIoJ1lvdScsIDAsIHRpbGUsIFtdKTtcbiAgICAgICAgdGhpcy5saWZlID0gbmV3IFdpemFyZExpZmUodGhpcywgMTAwMCk7XG4gICAgICAgIHRoaXMuaXNQbGF5ZXIgPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cnlNb3ZlKGR4OiBudW1iZXIsIGR5OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHN1cGVyLnRyeU1vdmUoZHgsIGR5KSkge1xuICAgICAgICAgICAgdGhpcy5nYW1lLnRpY2soKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlZDE1NGRmYWQzOTBiOTEwMDU3MzA4YTM5NGZhNzQwYi5wbmdcIjsiLCJpbXBvcnQgc3ByaXRlcyBmcm9tICdhc3NldHMvc3ByaXRlcy5wbmcnO1xuXG5pbXBvcnQgeyBBbmltYXRpb24sIFJlbmRlcmluZ0xpYnJhcnksIFJlbmRlck9wdGlvbnMgfSBmcm9tICcuL0ludGVyZmFjZXMnO1xuXG5leHBvcnQgZW51bSBTcHJpdGVzIHtcbiAgICBBVVJBID0gMTMsXG59XG5cbmV4cG9ydCBjbGFzcyBDYW52YXNEcmF3aW5nTGlicmFyeSBpbXBsZW1lbnRzIFJlbmRlcmluZ0xpYnJhcnkge1xuICAgIHB1YmxpYyBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG4gICAgcHVibGljIG9wdGlvbnM6IFJlbmRlck9wdGlvbnM7XG4gICAgcHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3ByaXRlc2hlZXQ6IEhUTUxJbWFnZUVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBpc1JlbmRlcmVyUmVhZHkgPSBmYWxzZTtcbiAgICBwcml2YXRlIG9uUmVuZGVyZXJSZWFkeTogKCkgPT4gdm9pZDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihjYW52YXNFbGVtZW50SWQ6IHN0cmluZywgb3B0aW9uczogUmVuZGVyT3B0aW9ucykge1xuICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgY2FudmFzLmlkID0gY2FudmFzRWxlbWVudElkO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBpZiAoY3R4ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1hdGNoaW5nIGRyYXdpbmcgY29udGV4dCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjdHg7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICAgICAgdGhpcy5jb250ZXh0LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIENhbiBhbHNvIGJlIGFzc2lnbmVkIGJ5IGNhbGxpbmcgc2V0T25SZW5kZXJlclJlYWR5XG4gICAgICAgIHRoaXMub25SZW5kZXJlclJlYWR5ID1cbiAgICAgICAgICAgIG9wdGlvbnMub25SZW5kZXJlclJlYWR5ID8/XG4gICAgICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8qIHRtcCAqL1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgeyB0aWxlU2l6ZSwgbnVtVGlsZXMsIHVpV2lkdGggfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgY2FudmFzLndpZHRoID0gdGlsZVNpemUgKiAobnVtVGlsZXMgKyB1aVdpZHRoKTtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHRpbGVTaXplICogbnVtVGlsZXM7XG4gICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IGNhbnZhcy53aWR0aCArICdweCc7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0ICsgJ3B4JztcblxuICAgICAgICB0aGlzLnNwcml0ZXNoZWV0ID0gbmV3IEltYWdlKCk7XG4gICAgICAgIHRoaXMubG9hZEFzc2V0cygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRPblJlbmRlcmVyUmVhZHkob25SZWFkeTogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5pc1JlbmRlcmVyUmVhZHkpIHtcbiAgICAgICAgICAgIG9uUmVhZHkoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25SZW5kZXJlclJlYWR5ID0gb25SZWFkeTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBsb2FkQXNzZXRzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNwcml0ZXNoZWV0LnNyYyA9IHNwcml0ZXM7XG4gICAgICAgIHRoaXMuc3ByaXRlc2hlZXQub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pc1JlbmRlcmVyUmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5vblJlbmRlcmVyUmVhZHkoKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhd1Nwcml0ZShcbiAgICAgICAgc3ByaXRlOiBudW1iZXIsXG4gICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgeTogbnVtYmVyLFxuICAgICAgICBhbmltYXRpb24/OiBBbmltYXRpb24sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgY29uc3QgeyB0aWxlU2l6ZSB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzcHJpdGVzaGVldFJvd3MgPSB0aGlzLnNwcml0ZXNoZWV0LmhlaWdodCAvIHRpbGVTaXplO1xuICAgICAgICBjb25zdCBzcHJpdGVzaGVldENvbHVtbnMgPSB0aGlzLnNwcml0ZXNoZWV0LndpZHRoIC8gdGlsZVNpemU7XG4gICAgICAgIGNvbnN0IHNwcml0ZVJvdyA9IE1hdGguZmxvb3Ioc3ByaXRlIC8gc3ByaXRlc2hlZXRDb2x1bW5zKSAqIHRpbGVTaXplO1xuICAgICAgICBjb25zdCBzcHJpdGVDb2x1bW4gPSAoc3ByaXRlICUgc3ByaXRlc2hlZXRSb3dzKSAqIHRpbGVTaXplO1xuXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoXG4gICAgICAgICAgICB0aGlzLnNwcml0ZXNoZWV0LFxuICAgICAgICAgICAgc3ByaXRlQ29sdW1uLFxuICAgICAgICAgICAgc3ByaXRlUm93LFxuICAgICAgICAgICAgdGlsZVNpemUsXG4gICAgICAgICAgICB0aWxlU2l6ZSxcbiAgICAgICAgICAgIHggKiB0aWxlU2l6ZSArIChhbmltYXRpb24/LnNoYWtlWCA/PyAwKSxcbiAgICAgICAgICAgIHkgKiB0aWxlU2l6ZSArIChhbmltYXRpb24/LnNoYWtlWSA/PyAwKSxcbiAgICAgICAgICAgIHRpbGVTaXplLFxuICAgICAgICAgICAgdGlsZVNpemUsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXdSZWN0KFxuICAgICAgICBjb2xvcjogc3RyaW5nLFxuICAgICAgICB4OiBudW1iZXIsXG4gICAgICAgIHk6IG51bWJlcixcbiAgICAgICAgdyA9IHRoaXMuY2FudmFzLndpZHRoLFxuICAgICAgICBoID0gdGhpcy5jYW52YXMuaGVpZ2h0LFxuICAgICk6IHZvaWQge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGNvbnN0IG9sZENvbG9yID0gY3R4LmZpbGxTdHlsZTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgICAgICBjdHguZmlsbFJlY3QoeCwgeSwgdywgaCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvbGRDb2xvcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhd1RleHQoXG4gICAgICAgIHRleHQ6IHN0cmluZyxcbiAgICAgICAgc2l6ZTogbnVtYmVyLFxuICAgICAgICBjZW50ZXJlZDogYm9vbGVhbixcbiAgICAgICAgdGV4dFk6IG51bWJlcixcbiAgICAgICAgY29sb3I6IHN0cmluZyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgLy8gVE9ETzogQWxsb3cgYWNjZXNzIHRvIGNhbnZhcyBlbGVtZW50IG9yIGNhbnZhcyBzaXplXG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5jb250ZXh0LmZvbnQgPSBzaXplICsgJ3B4IG1vbm9zcGFjZSc7XG4gICAgICAgIGxldCB0ZXh0WDtcbiAgICAgICAgaWYgKGNlbnRlcmVkKSB7XG4gICAgICAgICAgICB0ZXh0WCA9XG4gICAgICAgICAgICAgICAgKHRoaXMuY2FudmFzLndpZHRoIC0gdGhpcy5jb250ZXh0Lm1lYXN1cmVUZXh0KHRleHQpLndpZHRoKSAvIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0WCA9XG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLVxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy51aVdpZHRoICogdGhpcy5vcHRpb25zLnRpbGVTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRleHQsIHRleHRYLCB0ZXh0WSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldEdsb2JhbEFscGhhKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIHJlc2V0R2xvYmFsQWxwaGEoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0R2xvYmFsQWxwaGEoMSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNsZWFyU2NyZWVuKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbVJhbmdlKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG59XG5cbmV4cG9ydCBjb25zdCBmbGF0dGVuID0gZnVuY3Rpb24gPFQ+KFxuICAgIGFycjogQXJyYXk8QXJyYXk8VD4+IHwgQXJyYXk8VD4sXG4gICAgcmVzdWx0OiBBcnJheTxUPiA9IFtdLFxuKTogQXJyYXk8VD4ge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBhcnIubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhcnJbaV07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZmxhdHRlbjxUPih2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRyeVRvKGRlc2NyaXB0aW9uOiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiBib29sZWFuKTogdm9pZCB7XG4gICAgZm9yIChsZXQgdGltZW91dCA9IDEwMDA7IHRpbWVvdXQgPiAwOyB0aW1lb3V0LS0pIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyAnVGltZW91dCB3aGlsZSB0cnlpbmcgdG8gJyArIGRlc2NyaXB0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2h1ZmZsZTxUPihhcnI6IEFycmF5PFQ+KTogQXJyYXk8VD4ge1xuICAgIGNvbnN0IG5ld0FycmF5ID0gYXJyLnNsaWNlKCk7XG4gICAgbGV0IHRlbXAsIHI7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBuZXdBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICByID0gcmFuZG9tUmFuZ2UoMCwgaSk7XG4gICAgICAgIHRlbXAgPSBuZXdBcnJheVtpXTtcbiAgICAgICAgbmV3QXJyYXlbaV0gPSBuZXdBcnJheVtyXTtcbiAgICAgICAgbmV3QXJyYXlbcl0gPSB0ZW1wO1xuICAgIH1cbiAgICByZXR1cm4gbmV3QXJyYXk7XG59XG4iLCJpbXBvcnQgeyBIaXN0b3J5IH0gZnJvbSAnLi9oaXN0b3J5L0hpc3RvcnknO1xuaW1wb3J0IHsgSXRlbSB9IGZyb20gJy4vSXRlbSc7XG5pbXBvcnQgeyBBbmltYXRpb24sIEdhbWVVSSwgTG9nZ2luZ0xpYnJhcnksIFJlbmRlcmluZ0xpYnJhcnkgfSBmcm9tICcuL2xpYi9JbnRlcmZhY2VzJztcbmltcG9ydCB7IGNyZWF0ZU1vbnN0ZXIsIERyYWdvbiwgR29ibGluLCBLb2JvbGQsIE1hbiwgTW9uc3RlciwgU25ha2UsIFRyb2xsLCBXb2xmLCB9IGZyb20gJy4vTW9uc3Rlcic7XG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICcuL1BsYXllcic7XG5pbXBvcnQgeyBzcGVsbHMgfSBmcm9tICcuL1NwZWxscyc7XG5pbXBvcnQgeyBGbG9vciwgU3RhaXJjYXNlRG93biwgU3RhaXJjYXNlVXAsIFRpbGUsIFdhbGwgfSBmcm9tICcuL1RpbGUnO1xuaW1wb3J0IHsgZmxhdHRlbiwgcmFuZG9tUmFuZ2UsIHRyeVRvIH0gZnJvbSAnLi9VdGlsJztcblxuZXhwb3J0IGludGVyZmFjZSBHYW1lT3B0aW9ucyB7XG4gICAgcmVuZGVyaW5nTGlicmFyeTogUmVuZGVyaW5nTGlicmFyeTtcbiAgICB1aTogR2FtZVVJO1xuICAgIGxvZ2dpbmc6IExvZ2dpbmdMaWJyYXJ5O1xufVxuXG5leHBvcnQgZW51bSBHYW1lU3RhdGUge1xuICAgIExPQURJTkcsXG4gICAgUExBWUlORyxcbiAgICBERUFELFxuICAgIFRJVExFLFxufVxuXG5leHBvcnQgY2xhc3MgR2FtZSB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEdhbWU7XG4gICAgcHVibGljIHJlbmRlcmVyOiBSZW5kZXJpbmdMaWJyYXJ5O1xuICAgIHB1YmxpYyB1aTogR2FtZVVJO1xuICAgIHB1YmxpYyBoaXN0b3J5OiBIaXN0b3J5O1xuICAgIHB1YmxpYyBsb2dnaW5nOiBMb2dnaW5nTGlicmFyeTtcbiAgICBwdWJsaWMgcGxheWVyID0gKG51bGwgYXMgdW5rbm93bikgYXMgUGxheWVyO1xuICAgIHB1YmxpYyB0aWxlczogQXJyYXk8QXJyYXk8VGlsZT4+ID0gW107XG4gICAgcHVibGljIG1vbnN0ZXJzOiBNb25zdGVyW10gPSBbXTtcbiAgICBwdWJsaWMgaXRlbXM6IEl0ZW1bXSA9IFtdO1xuICAgIC8vIFRPRE86IFVzZSBpbiBnZXRQb3NzaWJsZU1vbnN0ZXJzXG4gICAgcHVibGljIGxldmVsSUQgPSAwO1xuICAgIHB1YmxpYyBtYXhMZXZlbElEID0gMTY7XG4gICAgcHVibGljIGdhbWVTdGF0ZTogR2FtZVN0YXRlID0gR2FtZVN0YXRlLlRJVExFO1xuICAgIHB1YmxpYyBhbmltYXRpb246IEFuaW1hdGlvbjtcblxuICAgIHByaXZhdGUgY29uc3RydWN0b3Iob3B0aW9uczogR2FtZU9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IG9wdGlvbnMucmVuZGVyaW5nTGlicmFyeTtcbiAgICAgICAgdGhpcy51aSA9IG9wdGlvbnMudWk7XG4gICAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBIaXN0b3J5KCk7XG4gICAgICAgIHRoaXMubG9nZ2luZyA9IG9wdGlvbnMubG9nZ2luZztcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRPblJlbmRlcmVyUmVhZHkoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy51aS5yZW5kZXJUaXRsZVNjcmVlbih0aGlzKTtcbiAgICAgICAgICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgfSwgMTUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSB7XG4gICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgIHNoYWtlQW1vdW50OiAwLFxuICAgICAgICAgICAgc2hha2VYOiAwLFxuICAgICAgICAgICAgZWZmZWN0U3ByaXRlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBlZmZlY3RDb3VudGVyOiAwLFxuICAgICAgICAgICAgc2hha2VZOiAwLFxuICAgICAgICAgICAgLy8gVE9ETzogQ3JlYXRlIGEgR2FtZUFuaW1hdGlvbiBjbGFzc1xuICAgICAgICAgICAgc2NyZWVuc2hha2UoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hha2VBbW91bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFrZUFtb3VudC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBzaGFrZUFuZ2xlID0gTWF0aC5yYW5kb20oKSAqIE1hdGguUEkgKiAyO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hha2VYID0gTWF0aC5yb3VuZChcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5jb3Moc2hha2VBbmdsZSkgKiB0aGlzLnNoYWtlQW1vdW50LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFrZVkgPSBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbihzaGFrZUFuZ2xlKSAqIHRoaXMuc2hha2VBbW91bnQsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZShvcHRpb25zPzogR2FtZU9wdGlvbnMpOiBHYW1lIHtcbiAgICAgICAgaWYgKEdhbWUuaW5zdGFuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgJ2dldEluc3RhbmNlIG5lZWRzIHRvIGJlIHBhc3NlZCB0aGUgcGFyYW1ldGVycyB3aGVuIGNhbGxlZCBmb3IgdGhlIGZpc3QgdGltZScsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEdhbWUuaW5zdGFuY2UgPSBuZXcgR2FtZShvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gR2FtZS5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UmFuZG9tUGFzc2FibGVUaWxlKCk6IFRpbGUge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSYW5kb21UaWxlKCh0OiBUaWxlKSA9PiB0LnBhc3NhYmxlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VGlsZXMoY29uZGl0aW9uPzogKHRpbGU6IFRpbGUpID0+IGJvb2xlYW4pOiBBcnJheTxUaWxlPiB7XG4gICAgICAgIGNvbnN0IGFsbFRpbGVzID0gZmxhdHRlbjxUaWxlPih0aGlzLnRpbGVzKTtcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbiA9PT0gdW5kZWZpbmVkID8gYWxsVGlsZXMgOiBhbGxUaWxlcy5maWx0ZXIoY29uZGl0aW9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UGFzc2FibGVUaWxlcygpOiBBcnJheTxUaWxlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRpbGVzKCh0OiBUaWxlKSA9PiB0LnBhc3NhYmxlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHVwSW5wdXRIYW5kbGVycygpIHtcbiAgICAgICAgY29uc3QgaHRtbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2h0bWwnKTtcbiAgICAgICAgaWYgKGh0bWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdQbGVhc2UgcnVuIHRoZSBhcHAgaW4gdGhlIGJyb3dzZXIgZW52aXJvbm1lbnQnKTtcbiAgICAgICAgfVxuICAgICAgICBodG1sLm9ua2V5ZG93biA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGUgPT09IEdhbWVTdGF0ZS5USVRMRSB8fCB0aGlzLmdhbWVTdGF0ZSA9PT0gR2FtZVN0YXRlLkRFQUQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0R2FtZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdhbWVTdGF0ZSA9PT0gR2FtZVN0YXRlLlBMQVlJTkcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIudHJ5TW92ZSgwLCAtMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci50cnlNb3ZlKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdhJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIudHJ5TW92ZSgtMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci50cnlNb3ZlKDEsIDApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdFbnRlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxheWVyVGlsZSA9IHRoaXMucGxheWVyLmdldFRpbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuZ2V0VGlsZShwbGF5ZXJUaWxlLngsIHBsYXllclRpbGUueSk7XG4gICAgICAgICAgICAgICAgICAgIHRpbGUuZmVhdHVyZXMubWFwKGZlYXR1cmUgPT4gZmVhdHVyZS5vbkludGVyYWN0KHRoaXMucGxheWVyKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICAgICAgICAgICAgc3BlbGxzLmNvbmZ1c2UodGhpcy5wbGF5ZXIsIHRoaXMubW9uc3RlcnNbMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgLy8gTW9uc3RlciBtb3ZlbWVudHMgKHRlbXBvcmFyeSBmZWF0dXJlKVxuICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnN0ZXJzWzBdLnRyeU1vdmUoMCwgLTEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnN0ZXJzWzBdLnRyeU1vdmUoMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9uc3RlcnNbMF0udHJ5TW92ZSgtMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnN0ZXJzWzBdLnRyeU1vdmUoMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXR1cEdhbWUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0dXBJbnB1dEhhbmRsZXJzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGFydEdhbWUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlID0gR2FtZVN0YXRlLlBMQVlJTkc7XG4gICAgICAgIHRoaXMuc3RhcnRMZXZlbCgwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhcnRMZXZlbChsZXZlbElkOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5sZXZlbElEID0gbGV2ZWxJZDtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUxldmVsKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUxldmVsKCk6IHZvaWQge1xuICAgICAgICB0cnlUbygnZ2VuZXJhdGUgbWFwJywgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlVGlsZXMoKSA9PT1cbiAgICAgICAgICAgICAgICB0aGlzLmdldFJhbmRvbVBhc3NhYmxlVGlsZSgpLmdldENvbm5lY3RlZFRpbGVzKCkubGVuZ3RoXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzdGFydGluZ1RpbGUgPSB0aGlzLmdldFJhbmRvbVBhc3NhYmxlVGlsZSgpO1xuICAgICAgICB0aGlzLnBsYXllciA9IG5ldyBQbGF5ZXIoc3RhcnRpbmdUaWxlKTtcblxuICAgICAgICB0aGlzLm1vbnN0ZXJzID0gdGhpcy5nZW5lcmF0ZU1vbnN0ZXJzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMubGV2ZWxJRCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0UmFuZG9tUGFzc2FibGVUaWxlKCkucmVwbGFjZShTdGFpcmNhc2VVcCk7XG4gICAgICAgICAgICAvLyBzdGFpcnNVcCA9IG5ldyBTdGFpcmNhc2VVcChzdGFpcnNVcC54LCBzdGFpcnNVcC55KTtcbiAgICAgICAgICAgIC8vIHRoaXMudGlsZXNbc3RhaXJzVXAueF1bc3RhaXJzVXAueV0gPSBzdGFpcnNVcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmxldmVsSUQgPCB0aGlzLm1heExldmVsSUQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YWlyc0Rvd24gPSB0aGlzLmdldFJhbmRvbVBhc3NhYmxlVGlsZSgpLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgU3RhaXJjYXNlRG93bixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbElEID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc3RhaXJzRG93bi5zcHJpdGUgPSA0MjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHN0YWlyc0Rvd24gPSBuZXcgU3RhaXJjYXNlRG93bihzdGFpcnNEb3duLngsIHN0YWlyc0Rvd24ueSwgdGhpcy5sZXZlbElEID09PSAwID8gNDIgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgLy8gdGhpcy50aWxlc1tzdGFpcnNEb3duLnhdW3N0YWlyc0Rvd24ueV0gPSBzdGFpcnNEb3duO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyogVE9ETzogTm90IGZ1bGx5IGltcGxlbWVudGVkICovXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZU1vbnN0ZXJzKCk6IE1vbnN0ZXJbXSB7XG4gICAgICAgIGNvbnN0IG1vbnN0ZXJzOiBNb25zdGVyW10gPSBbXTtcblxuICAgICAgICBjb25zdCBhbGxNb25zdGVycyA9IFtcbiAgICAgICAgICAgIFtEcmFnb24sIE1hbiwgR29ibGluLCBTbmFrZSwgS29ib2xkXSxcbiAgICAgICAgICAgIFtEcmFnb24sIE1hbiwgR29ibGluLCBTbmFrZSwgS29ib2xkXSxcbiAgICAgICAgICAgIFtEcmFnb24sIE1hbiwgR29ibGluLCBTbmFrZSwgS29ib2xkXSxcbiAgICAgICAgICAgIFtLb2JvbGQsIEdvYmxpbl0sXG4gICAgICAgICAgICBbS29ib2xkLCBHb2JsaW5dLFxuICAgICAgICAgICAgW0RyYWdvbiwgRHJhZ29uLCBXb2xmLCBXb2xmLCBNYW4sIFRyb2xsLCBTbmFrZSwgU25ha2VdLFxuICAgICAgICAgICAgW0tvYm9sZCwgR29ibGluXSxcbiAgICAgICAgICAgIFtLb2JvbGQsIEdvYmxpbl0sXG4gICAgICAgICAgICBbS29ib2xkLCBHb2JsaW5dLFxuICAgICAgICAgICAgW0tvYm9sZCwgR29ibGluXSxcbiAgICAgICAgICAgIFtLb2JvbGQsIEdvYmxpbl0sXG4gICAgICAgICAgICBbS29ib2xkLCBHb2JsaW5dLFxuICAgICAgICAgICAgW0tvYm9sZCwgR29ibGluXSxcbiAgICAgICAgICAgIFtLb2JvbGQsIEdvYmxpbl0sXG4gICAgICAgIF07XG4gICAgICAgIC8vIGNvbnN0IG4gPSByYW5kb21SYW5nZSgyLCAyKTtcbiAgICAgICAgZm9yIChjb25zdCBtb25zdGVyIG9mIGFsbE1vbnN0ZXJzW3RoaXMubGV2ZWxJRF0pIHtcbiAgICAgICAgICAgIG1vbnN0ZXJzLnB1c2goY3JlYXRlTW9uc3Rlcihtb25zdGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vbnN0ZXJzO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyVGlsZXMoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG51bVRpbGVzID0gdGhpcy5yZW5kZXJlci5vcHRpb25zLm51bVRpbGVzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVRpbGVzOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnVtVGlsZXM7IGorKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0VGlsZShpLCBqKS5kcmF3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlck1vbnN0ZXJzKCk6IHZvaWQge1xuICAgICAgICBmb3IgKGNvbnN0IG1vbnN0ZXIgb2YgdGhpcy5tb25zdGVycykge1xuICAgICAgICAgICAgbW9uc3Rlci5kcmF3KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlVGlsZXMoKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IHBhc3NhYmxlVGlsZXMgPSAwO1xuICAgICAgICBjb25zdCB0aWxlczogQXJyYXk8QXJyYXk8VGlsZT4+ID0gW107XG4gICAgICAgIGNvbnN0IG51bVRpbGVzID0gdGhpcy5yZW5kZXJlci5vcHRpb25zLm51bVRpbGVzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVRpbGVzOyBpKyspIHtcbiAgICAgICAgICAgIHRpbGVzW2ldID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG51bVRpbGVzOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuMyB8fCAhdGhpcy5pbkJvdW5kcyhpLCBqKSkge1xuICAgICAgICAgICAgICAgICAgICB0aWxlc1tpXVtqXSA9IG5ldyBXYWxsKGksIGopO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbGVzW2ldW2pdID0gbmV3IEZsb29yKGksIGopO1xuICAgICAgICAgICAgICAgICAgICBwYXNzYWJsZVRpbGVzKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50aWxlcyA9IHRpbGVzO1xuICAgICAgICByZXR1cm4gcGFzc2FibGVUaWxlcztcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5Cb3VuZHMoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgbnVtVGlsZXMgPSB0aGlzLnJlbmRlcmVyLm9wdGlvbnMubnVtVGlsZXM7XG4gICAgICAgIHJldHVybiB4ID4gMCAmJiB5ID4gMCAmJiB4IDwgbnVtVGlsZXMgLSAxICYmIHkgPCBudW1UaWxlcyAtIDE7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFRpbGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBUaWxlIHtcbiAgICAgICAgaWYgKHRoaXMuaW5Cb3VuZHMoeCwgeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRpbGVzW3hdW3ldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXYWxsKHgsIHkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHRpY2soKTogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IGsgPSB0aGlzLm1vbnN0ZXJzLmxlbmd0aCAtIDE7IGsgPj0gMDsgay0tKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tb25zdGVyc1trXS5saWZlPy5pc0FsaXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vbnN0ZXJzW2tdLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vbnN0ZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5wbGF5ZXIubGlmZS5pc0FsaXZlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlID0gR2FtZVN0YXRlLkRFQUQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGUgPT09IEdhbWVTdGF0ZS5QTEFZSU5HKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmNsZWFyU2NyZWVuKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpb24uc2NyZWVuc2hha2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5zY3JlZW5zaGFrZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZW5kZXJUaWxlcygpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJNb25zdGVycygpO1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXIuZHJhdygpO1xuICAgICAgICAgICAgdGhpcy51aS5yZW5kZXIodGhpcyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5nYW1lU3RhdGUgPT09IEdhbWVTdGF0ZS5ERUFEKSB7XG4gICAgICAgICAgICB0aGlzLnVpLnJlbmRlckdhbWVPdmVyU2NyZWVuKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRSYW5kb21UaWxlKGNvbmRpdGlvbj86ICh0aWxlOiBUaWxlKSA9PiBib29sZWFuKTogVGlsZSB7XG4gICAgICAgIGNvbnN0IGFsbFRpbGVzID0gZmxhdHRlbjxUaWxlPih0aGlzLnRpbGVzKTtcbiAgICAgICAgY29uc3QgcG9zc2libGVUaWxlcyA9XG4gICAgICAgICAgICBjb25kaXRpb24gPT09IHVuZGVmaW5lZCA/IGFsbFRpbGVzIDogYWxsVGlsZXMuZmlsdGVyKGNvbmRpdGlvbik7XG4gICAgICAgIGNvbnN0IHJhbmRvbVRpbGVJbmRleCA9IHJhbmRvbVJhbmdlKDAsIHBvc3NpYmxlVGlsZXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHJldHVybiBwb3NzaWJsZVRpbGVzW3JhbmRvbVRpbGVJbmRleF07XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQWN0b3IgfSBmcm9tICcuL0FjdG9yJztcbmltcG9ydCB7IEdhbWUgfSBmcm9tICcuL0dhbWUnO1xuaW1wb3J0IHsgQW5pbWF0aW9uIH0gZnJvbSAnLi9saWIvSW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tICcuL1R5cGVzJztcbmltcG9ydCB7IHNodWZmbGUgfSBmcm9tICcuL1V0aWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRpbGVGZWF0dXJlIHtcbiAgICBvbkludGVyYWN0OiAoYWN0b3I6IEFjdG9yKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgVGlsZSB7XG4gICAgcHVibGljIGdhbWU6IEdhbWU7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyB4OiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyB5OiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyBzcHJpdGUgPSAwLFxuICAgICAgICBwdWJsaWMgcGFzc2FibGUgPSB0cnVlLFxuICAgICAgICBwdWJsaWMgbW9uc3RlcjogQWN0b3IgfCBudWxsID0gbnVsbCxcbiAgICAgICAgcHVibGljIGFuaW1hdGlvbj86IEFuaW1hdGlvbixcbiAgICAgICAgcHVibGljIGZlYXR1cmVzOiBUaWxlRmVhdHVyZVtdID0gW10sXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IEdhbWUuZ2V0SW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLmdhbWUucmVuZGVyZXI7XG4gICAgICAgIHJlbmRlcmVyLmRyYXdTcHJpdGUodGhpcy5zcHJpdGUsIHRoaXMueCwgdGhpcy55LCB0aGlzLmdhbWUuYW5pbWF0aW9uKTtcblxuICAgICAgICBpZiAodGhpcy5hbmltYXRpb24gJiYgdGhpcy5hbmltYXRpb24/LmVmZmVjdENvdW50ZXIgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5lZmZlY3RDb3VudGVyLS07XG4gICAgICAgICAgICByZW5kZXJlci5zZXRHbG9iYWxBbHBoYSh0aGlzLmFuaW1hdGlvbi5lZmZlY3RDb3VudGVyIC8gMzApO1xuICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uLmVmZmVjdFNwcml0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuZHJhd1Nwcml0ZSh0aGlzLmFuaW1hdGlvbi5lZmZlY3RTcHJpdGUsIHRoaXMueCwgdGhpcy55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbmRlcmVyLnJlc2V0R2xvYmFsQWxwaGEoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzZXRBbmltYXRpb25FZmZlY3QoZWZmZWN0U3ByaXRlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5lZmZlY3RTcHJpdGUgPSBlZmZlY3RTcHJpdGU7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5lZmZlY3RDb3VudGVyID0gMzA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QWN0b3JzT25UaGlzKCk6IEFjdG9yW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5nYW1lLm1vbnN0ZXJzLmZpbHRlcihcbiAgICAgICAgICAgIChhOiBBY3RvcikgPT4gYS50aWxlLnggPT09IHRoaXMueCAmJiBhLnRpbGUueSA9PT0gdGhpcy55LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXROZWlnaGJvcihkeDogbnVtYmVyLCBkeTogbnVtYmVyKTogVGlsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdhbWUuZ2V0VGlsZSh0aGlzLnggKyBkeCwgdGhpcy55ICsgZHkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBZGphY2VudE5laWdoYm9ycygpOiBBcnJheTxUaWxlPiB7XG4gICAgICAgIHJldHVybiBzaHVmZmxlPFRpbGU+KFtcbiAgICAgICAgICAgIHRoaXMuZ2V0TmVpZ2hib3IoMCwgLTEpLFxuICAgICAgICAgICAgdGhpcy5nZXROZWlnaGJvcigwLCAxKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0TmVpZ2hib3IoLTEsIDApLFxuICAgICAgICAgICAgdGhpcy5nZXROZWlnaGJvcigxLCAwKSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFkamFjZW50QWN0b3JzPFQgZXh0ZW5kcyBBY3Rvcj4oKTogQXJyYXk8VD4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5nZXRBZGphY2VudE5laWdoYm9ycygpXG4gICAgICAgICAgICAgICAgLmZpbHRlcigodCkgPT4gdC5tb25zdGVyICE9PSBudWxsKVxuICAgICAgICAgICAgICAgIC8vIFRPRE86IFJldHVybiBub3Qgb25seSBtb25zdGVyc1xuICAgICAgICAgICAgICAgIC5tYXAoKHQpID0+IHQubW9uc3RlciBhcyBUKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBZGphY2VudFBhc3NhYmxlVGlsZXMoKTogQXJyYXk8VGlsZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBZGphY2VudE5laWdoYm9ycygpLmZpbHRlcigodCkgPT4gdC5wYXNzYWJsZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGRpc3RhbmNlKG90aGVyOiBUaWxlKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHRoaXMueCAtIG90aGVyLngpICsgTWF0aC5hYnModGhpcy55IC0gb3RoZXIueSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvbm5lY3RlZFRpbGVzKCk6IEFycmF5PFRpbGU+IHtcbiAgICAgICAgbGV0IGNvbm5lY3RlZFRpbGVzOiBBcnJheTxUaWxlPiA9IFt0aGlzXTtcbiAgICAgICAgbGV0IGZyb250aWVyOiBBcnJheTxUaWxlPiA9IFt0aGlzXTtcbiAgICAgICAgd2hpbGUgKGZyb250aWVyLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgbmVpZ2hib3JzID0gZnJvbnRpZXJcbiAgICAgICAgICAgICAgICAucG9wKClcbiAgICAgICAgICAgICAgICA/LmdldEFkamFjZW50UGFzc2FibGVUaWxlcygpXG4gICAgICAgICAgICAgICAgLmZpbHRlcigodDogVGlsZSkgPT4gIWNvbm5lY3RlZFRpbGVzLmluY2x1ZGVzKHQpKTtcbiAgICAgICAgICAgIGNvbm5lY3RlZFRpbGVzID0gY29ubmVjdGVkVGlsZXMuY29uY2F0KG5laWdoYm9ycyA/PyBbXSk7XG4gICAgICAgICAgICBmcm9udGllciA9IGZyb250aWVyLmNvbmNhdChuZWlnaGJvcnMgPz8gW10pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25uZWN0ZWRUaWxlcztcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVwbGFjZShuZXdUaWxlVHlwZTogdHlwZW9mIFRpbGUpOiBUaWxlIHtcbiAgICAgICAgLy8gVE9ETzogY29weSBvdmVyIG1vbnN0ZXJzIGFuZCBpdGVtcyBmcm9tIHRoZSBvbGQgdGlsZSB0byB0aGUgbmV3IGlmIG5lY2Vzc2FyeVxuICAgICAgICB0aGlzLmdhbWUudGlsZXNbdGhpcy54XVt0aGlzLnldID0gbmV3IG5ld1RpbGVUeXBlKHRoaXMueCwgdGhpcy55KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZS50aWxlc1t0aGlzLnhdW3RoaXMueV07XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRmxvb3IgZXh0ZW5kcyBUaWxlIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgMzIsIHRydWUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFdhbGwgZXh0ZW5kcyBUaWxlIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgMzMsIGZhbHNlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdGFpcmNhc2UgZXh0ZW5kcyBUaWxlIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgeTogbnVtYmVyLFxuICAgICAgICBzcHJpdGU6IG51bWJlcixcbiAgICAgICAgcHVibGljIGRpcmVjdGlvbjogRGlyZWN0aW9uLFxuICAgICkge1xuICAgICAgICBzdXBlcih4LCB5LCBzcHJpdGUsIHRydWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbGltYihkaXJlY3Rpb246ICdVUCcgfCAnRE9XTicpIHtcbiAgICAgICAgY29uc3QgbmV4dExldmVsID0gdGhpcy5nYW1lLmxldmVsSUQgKyAoZGlyZWN0aW9uID09PSAnVVAnID8gLSAxIDogMSk7XG4gICAgICAgIHRoaXMuZ2FtZS5zdGFydExldmVsKG5leHRMZXZlbCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhaXJjYXNlVXAgZXh0ZW5kcyBTdGFpcmNhc2Uge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlciwgc3ByaXRlID0gNDQpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgc3ByaXRlLCAnVVAnKTtcbiAgICAgICAgdGhpcy5mZWF0dXJlcy5wdXNoKHtcbiAgICAgICAgICAgIG9uSW50ZXJhY3Q6IChhY3RvcikgPT4gdGhpcy5jbGltYignVVAnKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhaXJjYXNlRG93biBleHRlbmRzIFN0YWlyY2FzZSB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyLCBzcHJpdGUgPSA0Mykge1xuICAgICAgICBzdXBlcih4LCB5LCBzcHJpdGUsICdET1dOJyk7XG4gICAgICAgIHRoaXMuZmVhdHVyZXMucHVzaCh7XG4gICAgICAgICAgICBvbkludGVyYWN0OiAoYWN0b3IpID0+IHRoaXMuY2xpbWIoJ0RPV04nKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICcuL2luZGV4LmNzcyc7XG5cbmltcG9ydCB7IEdhbWUsIEdhbWVPcHRpb25zIH0gZnJvbSAnLi9HYW1lJztcbmltcG9ydCB7IENhbnZhc0RyYXdpbmdMaWJyYXJ5IH0gZnJvbSAnLi9saWIvQ2FudmFzRHJhd2luZ0xpYnJhcnknO1xuaW1wb3J0IHsgUmVuZGVyT3B0aW9ucyB9IGZyb20gJy4vbGliL0ludGVyZmFjZXMnO1xuaW1wb3J0IHsgQ29uc29sZUxvZ2dpbmcgfSBmcm9tICcuL2xpYi9Mb2dnaW5nJztcbmltcG9ydCB7IENhbnZhc1VJIH0gZnJvbSAnLi91aS9DYW52YXNVSSc7XG5cbmZ1bmN0aW9uIHNldHVwR2FtZSgpIHtcbiAgICBjb25zdCByZW5kZXJPcHRpb25zOiBSZW5kZXJPcHRpb25zID0ge1xuICAgICAgICB0aWxlU2l6ZTogMzIsXG4gICAgICAgIG51bVRpbGVzOiAxOSxcbiAgICAgICAgdWlXaWR0aDogNCxcbiAgICB9O1xuICAgIGNvbnN0IHJlbmRlcmluZ0xpYnJhcnkgPSBuZXcgQ2FudmFzRHJhd2luZ0xpYnJhcnkoJ2dhbWUnLCByZW5kZXJPcHRpb25zKTtcbiAgICBjb25zdCBnYW1lVUkgPSBuZXcgQ2FudmFzVUkoKTtcbiAgICBjb25zdCBsb2dnZXIgPSBuZXcgQ29uc29sZUxvZ2dpbmcoKTtcbiAgICBjb25zdCBnYW1lT3B0aW9uczogR2FtZU9wdGlvbnMgPSB7XG4gICAgICAgIHJlbmRlcmluZ0xpYnJhcnk6IHJlbmRlcmluZ0xpYnJhcnksXG4gICAgICAgIHVpOiBnYW1lVUksXG4gICAgICAgIGxvZ2dpbmc6IGxvZ2dlcixcbiAgICB9O1xuICAgIGNvbnN0IGdhbWUgPSBHYW1lLmdldEluc3RhbmNlKGdhbWVPcHRpb25zKTtcbiAgICBnYW1lLnNldHVwR2FtZSgpO1xufVxuXG5zZXR1cEdhbWUoKTtcbiIsImltcG9ydCB7IEFjdG9yLCBDb25mdXNpb25FZmZlY3QgfSBmcm9tICcuL0FjdG9yJztcbmltcG9ydCB7IFNwcml0ZXMgfSBmcm9tICcuL2xpYi9DYW52YXNEcmF3aW5nTGlicmFyeSc7XG5pbXBvcnQgeyBNb25zdGVyIH0gZnJvbSAnLi9Nb25zdGVyJztcblxuZXhwb3J0IGNvbnN0IHNwZWxscyA9IHtcbiAgICBibGluazogZnVuY3Rpb24gKGNhc3RlcjogTW9uc3Rlcik6IHZvaWQge1xuICAgICAgICBjYXN0ZXIubW92ZShjYXN0ZXIuZ2FtZS5nZXRSYW5kb21QYXNzYWJsZVRpbGUoKSk7XG4gICAgfSxcbiAgICBxdWFrZTogZnVuY3Rpb24gKGNhc3RlcjogQWN0b3IpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGlsZXMgPSBjYXN0ZXIuZ2FtZS50aWxlcztcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aWxlcy5sZW5ndGg7IHkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aWxlcy5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbGUgPSBjYXN0ZXIudGlsZTtcbiAgICAgICAgICAgICAgICBpZiAodGlsZS5tb25zdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG51bVdhbGxzID0gNCAtIHRpbGUuZ2V0QWRqYWNlbnRQYXNzYWJsZVRpbGVzKCkubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB0aWxlLm1vbnN0ZXIubGlmZT8udGFrZURhbWFnZShjYXN0ZXIsIG51bVdhbGxzICogMTAsIFtdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FzdGVyLmdhbWUuYW5pbWF0aW9uLnNoYWtlQW1vdW50ID0gMjA7XG4gICAgfSxcbiAgICBtYWVsc3Ryb206IGZ1bmN0aW9uIChjYXN0ZXI6IEFjdG9yKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGdhbWUgPSBjYXN0ZXIuZ2FtZTtcbiAgICAgICAgY29uc3QgbW9uc3RlcnMgPSBnYW1lLm1vbnN0ZXJzO1xuICAgICAgICBmb3IgKGNvbnN0IG1vbnN0ZXIgb2YgbW9uc3RlcnMpIHtcbiAgICAgICAgICAgIG1vbnN0ZXIubW92ZShnYW1lLmdldFJhbmRvbVBhc3NhYmxlVGlsZSgpKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbXVsbGlnYW46IGZ1bmN0aW9uIChjYXN0ZXI6IEFjdG9yKTogdm9pZCB7XG4gICAgICAgIGNhc3Rlci5nYW1lLnN0YXJ0TGV2ZWwoY2FzdGVyLmdhbWUubGV2ZWxJRCk7XG4gICAgfSxcbiAgICBhdXJhOiBmdW5jdGlvbiAoY2FzdGVyOiBBY3Rvcik6IHZvaWQge1xuICAgICAgICBmb3IgKGNvbnN0IHRpbGUgb2YgY2FzdGVyLnRpbGUuZ2V0QWRqYWNlbnROZWlnaGJvcnMoKSkge1xuICAgICAgICAgICAgdGlsZS5zZXRBbmltYXRpb25FZmZlY3QoMTMpO1xuICAgICAgICAgICAgaWYgKHRpbGUubW9uc3Rlcikge1xuICAgICAgICAgICAgICAgIHRpbGUubW9uc3Rlci5saWZlPy5oZWFsKDUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzdGVyLnRpbGUuc2V0QW5pbWF0aW9uRWZmZWN0KDEzKTtcbiAgICAgICAgICAgIGNhc3Rlci5saWZlPy5oZWFsKDUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkYXNoOiBmdW5jdGlvbiAoY2FzdGVyOiBNb25zdGVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG5ld1RpbGUgPSBjYXN0ZXIudGlsZTtcbiAgICAgICAgbGV0IHRlc3RUaWxlO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHRlc3RUaWxlID0gbmV3VGlsZS5nZXROZWlnaGJvcihcbiAgICAgICAgICAgICAgICBjYXN0ZXIubGFzdE1vdmUueCxcbiAgICAgICAgICAgICAgICBjYXN0ZXIubGFzdE1vdmUueSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gd2hpbGUgKHRlc3RUaWxlLnBhc3NhYmxlICYmICF0ZXN0VGlsZS5tb25zdGVyKTtcblxuICAgICAgICBpZiAoY2FzdGVyLnRpbGUgIT09IG5ld1RpbGUpIHtcbiAgICAgICAgICAgIGNhc3Rlci5tb3ZlKG5ld1RpbGUpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0aWxlIG9mIG5ld1RpbGUuZ2V0QWRqYWNlbnROZWlnaGJvcnMoKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aWxlLm1vbnN0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGlsZS5zZXRBbmltYXRpb25FZmZlY3QoU3ByaXRlcy5BVVJBKTtcbiAgICAgICAgICAgICAgICAgICAgdGlsZS5tb25zdGVyLnN0dW5uZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aWxlLm1vbnN0ZXIubGlmZT8udGFrZURhbWFnZShjYXN0ZXIsIDEwLCBbXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBjb25mdXNlOiBmdW5jdGlvbiAoY2FzdGVyOiBBY3RvciwgdGFyZ2V0OiBNb25zdGVyKTogdm9pZCB7XG4gICAgICAgIGlmICh0YXJnZXQuYWkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0LmFkZEVmZmVjdChDb25mdXNpb25FZmZlY3QpO1xuICAgIH0sXG59O1xuIiwiaW1wb3J0IHsgTG9nZ2luZ0xpYnJhcnkgfSBmcm9tICcuL0ludGVyZmFjZXMnO1xuXG4vKlxuICogQGV4cGVyaW1lbnRhbFxuICovXG5leHBvcnQgY2xhc3MgQ29uc29sZUxvZ2dpbmcgaW1wbGVtZW50cyBMb2dnaW5nTGlicmFyeSB7XG4gICAgcHVibGljIGxvZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgfVxufSIsImltcG9ydCB7IEdhbWUsIEdhbWVTdGF0ZSB9IGZyb20gJy4uL0dhbWUnO1xuaW1wb3J0IHsgR2FtZVVJIH0gZnJvbSAnLi4vbGliL0ludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgQ2FudmFzVUkgaW1wbGVtZW50cyBHYW1lVUkge1xuICAgIC8qXG4gICAgICogRGlzcGxheSBtZXNzYWdlIHVzaW5nIHRoZSByZW5kZXJpbmcgbGlicmFyeSB0aGUgZ2FtZSB3YXMgc2V0IHVwIHdpdGguXG4gICAgICogQHBhcmFtIGNvbG9yIG1pZ2h0IGJlIGlnbm9yZWQgaWYgdGhlIHJlbmRlcmluZyBsaWJyYXJ5IGRvZXMgbm90IHN1cHBvcnQgaXQuXG4gICAgICovXG4gICAgcHVibGljIG1zZyhnYW1lOiBHYW1lLCB0ZXh0OiBzdHJpbmcsIGNvbG9yID0gJ3Zpb2xldCcpOiB2b2lkIHtcbiAgICAgICAgZ2FtZS5sb2dnaW5nLmxvZyh0ZXh0KTtcbiAgICAgICAgXG4gICAgICAgIGdhbWUucmVuZGVyZXIuZHJhd1RleHQoXG4gICAgICAgICAgICAnTGV2ZWw6ICcgKyBnYW1lLmxldmVsSUQsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgNDAsXG4gICAgICAgICAgICBjb2xvcixcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFJlbmRlciB0aGUgVUkgYmFzZWQgb24gdGhlIGdhbWVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVuZGVyKGdhbWU6IEdhbWUpOiB2b2lkIHtcbiAgICAgICAgZ2FtZS5yZW5kZXJlci5kcmF3VGV4dChcbiAgICAgICAgICAgICdMZXZlbDogJyArIGdhbWUubGV2ZWxJRCxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICA0MCxcbiAgICAgICAgICAgICd2aW9sZXQnLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXJUaXRsZVNjcmVlbihnYW1lOiBHYW1lKTogdm9pZCB7XG4gICAgICAgIGdhbWUucmVuZGVyZXIuZHJhd1JlY3QoJ3JnYmEoMCwwLDAsLjc1KScsIDAsIDApO1xuICAgICAgICBnYW1lLmdhbWVTdGF0ZSA9IEdhbWVTdGF0ZS5USVRMRTtcblxuICAgICAgICAvLyB0aGlzLnJlbmRlcmVyLmRyYXdUZXh0KFwiU1VQRVJcIiwgNDAsIHRydWUsIGNhbnZhcy5oZWlnaHQgLyAyIC0gMTEwLCBcIndoaXRlXCIpO1xuICAgICAgICBnYW1lLnJlbmRlcmVyLmRyYXdUZXh0KFxuICAgICAgICAgICAgJ1BSRVNTIEFOWSBLRVkgVE8gU1RBUlQnLFxuICAgICAgICAgICAgNTAsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgNTAwLFxuICAgICAgICAgICAgJ3doaXRlJyxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyR2FtZU92ZXJTY3JlZW4oZ2FtZTogR2FtZSk6IHZvaWQge1xuICAgICAgICBnYW1lLnJlbmRlcmVyLmRyYXdSZWN0KCdyZ2JhKDAsMCwwLC41KScsIDAsIDApO1xuXG4gICAgICAgIGdhbWUucmVuZGVyZXIuZHJhd1RleHQoXG4gICAgICAgICAgICAnWU9VIERJRScsXG4gICAgICAgICAgICA1MCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAzMDAsXG4gICAgICAgICAgICAncmVkJyxcbiAgICAgICAgKTtcblxuICAgICAgICBnYW1lLnJlbmRlcmVyLmRyYXdUZXh0KFxuICAgICAgICAgICAgJ1BSRVNTIEFOWSBLRVkgVE8gU1RBUlQgQUdBSU4nLFxuICAgICAgICAgICAgNDAsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgNDAwLFxuICAgICAgICAgICAgJ3doaXRlJyxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicmVwbGFjZSIsInAiLCJDb21tYW5kcyIsIm1lc3NhZ2VzIiwibWVzc2FnZSIsIk1PVkVfVVAiLCJNT1ZFX1JJR0hUIiwiTU9WRV9ET1dOIiwiTU9WRV9MRUZUIiwiUElDS19JVEVNIiwiRFJPUF9JVEVNIiwiRFJPUF9MQVNUX0lURU0iLCJRVUFGRiIsIk9QRU5fSU5WRU5UT1JZIiwiV0lFTEQiLCJVTldJRUxEIiwiVEhST1ciLCJJTlZPS0UiLCJQUkFZIiwiaHAiLCJtYXhIcCIsImRlZmVuY2UiLCJhY3RvciIsImdhbWUiLCJHYW1lIiwiZ2V0SW5zdGFuY2UiLCJkaWUiLCJnZXRUaWxlIiwibW9uc3RlciIsImlzUGxheWVyIiwidWkiLCJtc2ciLCJnZXROYW1lIiwiaXNBbGl2ZSIsInRha2VEYW1hZ2UiLCJkZWFsZXIiLCJ2YWx1ZSIsIm1vZGlmaWVycyIsIndlYXBvbiIsImRhbWFnZVRha2VuIiwicG93ZXIiLCJyZWR1Y2UiLCJwcmV2IiwiY3VycmVudCIsImhwQmVmb3JlQXR0YWNrIiwiTWF0aCIsIm1heCIsImhlYWwiLCJtaW4iLCJuYW1lIiwiaXRlbXMiLCJnZXRDdXJyZW50V2VhcG9uIiwicGlja0l0ZW0iLCJza2lsbHMiLCJxdWVzdHMiLCJ4cCIsImF0dGFja0NvdW50VGhpc1R1cm4iLCJwdXJzdWluZyIsInhwTGV2ZWwiLCJwdXJzdWUiLCJwbGF5ZXIiLCJnZXRTa2lsbHMiLCJnZXRRdWVzdHMiLCJhZGRRdWVzdCIsInF1ZXN0IiwiYWN0Iiwic3R1bm5lZCIsInRvd2FyZFB1cnN1ZWRBY3RvciIsIm5laWdoYm9ycyIsImdldEFkamFjZW50VGlsZXMiLCJmaWx0ZXIiLCJ0IiwiYWN0b3JzIiwiZ2V0QWN0b3JzT25UaGlzIiwic29ydCIsImIiLCJkaXN0YW5jZSIsIm5ld1RpbGUiLCJ0cnlNb3ZlIiwieCIsInRpbGUiLCJ5Iiwib2xkQUkiLCJhaSIsIm9uRXhwaXJlZCIsIkNvbmZ1c2VkQUkiLCJ0dXJuc0xlZnQiLCJyZW5kZXJPbk1hcCIsInJlbmRlck9uVUkiLCJzcHJpdGUiLCJsaWZlIiwiZG9tYWlucyIsImxhc3RNb3ZlIiwiZWZmZWN0cyIsImFuaW1hdGlvbiIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZWZmZWN0Q291bnRlciIsInNoYWtlQW1vdW50Iiwic2hha2VYIiwic2hha2VZIiwiYWRkRWZmZWN0IiwiZWZmZWN0Q2xhc3MiLCJlZmZlY3QiLCJnZXREaXNwbGF5WCIsImdldERpc3BsYXlZIiwiZHJhdyIsInJlbmRlcmVyIiwiZHJhd1Nwcml0ZSIsInNpZ24iLCJnZXRBZGphY2VudFBhc3NhYmxlVGlsZXMiLCJtYXhIUCIsIkxpZmUiLCJTaW1wbGVMaWZlIiwiTW92ZUFuZEF0dGFja0FJIiwiZHJhd0hQIiwidGlsZVNpemUiLCJncmVlbkxlbmd0aCIsInJlZExlbmd0aCIsImRyYXdSZWN0IiwiZHgiLCJkeSIsImdldE5laWdoYm9yIiwicGFzc2FibGUiLCJtb3ZlIiwiY3VycmVudFRpbGUiLCJBY3RvciIsIk1vbnN0ZXIiLCJTbG93QUkiLCJDb25zdW1lckFJIiwiY3JlYXRlTW9uc3RlciIsImFjdG9yQ2xhc3MiLCJnZXRSYW5kb21QYXNzYWJsZVRpbGUiLCJBSSIsInNwZWVkIiwic3RhcnRlZFN0dW5uZWQiLCJlYXQiLCJwb2ludHNIZWFsZWQiLCJzbWFsbE1vbnN0ZXJzIiwibW9uc3RlcnMiLCJnZXRBZGphY2VudEFjdG9ycyIsIldpemFyZExpZmUiLCJ0aWNrIiwiU3ByaXRlcyIsImNhbnZhc0VsZW1lbnRJZCIsImlzUmVuZGVyZXJSZWFkeSIsImNhbnZhcyIsImJvZHkiLCJjdHgiLCJnZXRDb250ZXh0IiwiY29udGV4dCIsImltYWdlU21vb3RoaW5nRW5hYmxlZCIsIm9uUmVuZGVyZXJSZWFkeSIsIm51bVRpbGVzIiwidWlXaWR0aCIsIndpZHRoIiwiaGVpZ2h0Iiwic3ByaXRlc2hlZXQiLCJJbWFnZSIsImxvYWRBc3NldHMiLCJzZXRPblJlbmRlcmVyUmVhZHkiLCJvblJlYWR5Iiwic3ByaXRlcyIsIm9ubG9hZCIsInNwcml0ZXNoZWV0Um93cyIsInNwcml0ZXNoZWV0Q29sdW1ucyIsInNwcml0ZVJvdyIsImZsb29yIiwic3ByaXRlQ29sdW1uIiwiZHJhd0ltYWdlIiwiY29sb3IiLCJ3IiwiaCIsIm9sZENvbG9yIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJkcmF3VGV4dCIsInRleHQiLCJzaXplIiwiY2VudGVyZWQiLCJ0ZXh0WSIsInRleHRYIiwiZm9udCIsIm1lYXN1cmVUZXh0IiwiZmlsbFRleHQiLCJzZXRHbG9iYWxBbHBoYSIsImdsb2JhbEFscGhhIiwicmVzZXRHbG9iYWxBbHBoYSIsImNsZWFyU2NyZWVuIiwiY2xlYXJSZWN0IiwicmFuZG9tUmFuZ2UiLCJyYW5kb20iLCJHYW1lU3RhdGUiLCJmbGF0dGVuIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiZmVhdHVyZXMiLCJlZmZlY3RTcHJpdGUiLCJzZXRBbmltYXRpb25FZmZlY3QiLCJnZXRBZGphY2VudE5laWdoYm9ycyIsInRlbXAiLCJyIiwibmV3QXJyYXkiLCJzbGljZSIsInNodWZmbGUiLCJvdGhlciIsImFicyIsImdldENvbm5lY3RlZFRpbGVzIiwiY29ubmVjdGVkVGlsZXMiLCJmcm9udGllciIsInBvcCIsImluY2x1ZGVzIiwibmV3VGlsZVR5cGUiLCJ0aWxlcyIsIlRpbGUiLCJkaXJlY3Rpb24iLCJjbGltYiIsIm5leHRMZXZlbCIsImxldmVsSUQiLCJzdGFydExldmVsIiwib25JbnRlcmFjdCIsIlN0YWlyY2FzZSIsImdhbWVPcHRpb25zIiwibWF4TGV2ZWxJRCIsImdhbWVTdGF0ZSIsIlRJVExFIiwicmVuZGVyaW5nTGlicmFyeSIsImhpc3RvcnkiLCJIaXN0b3J5IiwibG9nZ2luZyIsInJlbmRlclRpdGxlU2NyZWVuIiwic2V0SW50ZXJ2YWwiLCJyZW5kZXIiLCJzY3JlZW5zaGFrZSIsInNoYWtlQW5nbGUiLCJQSSIsInJvdW5kIiwiY29zIiwic2luIiwiaW5zdGFuY2UiLCJnZXRSYW5kb21UaWxlIiwiZ2V0VGlsZXMiLCJjb25kaXRpb24iLCJhbGxUaWxlcyIsImdldFBhc3NhYmxlVGlsZXMiLCJzZXR1cElucHV0SGFuZGxlcnMiLCJodG1sIiwib25rZXlkb3duIiwiREVBRCIsInN0YXJ0R2FtZSIsIlBMQVlJTkciLCJwbGF5ZXJUaWxlIiwiZmVhdHVyZSIsIkNvbmZ1c2lvbkVmZmVjdCIsInNldHVwR2FtZSIsImxldmVsSWQiLCJnZW5lcmF0ZUxldmVsIiwiZGVzY3JpcHRpb24iLCJjYWxsYmFjayIsInRpbWVvdXQiLCJnZW5lcmF0ZVRpbGVzIiwidHJ5VG8iLCJzdGFydGluZ1RpbGUiLCJQbGF5ZXIiLCJnZW5lcmF0ZU1vbnN0ZXJzIiwiU3RhaXJjYXNlVXAiLCJzdGFpcnNEb3duIiwiU3RhaXJjYXNlRG93biIsIkRyYWdvbiIsIk1hbiIsIkdvYmxpbiIsIlNuYWtlIiwiS29ib2xkIiwiV29sZiIsIlRyb2xsIiwicmVuZGVyVGlsZXMiLCJqIiwicmVuZGVyTW9uc3RlcnMiLCJwYXNzYWJsZVRpbGVzIiwiaW5Cb3VuZHMiLCJXYWxsIiwiRmxvb3IiLCJyZW5kZXJHYW1lT3ZlclNjcmVlbiIsInBvc3NpYmxlVGlsZXMiLCJsb2ciLCJjb25zb2xlIiwiQ2FudmFzRHJhd2luZ0xpYnJhcnkiLCJDYW52YXNVSSIsIkNvbnNvbGVMb2dnaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==